
ICM_SPI_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800f4b8  0800f4b8  0001f4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc4c  0800fc4c  000202d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800fc4c  0800fc4c  000202d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fc4c  0800fc4c  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc4c  0800fc4c  0001fc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc50  0800fc50  0001fc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800fc54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000147c  200002d4  0800ff28  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  0800ff28  00021750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001959b  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004842  00000000  00000000  000398e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003e128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010de  00000000  00000000  0003f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9ea  00000000  00000000  0004087e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e58e  00000000  00000000  00060268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad824  00000000  00000000  0007e7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c6c  00000000  00000000  0012c01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00132c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f49c 	.word	0x0800f49c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800f49c 	.word	0x0800f49c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_GPIO_Init+0xd4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f002 fa8b 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	4813      	ldr	r0, [pc, #76]	; (8000d20 <MX_GPIO_Init+0xd8>)
 8000cd2:	f002 fa85 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f002 f904 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_GPIO_Init+0xd8>)
 8000d0e:	f002 f8f5 	bl	8002efc <HAL_GPIO_Init>

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400

08000d24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <MX_I2C1_Init+0x78>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <MX_I2C1_Init+0x7c>)
 8000d32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d60:	f002 fa56 	bl	8003210 <HAL_I2C_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d6a:	f001 f985 	bl	8002078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d72:	f002 fae8 	bl	8003346 <HAL_I2CEx_ConfigAnalogFilter>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d7c:	f001 f97c 	bl	8002078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_I2C1_Init+0x74>)
 8000d84:	f002 fb2a 	bl	80033dc <HAL_I2CEx_ConfigDigitalFilter>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f001 f973 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200002f0 	.word	0x200002f0
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	00702991 	.word	0x00702991

08000da4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b096      	sub	sp, #88	; 0x58
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	2234      	movs	r2, #52	; 0x34
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00c fb07 	bl	800d3d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_I2C_MspInit+0xa8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d137      	bne.n	8000e44 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 ff97 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dec:	f001 f944 	bl	8002078 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_I2C_MspInit+0xac>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <HAL_I2C_MspInit+0xac>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_I2C_MspInit+0xac>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0e:	2312      	movs	r3, #18
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f002 f868 	bl	8002efc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_I2C_MspInit+0xac>)
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_I2C_MspInit+0xac>)
 8000e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e36:	6593      	str	r3, [r2, #88]	; 0x58
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_I2C_MspInit+0xac>)
 8000e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e44:	bf00      	nop
 8000e46:	3758      	adds	r7, #88	; 0x58
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	40021000 	.word	0x40021000

08000e54 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000e58:	bf00      	nop
 8000e5a:	f000 fa55 	bl	8001308 <icm20948_who_am_i>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f083 0301 	eor.w	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f7      	bne.n	8000e5a <icm20948_init+0x6>

	icm20948_device_reset();
 8000e6a:	f000 fa95 	bl	8001398 <icm20948_device_reset>
	icm20948_wakeup();
 8000e6e:	f000 fabe 	bl	80013ee <icm20948_wakeup>

	icm20948_clock_source(1);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 fb36 	bl	80014e4 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000e78:	f000 fb4d 	bl	8001516 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8000e7c:	f000 fad1 	bl	8001422 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 fb51 	bl	8001528 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 fb6b 	bl	8001562 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(10);
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f000 fb85 	bl	800159c <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(10);
 8000e92:	200a      	movs	r0, #10
 8000e94:	f000 fb91 	bl	80015ba <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000e98:	f000 fbbe 	bl	8001618 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8000e9c:	f000 fc58 	bl	8001750 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 fd63 	bl	800196c <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	f000 fdaa 	bl	8001a00 <icm20948_accel_full_scale_select>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <ak09916_init>:

void ak09916_init()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8000eb4:	f000 facc 	bl	8001450 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8000eb8:	f000 fae1 	bl	800147e <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8000ebc:	2007      	movs	r0, #7
 8000ebe:	f000 faf8 	bl	80014b2 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8000ec2:	bf00      	nop
 8000ec4:	f000 fa44 	bl	8001350 <ak09916_who_am_i>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	f083 0301 	eor.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f7      	bne.n	8000ec4 <ak09916_init+0x14>

	// LP_CONFIG: ODR is determined by I2C_MST_ODR_CONFIG register, page 37
	// I2C_MST_ODR_CONFIG: 1.1 kHz/(2^3) = 136 Hz, page 68
	ak09916_lp_config();
 8000ed4:	f000 fa6c 	bl	80013b0 <ak09916_lp_config>
	ak09916_soft_reset();
 8000ed8:	f000 fa7e 	bl	80013d8 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8000edc:	2008      	movs	r0, #8
 8000ede:	f000 fb8a 	bl	80015f6 <ak09916_operation_mode_setting>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <icm20948_gyro_read>:


void icm20948_gyro_read(axises* data)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000eee:	2206      	movs	r2, #6
 8000ef0:	2133      	movs	r1, #51	; 0x33
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 fe48 	bl	8001b88 <read_multiple_icm20948_reg>
 8000ef8:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3301      	adds	r3, #1
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	3302      	adds	r3, #2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3303      	adds	r3, #3
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3304      	adds	r3, #4
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3305      	adds	r3, #5
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000f74:	2206      	movs	r2, #6
 8000f76:	212d      	movs	r1, #45	; 0x2d
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 fe05 	bl	8001b88 <read_multiple_icm20948_reg>
 8000f7e:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3303      	adds	r3, #3
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3305      	adds	r3, #5
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <icm20948_accel_read+0x90>)
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000348 	.word	0x20000348

08001000 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
//void ak09916_mag_read(axises* data)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 8001008:	2010      	movs	r0, #16
 800100a:	f000 fe19 	bl	8001c40 <read_single_ak09916_reg>
 800100e:	4603      	mov	r3, r0
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
	if(!drdy){
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <ak09916_mag_read+0x26>
		printf("data is not ready\n");
 800101c:	4829      	ldr	r0, [pc, #164]	; (80010c4 <ak09916_mag_read+0xc4>)
 800101e:	f00c f8db 	bl	800d1d8 <puts>
		return false;
 8001022:	2300      	movs	r3, #0
 8001024:	e049      	b.n	80010ba <ak09916_mag_read+0xba>
	}

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8001026:	2106      	movs	r1, #6
 8001028:	2011      	movs	r0, #17
 800102a:	f000 fe55 	bl	8001cd8 <read_multiple_ak09916_reg>
 800102e:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8001030:	2018      	movs	r0, #24
 8001032:	f000 fe05 	bl	8001c40 <read_single_ak09916_reg>
 8001036:	4603      	mov	r3, r0
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	73fb      	strb	r3, [r7, #15]
	if(hofl){
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <ak09916_mag_read+0x4e>
		printf("data is overflow\n");
 8001044:	4820      	ldr	r0, [pc, #128]	; (80010c8 <ak09916_mag_read+0xc8>)
 8001046:	f00c f8c7 	bl	800d1d8 <puts>
		return false;
 800104a:	2300      	movs	r3, #0
 800104c:	e035      	b.n	80010ba <ak09916_mag_read+0xba>
	}

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	3301      	adds	r3, #1
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21b      	sxth	r3, r3
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	3303      	adds	r3, #3
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	3302      	adds	r3, #2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21b      	sxth	r3, r3
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	3305      	adds	r3, #5
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	3304      	adds	r3, #4
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 80010b8:	2301      	movs	r3, #1
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	0800f4b8 	.word	0x0800f4b8
 80010c8:	0800f4cc 	.word	0x0800f4cc
 80010cc:	00000000 	.word	0x00000000

080010d0 <read_all_data>:
	return true;
}

icm_20948_data read_all_data(void)
//uint8_t read_all_data(icm_20948_data* data)
{
 80010d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d4:	b09c      	sub	sp, #112	; 0x70
 80010d6:	af04      	add	r7, sp, #16
 80010d8:	6078      	str	r0, [r7, #4]
	icm_20948_data result;
	axises my_gyro;
	axises my_accel;
	axises my_mag;

	icm20948_gyro_read(&my_gyro);
 80010da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff01 	bl	8000ee6 <icm20948_gyro_read>

	my_gyro.x /= gyro_scale_factor;
 80010e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80010e8:	4b7f      	ldr	r3, [pc, #508]	; (80012e8 <read_all_data+0x218>)
 80010ea:	ed93 7a00 	vldr	s14, [r3]
 80010ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	my_gyro.y /= gyro_scale_factor;
 80010f6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80010fa:	4b7b      	ldr	r3, [pc, #492]	; (80012e8 <read_all_data+0x218>)
 80010fc:	ed93 7a00 	vldr	s14, [r3]
 8001100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001104:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	my_gyro.z /= gyro_scale_factor;
 8001108:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800110c:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <read_all_data+0x218>)
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	icm20948_accel_read(&my_accel);
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff24 	bl	8000f6c <icm20948_accel_read>

	my_accel.x /= accel_scale_factor;
 8001124:	edd7 6a08 	vldr	s13, [r7, #32]
 8001128:	4b70      	ldr	r3, [pc, #448]	; (80012ec <read_all_data+0x21c>)
 800112a:	ed93 7a00 	vldr	s14, [r3]
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	edc7 7a08 	vstr	s15, [r7, #32]
	my_accel.y /= accel_scale_factor;
 8001136:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800113a:	4b6c      	ldr	r3, [pc, #432]	; (80012ec <read_all_data+0x21c>)
 800113c:	ed93 7a00 	vldr	s14, [r3]
 8001140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001144:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	my_accel.z /= accel_scale_factor;
 8001148:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800114c:	4b67      	ldr	r3, [pc, #412]	; (80012ec <read_all_data+0x21c>)
 800114e:	ed93 7a00 	vldr	s14, [r3]
 8001152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001156:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	axises temp;
	bool new_data = ak09916_mag_read(&temp);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff4e 	bl	8001000 <ak09916_mag_read>
 8001164:	4603      	mov	r3, r0
 8001166:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
//	ak09916_mag_read(&temp);
	printf("new data is %d\n", new_data);
 800116a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800116e:	4619      	mov	r1, r3
 8001170:	485f      	ldr	r0, [pc, #380]	; (80012f0 <read_all_data+0x220>)
 8001172:	f00b ffcb 	bl	800d10c <iprintf>
	if(!new_data)
 8001176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <read_all_data+0xbc>
	{
		printf("data not ready/ overflow for magnetometer\n");
 8001184:	485b      	ldr	r0, [pc, #364]	; (80012f4 <read_all_data+0x224>)
 8001186:	f00c f827 	bl	800d1d8 <puts>
		while(1);
 800118a:	e7fe      	b.n	800118a <read_all_data+0xba>
	}
	else
	{
		printf("magnetometer reading finished.\n");
 800118c:	485a      	ldr	r0, [pc, #360]	; (80012f8 <read_all_data+0x228>)
 800118e:	f00c f823 	bl	800d1d8 <puts>
	}

	my_mag.x = (float)(temp.x * 0.15);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f9d7 	bl	8000548 <__aeabi_f2d>
 800119a:	a351      	add	r3, pc, #324	; (adr r3, 80012e0 <read_all_data+0x210>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa2a 	bl	80005f8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fcfc 	bl	8000ba8 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	617b      	str	r3, [r7, #20]
	my_mag.y = (float)(temp.y * 0.15);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9c6 	bl	8000548 <__aeabi_f2d>
 80011bc:	a348      	add	r3, pc, #288	; (adr r3, 80012e0 <read_all_data+0x210>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff fa19 	bl	80005f8 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fceb 	bl	8000ba8 <__aeabi_d2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	61bb      	str	r3, [r7, #24]
	my_mag.z = (float)(temp.z * 0.15);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9b5 	bl	8000548 <__aeabi_f2d>
 80011de:	a340      	add	r3, pc, #256	; (adr r3, 80012e0 <read_all_data+0x210>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fa08 	bl	80005f8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcda 	bl	8000ba8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	61fb      	str	r3, [r7, #28]


    result.x_magnet = my_mag.x;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	653b      	str	r3, [r7, #80]	; 0x50
    result.y_magnet = my_mag.y;
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
    result.z_magnet = my_mag.z;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	65bb      	str	r3, [r7, #88]	; 0x58

    result.x_accel = my_accel.x;
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
    result.y_accel = my_accel.y;
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
    result.z_accel = my_accel.z;
 800120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120e:	643b      	str	r3, [r7, #64]	; 0x40

    result.x_gyro = my_gyro.x;
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	647b      	str	r3, [r7, #68]	; 0x44
    result.y_gyro = my_gyro.y;
 8001214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001216:	64bb      	str	r3, [r7, #72]	; 0x48
    result.z_gyro = my_gyro.z;
 8001218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121a:	64fb      	str	r3, [r7, #76]	; 0x4c

    printf("accelerometer : %f, %f, and %f \n", result.x_accel,
 800121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f992 	bl	8000548 <__aeabi_f2d>
 8001224:	4680      	mov	r8, r0
 8001226:	4689      	mov	r9, r1
           result.y_accel, result.z_accel);
 8001228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    printf("accelerometer : %f, %f, and %f \n", result.x_accel,
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f98c 	bl	8000548 <__aeabi_f2d>
 8001230:	4604      	mov	r4, r0
 8001232:	460d      	mov	r5, r1
           result.y_accel, result.z_accel);
 8001234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    printf("accelerometer : %f, %f, and %f \n", result.x_accel,
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f986 	bl	8000548 <__aeabi_f2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001244:	e9cd 4500 	strd	r4, r5, [sp]
 8001248:	4642      	mov	r2, r8
 800124a:	464b      	mov	r3, r9
 800124c:	482b      	ldr	r0, [pc, #172]	; (80012fc <read_all_data+0x22c>)
 800124e:	f00b ff5d 	bl	800d10c <iprintf>
    printf("gyroscope : %f, %f, and %f \n", result.x_gyro,
 8001252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f977 	bl	8000548 <__aeabi_f2d>
 800125a:	4680      	mov	r8, r0
 800125c:	4689      	mov	r9, r1
           result.y_gyro, result.z_gyro);
 800125e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    printf("gyroscope : %f, %f, and %f \n", result.x_gyro,
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f971 	bl	8000548 <__aeabi_f2d>
 8001266:	4604      	mov	r4, r0
 8001268:	460d      	mov	r5, r1
           result.y_gyro, result.z_gyro);
 800126a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    printf("gyroscope : %f, %f, and %f \n", result.x_gyro,
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f96b 	bl	8000548 <__aeabi_f2d>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800127a:	e9cd 4500 	strd	r4, r5, [sp]
 800127e:	4642      	mov	r2, r8
 8001280:	464b      	mov	r3, r9
 8001282:	481f      	ldr	r0, [pc, #124]	; (8001300 <read_all_data+0x230>)
 8001284:	f00b ff42 	bl	800d10c <iprintf>
    printf("magnetometer : %f, %f, and %f\n", result.x_magnet,
 8001288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f95c 	bl	8000548 <__aeabi_f2d>
 8001290:	4680      	mov	r8, r0
 8001292:	4689      	mov	r9, r1
           result.y_magnet, result.z_magnet);
 8001294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    printf("magnetometer : %f, %f, and %f\n", result.x_magnet,
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f956 	bl	8000548 <__aeabi_f2d>
 800129c:	4604      	mov	r4, r0
 800129e:	460d      	mov	r5, r1
           result.y_magnet, result.z_magnet);
 80012a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    printf("magnetometer : %f, %f, and %f\n", result.x_magnet,
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f950 	bl	8000548 <__aeabi_f2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012b0:	e9cd 4500 	strd	r4, r5, [sp]
 80012b4:	4642      	mov	r2, r8
 80012b6:	464b      	mov	r3, r9
 80012b8:	4812      	ldr	r0, [pc, #72]	; (8001304 <read_all_data+0x234>)
 80012ba:	f00b ff27 	bl	800d10c <iprintf>

    return result;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	461d      	mov	r5, r3
 80012c2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	602b      	str	r3, [r5, #0]

}
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	3760      	adds	r7, #96	; 0x60
 80012d6:	46bd      	mov	sp, r7
 80012d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012dc:	f3af 8000 	nop.w
 80012e0:	33333333 	.word	0x33333333
 80012e4:	3fc33333 	.word	0x3fc33333
 80012e8:	20000344 	.word	0x20000344
 80012ec:	20000348 	.word	0x20000348
 80012f0:	0800f500 	.word	0x0800f500
 80012f4:	0800f510 	.word	0x0800f510
 80012f8:	0800f53c 	.word	0x0800f53c
 80012fc:	0800f55c 	.word	0x0800f55c
 8001300:	0800f580 	.word	0x0800f580
 8001304:	0800f4e0 	.word	0x0800f4e0

08001308 <icm20948_who_am_i>:
bool icm20948_who_am_i()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 800130e:	2100      	movs	r1, #0
 8001310:	2000      	movs	r0, #0
 8001312:	f000 fbe9 	bl	8001ae8 <read_single_icm20948_reg>
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	printf("the icm20948 who am i is: 0x%x\n",icm20948_id);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4619      	mov	r1, r3
 800131e:	4809      	ldr	r0, [pc, #36]	; (8001344 <icm20948_who_am_i+0x3c>)
 8001320:	f00b fef4 	bl	800d10c <iprintf>
	if(icm20948_id == ICM20948_ID){
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2bea      	cmp	r3, #234	; 0xea
 8001328:	d104      	bne.n	8001334 <icm20948_who_am_i+0x2c>
		printf("Data matches, icm20948 identity verified.\n");
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <icm20948_who_am_i+0x40>)
 800132c:	f00b ff54 	bl	800d1d8 <puts>
		return true;
 8001330:	2301      	movs	r3, #1
 8001332:	e003      	b.n	800133c <icm20948_who_am_i+0x34>
	}
	else{
		printf("Data not matched, icm20948 incorrect.\n");
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <icm20948_who_am_i+0x44>)
 8001336:	f00b ff4f 	bl	800d1d8 <puts>
		return false;
 800133a:	2300      	movs	r3, #0
	}
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	0800f5a0 	.word	0x0800f5a0
 8001348:	0800f5c0 	.word	0x0800f5c0
 800134c:	0800f5ec 	.word	0x0800f5ec

08001350 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8001356:	2001      	movs	r0, #1
 8001358:	f000 fc72 	bl	8001c40 <read_single_ak09916_reg>
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
	printf("the ak09916_id who am i is: 0x%x\n", ak09916_id);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4619      	mov	r1, r3
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <ak09916_who_am_i+0x3c>)
 8001366:	f00b fed1 	bl	800d10c <iprintf>
	if(ak09916_id == AK09916_ID)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b09      	cmp	r3, #9
 800136e:	d104      	bne.n	800137a <ak09916_who_am_i+0x2a>
	{
		printf("Data matches, ak09916 identity verified.\n");
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <ak09916_who_am_i+0x40>)
 8001372:	f00b ff31 	bl	800d1d8 <puts>
		return true;
 8001376:	2301      	movs	r3, #1
 8001378:	e003      	b.n	8001382 <ak09916_who_am_i+0x32>
	}
	else
	{
		printf("Data not matched, ak09916 incorrect.\n");
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <ak09916_who_am_i+0x44>)
 800137c:	f00b ff2c 	bl	800d1d8 <puts>
		return false;
 8001380:	2300      	movs	r3, #0
	}
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	0800f614 	.word	0x0800f614
 8001390:	0800f638 	.word	0x0800f638
 8001394:	0800f664 	.word	0x0800f664

08001398 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 800139c:	22c1      	movs	r2, #193	; 0xc1
 800139e:	2106      	movs	r1, #6
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 fbcd 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(100);
 80013a6:	2064      	movs	r0, #100	; 0x64
 80013a8:	f001 fc72 	bl	8002c90 <HAL_Delay>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <ak09916_lp_config>:

void ak09916_lp_config()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	// LP_CONFIG: ODR is determined by I2C_MST_ODR_CONFIG register, page 37
	write_single_icm20948_reg(ub_0, B0_LP_CONFIG, 0x40);
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	2105      	movs	r1, #5
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 fbc1 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(100);
 80013be:	2064      	movs	r0, #100	; 0x64
 80013c0:	f001 fc66 	bl	8002c90 <HAL_Delay>
	// I2C_MST_ODR_CONFIG: 1.1 kHz/(2^3) = 136 Hz, page 68
	write_single_icm20948_reg(ub_3, B3_I2C_MST_ODR_CONFIG, 0x03);
 80013c4:	2203      	movs	r2, #3
 80013c6:	2100      	movs	r1, #0
 80013c8:	2030      	movs	r0, #48	; 0x30
 80013ca:	f000 fbb9 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(100);
 80013ce:	2064      	movs	r0, #100	; 0x64
 80013d0:	f001 fc5e 	bl	8002c90 <HAL_Delay>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 80013dc:	2101      	movs	r1, #1
 80013de:	2032      	movs	r0, #50	; 0x32
 80013e0:	f000 fc52 	bl	8001c88 <write_single_ak09916_reg>
	HAL_Delay(100);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f001 fc53 	bl	8002c90 <HAL_Delay>
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}

080013ee <icm20948_wakeup>:

void icm20948_wakeup()
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80013f4:	2106      	movs	r1, #6
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 fb76 	bl	8001ae8 <read_single_icm20948_reg>
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001406:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	461a      	mov	r2, r3
 800140c:	2106      	movs	r1, #6
 800140e:	2000      	movs	r0, #0
 8001410:	f000 fb96 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(100);
 8001414:	2064      	movs	r0, #100	; 0x64
 8001416:	f001 fc3b 	bl	8002c90 <HAL_Delay>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001428:	2103      	movs	r1, #3
 800142a:	2000      	movs	r0, #0
 800142c:	f000 fb5c 	bl	8001ae8 <read_single_icm20948_reg>
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	461a      	mov	r2, r3
 8001440:	2103      	movs	r1, #3
 8001442:	2000      	movs	r0, #0
 8001444:	f000 fb7c 	bl	8001b40 <write_single_icm20948_reg>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001456:	2103      	movs	r1, #3
 8001458:	2000      	movs	r0, #0
 800145a:	f000 fb45 	bl	8001ae8 <read_single_icm20948_reg>
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	461a      	mov	r2, r3
 800146e:	2103      	movs	r1, #3
 8001470:	2000      	movs	r0, #0
 8001472:	f000 fb65 	bl	8001b40 <write_single_icm20948_reg>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001484:	2103      	movs	r1, #3
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fb2e 	bl	8001ae8 <read_single_icm20948_reg>
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f043 0320 	orr.w	r3, r3, #32
 8001496:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	461a      	mov	r2, r3
 800149c:	2103      	movs	r1, #3
 800149e:	2000      	movs	r0, #0
 80014a0:	f000 fb4e 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(100);
 80014a4:	2064      	movs	r0, #100	; 0x64
 80014a6:	f001 fbf3 	bl	8002c90 <HAL_Delay>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80014bc:	2101      	movs	r1, #1
 80014be:	2030      	movs	r0, #48	; 0x30
 80014c0:	f000 fb12 	bl	8001ae8 <read_single_icm20948_reg>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	461a      	mov	r2, r3
 80014d4:	2101      	movs	r1, #1
 80014d6:	2030      	movs	r0, #48	; 0x30
 80014d8:	f000 fb32 	bl	8001b40 <write_single_icm20948_reg>
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80014ee:	2106      	movs	r1, #6
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 faf9 	bl	8001ae8 <read_single_icm20948_reg>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4313      	orrs	r3, r2
 8001500:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	461a      	mov	r2, r3
 8001506:	2106      	movs	r1, #6
 8001508:	2000      	movs	r0, #0
 800150a:	f000 fb19 	bl	8001b40 <write_single_icm20948_reg>
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 800151a:	2201      	movs	r2, #1
 800151c:	2109      	movs	r1, #9
 800151e:	2020      	movs	r0, #32
 8001520:	f000 fb0e 	bl	8001b40 <write_single_icm20948_reg>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001532:	2101      	movs	r1, #1
 8001534:	2020      	movs	r0, #32
 8001536:	f000 fad7 	bl	8001ae8 <read_single_icm20948_reg>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	b25a      	sxtb	r2, r3
 8001544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001548:	4313      	orrs	r3, r2
 800154a:	b25b      	sxtb	r3, r3
 800154c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	461a      	mov	r2, r3
 8001552:	2101      	movs	r1, #1
 8001554:	2020      	movs	r0, #32
 8001556:	f000 faf3 	bl	8001b40 <write_single_icm20948_reg>
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800156c:	2114      	movs	r1, #20
 800156e:	2020      	movs	r0, #32
 8001570:	f000 faba 	bl	8001ae8 <read_single_icm20948_reg>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	b25a      	sxtb	r2, r3
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4313      	orrs	r3, r2
 8001584:	b25b      	sxtb	r3, r3
 8001586:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	461a      	mov	r2, r3
 800158c:	2101      	movs	r1, #1
 800158e:	2020      	movs	r0, #32
 8001590:	f000 fad6 	bl	8001b40 <write_single_icm20948_reg>
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	461a      	mov	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	2020      	movs	r0, #32
 80015ae:	f000 fac7 	bl	8001b40 <write_single_icm20948_reg>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	461a      	mov	r2, r3
 80015da:	2110      	movs	r1, #16
 80015dc:	2020      	movs	r0, #32
 80015de:	f000 faaf 	bl	8001b40 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 80015e2:	7bbb      	ldrb	r3, [r7, #14]
 80015e4:	461a      	mov	r2, r3
 80015e6:	2111      	movs	r1, #17
 80015e8:	2020      	movs	r0, #32
 80015ea:	f000 faa9 	bl	8001b40 <write_single_icm20948_reg>
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4619      	mov	r1, r3
 8001604:	2031      	movs	r0, #49	; 0x31
 8001606:	f000 fb3f 	bl	8001c88 <write_single_ak09916_reg>
	HAL_Delay(100);
 800160a:	2064      	movs	r0, #100	; 0x64
 800160c:	f001 fb40 	bl	8002c90 <HAL_Delay>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	2300      	movs	r3, #0
 8001630:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
 8001636:	e031      	b.n	800169c <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fc52 	bl	8000ee6 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001668:	edd7 7a07 	vldr	s15, [r7, #28]
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001684:	edd7 7a08 	vldr	s15, [r7, #32]
 8001688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001690:	ee17 3a90 	vmov	r3, s15
 8001694:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	3301      	adds	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	2b63      	cmp	r3, #99	; 0x63
 80016a0:	ddca      	ble.n	8001638 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a29      	ldr	r2, [pc, #164]	; (800174c <icm20948_gyro_calibration+0x134>)
 80016a6:	fb82 1203 	smull	r1, r2, r2, r3
 80016aa:	1152      	asrs	r2, r2, #5
 80016ac:	17db      	asrs	r3, r3, #31
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4a25      	ldr	r2, [pc, #148]	; (800174c <icm20948_gyro_calibration+0x134>)
 80016b6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ba:	1152      	asrs	r2, r2, #5
 80016bc:	17db      	asrs	r3, r3, #31
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	4a21      	ldr	r2, [pc, #132]	; (800174c <icm20948_gyro_calibration+0x134>)
 80016c6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ca:	1152      	asrs	r2, r2, #5
 80016cc:	17db      	asrs	r3, r3, #31
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	425b      	negs	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	da00      	bge.n	80016dc <icm20948_gyro_calibration+0xc4>
 80016da:	3303      	adds	r3, #3
 80016dc:	109b      	asrs	r3, r3, #2
 80016de:	121b      	asrs	r3, r3, #8
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	425b      	negs	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da00      	bge.n	80016ee <icm20948_gyro_calibration+0xd6>
 80016ec:	3303      	adds	r3, #3
 80016ee:	109b      	asrs	r3, r3, #2
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	425b      	negs	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	da00      	bge.n	80016fe <icm20948_gyro_calibration+0xe6>
 80016fc:	3303      	adds	r3, #3
 80016fe:	109b      	asrs	r3, r3, #2
 8001700:	121b      	asrs	r3, r3, #8
 8001702:	b2db      	uxtb	r3, r3
 8001704:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	425b      	negs	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	da00      	bge.n	8001710 <icm20948_gyro_calibration+0xf8>
 800170e:	3303      	adds	r3, #3
 8001710:	109b      	asrs	r3, r3, #2
 8001712:	b2db      	uxtb	r3, r3
 8001714:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	425b      	negs	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	da00      	bge.n	8001720 <icm20948_gyro_calibration+0x108>
 800171e:	3303      	adds	r3, #3
 8001720:	109b      	asrs	r3, r3, #2
 8001722:	121b      	asrs	r3, r3, #8
 8001724:	b2db      	uxtb	r3, r3
 8001726:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	425b      	negs	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	da00      	bge.n	8001732 <icm20948_gyro_calibration+0x11a>
 8001730:	3303      	adds	r3, #3
 8001732:	109b      	asrs	r3, r3, #2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	727b      	strb	r3, [r7, #9]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8001738:	1d3a      	adds	r2, r7, #4
 800173a:	2306      	movs	r3, #6
 800173c:	2103      	movs	r1, #3
 800173e:	2020      	movs	r0, #32
 8001740:	f000 fa52 	bl	8001be8 <write_multiple_icm20948_reg>
}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	51eb851f 	.word	0x51eb851f

08001750 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b090      	sub	sp, #64	; 0x40
 8001754:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 8001756:	f107 0318 	add.w	r3, r7, #24
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	2300      	movs	r3, #0
 8001774:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001776:	2300      	movs	r3, #0
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800177a:	e031      	b.n	80017e0 <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 800177c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fbf3 	bl	8000f6c <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001790:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179c:	ee17 3a90 	vmov	r3, s15
 80017a0:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b8:	ee17 3a90 	vmov	r3, s15
 80017bc:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d4:	ee17 3a90 	vmov	r3, s15
 80017d8:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 80017da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017dc:	3301      	adds	r3, #1
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e2:	2b63      	cmp	r3, #99	; 0x63
 80017e4:	ddca      	ble.n	800177c <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <icm20948_accel_calibration+0x214>)
 80017ea:	fb82 1203 	smull	r1, r2, r2, r3
 80017ee:	1152      	asrs	r2, r2, #5
 80017f0:	17db      	asrs	r3, r3, #31
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	4a5a      	ldr	r2, [pc, #360]	; (8001964 <icm20948_accel_calibration+0x214>)
 80017fa:	fb82 1203 	smull	r1, r2, r2, r3
 80017fe:	1152      	asrs	r2, r2, #5
 8001800:	17db      	asrs	r3, r3, #31
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	4a56      	ldr	r2, [pc, #344]	; (8001964 <icm20948_accel_calibration+0x214>)
 800180a:	fb82 1203 	smull	r1, r2, r2, r3
 800180e:	1152      	asrs	r2, r2, #5
 8001810:	17db      	asrs	r3, r3, #31
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 8001816:	4a54      	ldr	r2, [pc, #336]	; (8001968 <icm20948_accel_calibration+0x218>)
 8001818:	463b      	mov	r3, r7
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	4611      	mov	r1, r2
 800181e:	8019      	strh	r1, [r3, #0]
 8001820:	3302      	adds	r3, #2
 8001822:	0c12      	lsrs	r2, r2, #16
 8001824:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8001826:	2202      	movs	r2, #2
 8001828:	2114      	movs	r1, #20
 800182a:	2010      	movs	r0, #16
 800182c:	f000 f9ac 	bl	8001b88 <read_multiple_icm20948_reg>
 8001830:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8001832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800183a:	3201      	adds	r2, #1
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 8001842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001844:	3301      	adds	r3, #1
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8001850:	2202      	movs	r2, #2
 8001852:	2117      	movs	r1, #23
 8001854:	2010      	movs	r0, #16
 8001856:	f000 f997 	bl	8001b88 <read_multiple_icm20948_reg>
 800185a:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001864:	3201      	adds	r2, #1
 8001866:	7812      	ldrb	r2, [r2, #0]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	3301      	adds	r3, #1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 800187a:	2202      	movs	r2, #2
 800187c:	211a      	movs	r1, #26
 800187e:	2010      	movs	r0, #16
 8001880:	f000 f982 	bl	8001b88 <read_multiple_icm20948_reg>
 8001884:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800188e:	3201      	adds	r2, #1
 8001890:	7812      	ldrb	r2, [r2, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8001896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001898:	3301      	adds	r3, #1
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da00      	bge.n	80018ae <icm20948_accel_calibration+0x15e>
 80018ac:	3307      	adds	r3, #7
 80018ae:	10db      	asrs	r3, r3, #3
 80018b0:	425b      	negs	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da00      	bge.n	80018c0 <icm20948_accel_calibration+0x170>
 80018be:	3307      	adds	r3, #7
 80018c0:	10db      	asrs	r3, r3, #3
 80018c2:	425b      	negs	r3, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da00      	bge.n	80018d2 <icm20948_accel_calibration+0x182>
 80018d0:	3307      	adds	r3, #7
 80018d2:	10db      	asrs	r3, r3, #3
 80018d4:	425b      	negs	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	121b      	asrs	r3, r3, #8
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80018ee:	797a      	ldrb	r2, [r7, #5]
 80018f0:	783b      	ldrb	r3, [r7, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	121b      	asrs	r3, r3, #8
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	787b      	ldrb	r3, [r7, #1]
 8001910:	4313      	orrs	r3, r2
 8001912:	b2db      	uxtb	r3, r3
 8001914:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	121b      	asrs	r3, r3, #8
 800191a:	b2db      	uxtb	r3, r3
 800191c:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 800192a:	7a7a      	ldrb	r2, [r7, #9]
 800192c:	78bb      	ldrb	r3, [r7, #2]
 800192e:	4313      	orrs	r3, r2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	727b      	strb	r3, [r7, #9]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001934:	1d3a      	adds	r2, r7, #4
 8001936:	2302      	movs	r3, #2
 8001938:	2114      	movs	r1, #20
 800193a:	2010      	movs	r0, #16
 800193c:	f000 f954 	bl	8001be8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	1c9a      	adds	r2, r3, #2
 8001944:	2302      	movs	r3, #2
 8001946:	2117      	movs	r1, #23
 8001948:	2010      	movs	r0, #16
 800194a:	f000 f94d 	bl	8001be8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	1d1a      	adds	r2, r3, #4
 8001952:	2302      	movs	r3, #2
 8001954:	211a      	movs	r1, #26
 8001956:	2010      	movs	r0, #16
 8001958:	f000 f946 	bl	8001be8 <write_multiple_icm20948_reg>
}
 800195c:	bf00      	nop
 800195e:	3740      	adds	r7, #64	; 0x40
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	51eb851f 	.word	0x51eb851f
 8001968:	0800f68c 	.word	0x0800f68c

0800196c <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001976:	2101      	movs	r1, #1
 8001978:	2020      	movs	r0, #32
 800197a:	f000 f8b5 	bl	8001ae8 <read_single_icm20948_reg>
 800197e:	4603      	mov	r3, r0
 8001980:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d827      	bhi.n	80019d8 <icm20948_gyro_full_scale_select+0x6c>
 8001988:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <icm20948_gyro_full_scale_select+0x24>)
 800198a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198e:	bf00      	nop
 8001990:	080019a1 	.word	0x080019a1
 8001994:	080019a9 	.word	0x080019a9
 8001998:	080019b9 	.word	0x080019b9
 800199c:	080019c9 	.word	0x080019c9
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <icm20948_gyro_full_scale_select+0x80>)
 80019a2:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <icm20948_gyro_full_scale_select+0x84>)
 80019a4:	601a      	str	r2, [r3, #0]
			break;
 80019a6:	e017      	b.n	80019d8 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <icm20948_gyro_full_scale_select+0x80>)
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <icm20948_gyro_full_scale_select+0x88>)
 80019b4:	601a      	str	r2, [r3, #0]
			break;
 80019b6:	e00f      	b.n	80019d8 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <icm20948_gyro_full_scale_select+0x80>)
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <icm20948_gyro_full_scale_select+0x8c>)
 80019c4:	601a      	str	r2, [r3, #0]
			break;
 80019c6:	e007      	b.n	80019d8 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	f043 0306 	orr.w	r3, r3, #6
 80019ce:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <icm20948_gyro_full_scale_select+0x80>)
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <icm20948_gyro_full_scale_select+0x90>)
 80019d4:	601a      	str	r2, [r3, #0]
			break;
 80019d6:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	461a      	mov	r2, r3
 80019dc:	2101      	movs	r1, #1
 80019de:	2020      	movs	r0, #32
 80019e0:	f000 f8ae 	bl	8001b40 <write_single_icm20948_reg>
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000344 	.word	0x20000344
 80019f0:	43030000 	.word	0x43030000
 80019f4:	42830000 	.word	0x42830000
 80019f8:	42033333 	.word	0x42033333
 80019fc:	41833333 	.word	0x41833333

08001a00 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001a0a:	2114      	movs	r1, #20
 8001a0c:	2020      	movs	r0, #32
 8001a0e:	f000 f86b 	bl	8001ae8 <read_single_icm20948_reg>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d82b      	bhi.n	8001a74 <icm20948_accel_full_scale_select+0x74>
 8001a1c:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <icm20948_accel_full_scale_select+0x24>)
 8001a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a22:	bf00      	nop
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001a3f 	.word	0x08001a3f
 8001a2c:	08001a51 	.word	0x08001a51
 8001a30:	08001a63 	.word	0x08001a63
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <icm20948_accel_full_scale_select+0x88>)
 8001a36:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001a3a:	601a      	str	r2, [r3, #0]
			break;
 8001a3c:	e01a      	b.n	8001a74 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <icm20948_accel_full_scale_select+0x88>)
 8001a48:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001a4c:	601a      	str	r2, [r3, #0]
			break;
 8001a4e:	e011      	b.n	8001a74 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <icm20948_accel_full_scale_select+0x88>)
 8001a5a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001a5e:	601a      	str	r2, [r3, #0]
			break;
 8001a60:	e008      	b.n	8001a74 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	f043 0306 	orr.w	r3, r3, #6
 8001a68:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <icm20948_accel_full_scale_select+0x88>)
 8001a6c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001a70:	601a      	str	r2, [r3, #0]
			break;
 8001a72:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	461a      	mov	r2, r3
 8001a78:	2114      	movs	r1, #20
 8001a7a:	2020      	movs	r0, #32
 8001a7c:	f000 f860 	bl	8001b40 <write_single_icm20948_reg>
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000348 	.word	0x20000348

08001a8c <cs_high>:


/* Static Functions */
static void cs_high()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2110      	movs	r1, #16
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f001 fba2 	bl	80031e0 <HAL_GPIO_WritePin>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <cs_low>:

static void cs_low()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f001 fb98 	bl	80031e0 <HAL_GPIO_WritePin>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001abe:	237f      	movs	r3, #127	; 0x7f
 8001ac0:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	737b      	strb	r3, [r7, #13]

	cs_low();
 8001ac6:	f7ff ffeb 	bl	8001aa0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8001aca:	f107 010c 	add.w	r1, r7, #12
 8001ace:	230a      	movs	r3, #10
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <select_user_bank+0x30>)
 8001ad4:	f004 fe87 	bl	80067e6 <HAL_SPI_Transmit>
	cs_high();
 8001ad8:	f7ff ffd8 	bl	8001a8c <cs_high>
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200003a0 	.word	0x200003a0

08001ae8 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ffd5 	bl	8001ab4 <select_user_bank>

	cs_low();
 8001b0a:	f7ff ffc9 	bl	8001aa0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001b0e:	f107 010f 	add.w	r1, r7, #15
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	2201      	movs	r2, #1
 8001b18:	4808      	ldr	r0, [pc, #32]	; (8001b3c <read_single_icm20948_reg+0x54>)
 8001b1a:	f004 fe64 	bl	80067e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001b1e:	f107 010e 	add.w	r1, r7, #14
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	2201      	movs	r2, #1
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <read_single_icm20948_reg+0x54>)
 8001b2a:	f004 ffd1 	bl	8006ad0 <HAL_SPI_Receive>
	cs_high();
 8001b2e:	f7ff ffad 	bl	8001a8c <cs_high>

	return reg_val;
 8001b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200003a0 	.word	0x200003a0

08001b40 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	71bb      	strb	r3, [r7, #6]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001b52:	79bb      	ldrb	r3, [r7, #6]
 8001b54:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8001b56:	797b      	ldrb	r3, [r7, #5]
 8001b58:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ffa9 	bl	8001ab4 <select_user_bank>

	cs_low();
 8001b62:	f7ff ff9d 	bl	8001aa0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8001b66:	f107 010c 	add.w	r1, r7, #12
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	2202      	movs	r2, #2
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <write_single_icm20948_reg+0x44>)
 8001b72:	f004 fe38 	bl	80067e6 <HAL_SPI_Transmit>
	cs_high();
 8001b76:	f7ff ff89 	bl	8001a8c <cs_high>
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200003a0 	.word	0x200003a0

08001b88 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	460b      	mov	r3, r1
 8001b94:	71bb      	strb	r3, [r7, #6]
 8001b96:	4613      	mov	r3, r2
 8001b98:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8001b9a:	79bb      	ldrb	r3, [r7, #6]
 8001b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff84 	bl	8001ab4 <select_user_bank>

	cs_low();
 8001bac:	f7ff ff78 	bl	8001aa0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001bb0:	f107 010f 	add.w	r1, r7, #15
 8001bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <read_multiple_icm20948_reg+0x58>)
 8001bbc:	f004 fe13 	bl	80067e6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc8:	4906      	ldr	r1, [pc, #24]	; (8001be4 <read_multiple_icm20948_reg+0x5c>)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <read_multiple_icm20948_reg+0x58>)
 8001bcc:	f004 ff80 	bl	8006ad0 <HAL_SPI_Receive>
	cs_high();
 8001bd0:	f7ff ff5c 	bl	8001a8c <cs_high>

	return reg_val;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <read_multiple_icm20948_reg+0x5c>)
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003a0 	.word	0x200003a0
 8001be4:	2000034c 	.word	0x2000034c

08001be8 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	603a      	str	r2, [r7, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	71bb      	strb	r3, [r7, #6]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff55 	bl	8001ab4 <select_user_bank>

	cs_low();
 8001c0a:	f7ff ff49 	bl	8001aa0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8001c0e:	f107 010f 	add.w	r1, r7, #15
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	2201      	movs	r2, #1
 8001c18:	4808      	ldr	r0, [pc, #32]	; (8001c3c <write_multiple_icm20948_reg+0x54>)
 8001c1a:	f004 fde4 	bl	80067e6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8001c1e:	797b      	ldrb	r3, [r7, #5]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	6839      	ldr	r1, [r7, #0]
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <write_multiple_icm20948_reg+0x54>)
 8001c2a:	f004 fddc 	bl	80067e6 <HAL_SPI_Transmit>
	cs_high();
 8001c2e:	f7ff ff2d 	bl	8001a8c <cs_high>
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200003a0 	.word	0x200003a0

08001c40 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001c4a:	228c      	movs	r2, #140	; 0x8c
 8001c4c:	2103      	movs	r1, #3
 8001c4e:	2030      	movs	r0, #48	; 0x30
 8001c50:	f7ff ff76 	bl	8001b40 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	461a      	mov	r2, r3
 8001c58:	2104      	movs	r1, #4
 8001c5a:	2030      	movs	r0, #48	; 0x30
 8001c5c:	f7ff ff70 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001c60:	2032      	movs	r0, #50	; 0x32
 8001c62:	f001 f815 	bl	8002c90 <HAL_Delay>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001c66:	2281      	movs	r2, #129	; 0x81
 8001c68:	2105      	movs	r1, #5
 8001c6a:	2030      	movs	r0, #48	; 0x30
 8001c6c:	f7ff ff68 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001c70:	2032      	movs	r0, #50	; 0x32
 8001c72:	f001 f80d 	bl	8002c90 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001c76:	213b      	movs	r1, #59	; 0x3b
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff ff35 	bl	8001ae8 <read_single_icm20948_reg>
 8001c7e:	4603      	mov	r3, r0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460a      	mov	r2, r1
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	4613      	mov	r3, r2
 8001c96:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8001c98:	220c      	movs	r2, #12
 8001c9a:	2103      	movs	r1, #3
 8001c9c:	2030      	movs	r0, #48	; 0x30
 8001c9e:	f7ff ff4f 	bl	8001b40 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	2030      	movs	r0, #48	; 0x30
 8001caa:	f7ff ff49 	bl	8001b40 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2106      	movs	r1, #6
 8001cb4:	2030      	movs	r0, #48	; 0x30
 8001cb6:	f7ff ff43 	bl	8001b40 <write_single_icm20948_reg>
	//	Enable and single data write
	HAL_Delay(50);
 8001cba:	2032      	movs	r0, #50	; 0x32
 8001cbc:	f000 ffe8 	bl	8002c90 <HAL_Delay>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001cc0:	2281      	movs	r2, #129	; 0x81
 8001cc2:	2105      	movs	r1, #5
 8001cc4:	2030      	movs	r0, #48	; 0x30
 8001cc6:	f7ff ff3b 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001cca:	2032      	movs	r0, #50	; 0x32
 8001ccc:	f000 ffe0 	bl	8002c90 <HAL_Delay>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001ce8:	228c      	movs	r2, #140	; 0x8c
 8001cea:	2103      	movs	r1, #3
 8001cec:	2030      	movs	r0, #48	; 0x30
 8001cee:	f7ff ff27 	bl	8001b40 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	2030      	movs	r0, #48	; 0x30
 8001cfa:	f7ff ff21 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001cfe:	2032      	movs	r0, #50	; 0x32
 8001d00:	f000 ffc6 	bl	8002c90 <HAL_Delay>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8001d04:	79bb      	ldrb	r3, [r7, #6]
 8001d06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2105      	movs	r1, #5
 8001d10:	2030      	movs	r0, #48	; 0x30
 8001d12:	f7ff ff15 	bl	8001b40 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001d16:	2032      	movs	r0, #50	; 0x32
 8001d18:	f000 ffba 	bl	8002c90 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	213b      	movs	r1, #59	; 0x3b
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff ff30 	bl	8001b88 <read_multiple_icm20948_reg>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d3e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d013      	beq.n	8001d72 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d4e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001d52:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d5a:	e000      	b.n	8001d5e <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d5c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f9      	beq.n	8001d5c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d72:	687b      	ldr	r3, [r7, #4]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d84:	f5ad 7d6d 	sub.w	sp, sp, #948	; 0x3b4
 8001d88:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE BEGIN 1 */
	icm_20948_data imu_data;
	time_data time_result;

	combined_data dataToSend;
	uint32_t startTime = HAL_GetTick();
 8001d8a:	f000 ff75 	bl	8002c78 <HAL_GetTick>
 8001d8e:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d92:	f000 ff08 	bl	8002ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d96:	f000 f8eb 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d9a:	f7fe ff55 	bl	8000c48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d9e:	f7fe ffc1 	bl	8000d24 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001da2:	f000 f9ff 	bl	80021a4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001da6:	f009 fec7 	bl	800bb38 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8001daa:	f000 f96b 	bl	8002084 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 8001dae:	f7ff f851 	bl	8000e54 <icm20948_init>
  ak09916_init();
 8001db2:	f7ff f87d 	bl	8000eb0 <ak09916_init>
//	  printf("Elapsed time: %02u:%02u\n", elapsedMinutes, elapsedSeconds);
//	  printf("\r\n");

//	  time_result = read_time(startTime);

	  dataToSend.time_info = read_time(startTime); // �?�设你已�?有了read_time函数
 8001db6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001dba:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fde6 	bl	8002990 <read_time>
 8001dc4:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001dc8:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8001dcc:	f507 742b 	add.w	r4, r7, #684	; 0x2ac
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  dataToSend.sensor_data = read_all_data(); // �?�设你已�?修改了read_all_data函数如之�?所示
 8001dde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f974 	bl	80010d0 <read_all_data>
 8001de8:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001dec:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001df0:	f507 7432 	add.w	r4, r7, #712	; 0x2c8
 8001df4:	461d      	mov	r5, r3
 8001df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfe:	682b      	ldr	r3, [r5, #0]
 8001e00:	6023      	str	r3, [r4, #0]

	  char buffer[512]; // �?�设512字节足够大

	  sprintf(buffer,
 8001e02:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001e06:	65fb      	str	r3, [r7, #92]	; 0x5c
			  "x_accel = %f/y_accel = %f/z_accel = %f&"
			  "x_gyro = %f/y_gyro = %f/z_gyro =  %f&"
			  "x_mag = %f/y_mag = %f/z_mag = %f&\r\n",
			  dataToSend.time_info.unix_timestamp,

			  dataToSend.time_info.utc_time.year,
 8001e08:	f8b7 32b0 	ldrh.w	r3, [r7, #688]	; 0x2b0
	  sprintf(buffer,
 8001e0c:	65bb      	str	r3, [r7, #88]	; 0x58
			  dataToSend.time_info.utc_time.month,
 8001e0e:	f897 32b2 	ldrb.w	r3, [r7, #690]	; 0x2b2
	  sprintf(buffer,
 8001e12:	657b      	str	r3, [r7, #84]	; 0x54
			  dataToSend.time_info.utc_time.date,
 8001e14:	f897 32b3 	ldrb.w	r3, [r7, #691]	; 0x2b3
	  sprintf(buffer,
 8001e18:	653b      	str	r3, [r7, #80]	; 0x50
			  dataToSend.time_info.utc_time.hour,
 8001e1a:	f897 32b4 	ldrb.w	r3, [r7, #692]	; 0x2b4
	  sprintf(buffer,
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
			  dataToSend.time_info.utc_time.min,
 8001e20:	f897 32b5 	ldrb.w	r3, [r7, #693]	; 0x2b5
	  sprintf(buffer,
 8001e24:	64bb      	str	r3, [r7, #72]	; 0x48
			  dataToSend.time_info.utc_time.sec,
 8001e26:	f897 32b6 	ldrb.w	r3, [r7, #694]	; 0x2b6
	  sprintf(buffer,
 8001e2a:	647b      	str	r3, [r7, #68]	; 0x44

			  dataToSend.time_info.uk_time.year,
 8001e2c:	f8b7 32b8 	ldrh.w	r3, [r7, #696]	; 0x2b8
	  sprintf(buffer,
 8001e30:	643b      	str	r3, [r7, #64]	; 0x40
			  dataToSend.time_info.uk_time.month,
 8001e32:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
	  sprintf(buffer,
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
			  dataToSend.time_info.uk_time.date,
 8001e38:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
	  sprintf(buffer,
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
			  dataToSend.time_info.uk_time.hour,
 8001e3e:	f897 32bc 	ldrb.w	r3, [r7, #700]	; 0x2bc
	  sprintf(buffer,
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
			  dataToSend.time_info.uk_time.min,
 8001e44:	f897 32bd 	ldrb.w	r3, [r7, #701]	; 0x2bd
	  sprintf(buffer,
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
			  dataToSend.time_info.uk_time.sec,
 8001e4a:	f897 32be 	ldrb.w	r3, [r7, #702]	; 0x2be
	  sprintf(buffer,
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e50:	f8d7 12c0 	ldr.w	r1, [r7, #704]	; 0x2c0
 8001e54:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e56:	f8d7 62c4 	ldr.w	r6, [r7, #708]	; 0x2c4

			  dataToSend.time_info.elapsed_minutes,
			  dataToSend.time_info.elapsed_seconds,

			  dataToSend.sensor_data.x_accel,
 8001e5a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
	  sprintf(buffer,
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb72 	bl	8000548 <__aeabi_f2d>
 8001e64:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  dataToSend.sensor_data.y_accel,
 8001e68:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
	  sprintf(buffer,
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb6b 	bl	8000548 <__aeabi_f2d>
 8001e72:	e9c7 0106 	strd	r0, r1, [r7, #24]
			  dataToSend.sensor_data.z_accel,
 8001e76:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
	  sprintf(buffer,
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb64 	bl	8000548 <__aeabi_f2d>
 8001e80:	e9c7 0104 	strd	r0, r1, [r7, #16]

			  dataToSend.sensor_data.x_gyro,
 8001e84:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
	  sprintf(buffer,
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb5d 	bl	8000548 <__aeabi_f2d>
 8001e8e:	e9c7 0102 	strd	r0, r1, [r7, #8]
			  dataToSend.sensor_data.y_gyro,
 8001e92:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
	  sprintf(buffer,
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb56 	bl	8000548 <__aeabi_f2d>
 8001e9c:	e9c7 0100 	strd	r0, r1, [r7]
			  dataToSend.sensor_data.z_gyro,
 8001ea0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
	  sprintf(buffer,
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb4f 	bl	8000548 <__aeabi_f2d>
 8001eaa:	4682      	mov	sl, r0
 8001eac:	468b      	mov	fp, r1

			  dataToSend.sensor_data.x_magnet,
 8001eae:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
	  sprintf(buffer,
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fb48 	bl	8000548 <__aeabi_f2d>
 8001eb8:	4680      	mov	r8, r0
 8001eba:	4689      	mov	r9, r1
			  dataToSend.sensor_data.y_magnet,
 8001ebc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
	  sprintf(buffer,
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb41 	bl	8000548 <__aeabi_f2d>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
			  dataToSend.sensor_data.z_magnet
 8001eca:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
	  sprintf(buffer,
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fb3a 	bl	8000548 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001edc:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8001ee0:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 8001ee4:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 8001ee8:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
 8001eec:	ed97 7b00 	vldr	d7, [r7]
 8001ef0:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001ef4:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ef8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001efc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f00:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001f04:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f08:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001f0c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f10:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001f14:	960c      	str	r6, [sp, #48]	; 0x30
 8001f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f18:	910b      	str	r1, [sp, #44]	; 0x2c
 8001f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f1c:	910a      	str	r1, [sp, #40]	; 0x28
 8001f1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f20:	9109      	str	r1, [sp, #36]	; 0x24
 8001f22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f24:	9108      	str	r1, [sp, #32]
 8001f26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f28:	9107      	str	r1, [sp, #28]
 8001f2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f2c:	9106      	str	r1, [sp, #24]
 8001f2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f30:	9105      	str	r1, [sp, #20]
 8001f32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f34:	9104      	str	r1, [sp, #16]
 8001f36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f38:	9103      	str	r1, [sp, #12]
 8001f3a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f3c:	9102      	str	r1, [sp, #8]
 8001f3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f40:	9101      	str	r1, [sp, #4]
 8001f42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f44:	9100      	str	r1, [sp, #0]
 8001f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f4a:	4908      	ldr	r1, [pc, #32]	; (8001f6c <main+0x1ec>)
 8001f4c:	f00b f94c 	bl	800d1e8 <siprintf>

	  );

	  CDC_Transmit_FS(buffer, strlen(buffer));
 8001f50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe f98b 	bl	8000270 <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f009 fea5 	bl	800bcb4 <CDC_Transmit_FS>
  {
 8001f6a:	e724      	b.n	8001db6 <main+0x36>
 8001f6c:	0800f690 	.word	0x0800f690

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b096      	sub	sp, #88	; 0x58
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	2244      	movs	r2, #68	; 0x44
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f00b fa2a 	bl	800d3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	463b      	mov	r3, r7
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f96:	f003 f809 	bl	8004fac <HAL_PWREx_ControlVoltageScaling>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001fa0:	f000 f86a 	bl	8002078 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fa4:	f002 ffe4 	bl	8004f70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <SystemClock_Config+0xcc>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	4a23      	ldr	r2, [pc, #140]	; (800203c <SystemClock_Config+0xcc>)
 8001fb0:	f023 0318 	bic.w	r3, r3, #24
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001fb8:	231e      	movs	r3, #30
 8001fba:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fc6:	2340      	movs	r3, #64	; 0x40
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001fd6:	23b0      	movs	r3, #176	; 0xb0
 8001fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fe6:	230a      	movs	r3, #10
 8001fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fea:	2302      	movs	r3, #2
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 f83e 	bl	8005078 <HAL_RCC_OscConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002002:	f000 f839 	bl	8002078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002006:	230f      	movs	r3, #15
 8002008:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200a:	2303      	movs	r3, #3
 800200c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800201a:	463b      	mov	r3, r7
 800201c:	2104      	movs	r1, #4
 800201e:	4618      	mov	r0, r3
 8002020:	f003 fc8c 	bl	800593c <HAL_RCC_ClockConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800202a:	f000 f825 	bl	8002078 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800202e:	f003 fff7 	bl	8006020 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002032:	bf00      	nop
 8002034:	3758      	adds	r7, #88	; 0x58
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000

08002040 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e009      	b.n	8002066 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	60ba      	str	r2, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fe69 	bl	8001d32 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	dbf1      	blt.n	8002052 <_write+0x12>
	}
	return len;
 800206e:	687b      	ldr	r3, [r7, #4]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
}
 800207e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002080:	e7fe      	b.n	8002080 <Error_Handler+0x8>
	...

08002084 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002098:	2300      	movs	r3, #0
 800209a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <MX_RTC_Init+0xb8>)
 800209e:	4a28      	ldr	r2, [pc, #160]	; (8002140 <MX_RTC_Init+0xbc>)
 80020a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <MX_RTC_Init+0xb8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80020a8:	4b24      	ldr	r3, [pc, #144]	; (800213c <MX_RTC_Init+0xb8>)
 80020aa:	227f      	movs	r2, #127	; 0x7f
 80020ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80020ae:	4b23      	ldr	r3, [pc, #140]	; (800213c <MX_RTC_Init+0xb8>)
 80020b0:	22ff      	movs	r2, #255	; 0xff
 80020b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020b4:	4b21      	ldr	r3, [pc, #132]	; (800213c <MX_RTC_Init+0xb8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <MX_RTC_Init+0xb8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <MX_RTC_Init+0xb8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <MX_RTC_Init+0xb8>)
 80020c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020cc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <MX_RTC_Init+0xb8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <MX_RTC_Init+0xb8>)
 80020d6:	f003 ffb3 	bl	8006040 <HAL_RTC_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80020e0:	f7ff ffca 	bl	8002078 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 80020e4:	2316      	movs	r3, #22
 80020e6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x54;
 80020e8:	2354      	movs	r3, #84	; 0x54
 80020ea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x15;
 80020ec:	2315      	movs	r3, #21
 80020ee:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	2201      	movs	r2, #1
 80020fc:	4619      	mov	r1, r3
 80020fe:	480f      	ldr	r0, [pc, #60]	; (800213c <MX_RTC_Init+0xb8>)
 8002100:	f004 f82e 	bl	8006160 <HAL_RTC_SetTime>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800210a:	f7ff ffb5 	bl	8002078 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800210e:	2301      	movs	r3, #1
 8002110:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8002112:	2308      	movs	r3, #8
 8002114:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x9;
 8002116:	2309      	movs	r3, #9
 8002118:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 800211a:	2323      	movs	r3, #35	; 0x23
 800211c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800211e:	463b      	mov	r3, r7
 8002120:	2201      	movs	r2, #1
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_RTC_Init+0xb8>)
 8002126:	f004 f914 	bl	8006352 <HAL_RTC_SetDate>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_RTC_Init+0xb0>
  {
    Error_Handler();
 8002130:	f7ff ffa2 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000374 	.word	0x20000374
 8002140:	40002800 	.word	0x40002800

08002144 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b090      	sub	sp, #64	; 0x40
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	2234      	movs	r2, #52	; 0x34
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f00b f93f 	bl	800d3d8 <memset>
  if(rtcHandle->Instance==RTC)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a0f      	ldr	r2, [pc, #60]	; (800219c <HAL_RTC_MspInit+0x58>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d117      	bne.n	8002194 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002168:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800216a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4618      	mov	r0, r3
 8002176:	f003 fdcd 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002180:	f7ff ff7a 	bl	8002078 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RTC_MspInit+0x5c>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <HAL_RTC_MspInit+0x5c>)
 800218c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002194:	bf00      	nop
 8002196:	3740      	adds	r7, #64	; 0x40
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40002800 	.word	0x40002800
 80021a0:	40021000 	.word	0x40021000

080021a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <MX_SPI1_Init+0x74>)
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <MX_SPI1_Init+0x78>)
 80021ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_SPI1_Init+0x74>)
 80021b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_SPI1_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <MX_SPI1_Init+0x74>)
 80021be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_SPI1_Init+0x74>)
 80021c6:	2202      	movs	r2, #2
 80021c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <MX_SPI1_Init+0x74>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_SPI1_Init+0x74>)
 80021d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_SPI1_Init+0x74>)
 80021da:	2218      	movs	r2, #24
 80021dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MX_SPI1_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_SPI1_Init+0x74>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <MX_SPI1_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_SPI1_Init+0x74>)
 80021f2:	2207      	movs	r2, #7
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <MX_SPI1_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_SPI1_Init+0x74>)
 80021fe:	2200      	movs	r2, #0
 8002200:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_SPI1_Init+0x74>)
 8002204:	f004 fa4c 	bl	80066a0 <HAL_SPI_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800220e:	f7ff ff33 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200003a0 	.word	0x200003a0
 800221c:	40013000 	.word	0x40013000

08002220 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a25      	ldr	r2, [pc, #148]	; (80022d4 <HAL_SPI_MspInit+0xb4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d144      	bne.n	80022cc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_SPI_MspInit+0xb8>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002246:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <HAL_SPI_MspInit+0xb8>)
 8002248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800224c:	6613      	str	r3, [r2, #96]	; 0x60
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_SPI_MspInit+0xb8>)
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_SPI_MspInit+0xb8>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <HAL_SPI_MspInit+0xb8>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_SPI_MspInit+0xb8>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_SPI_MspInit+0xb8>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_SPI_MspInit+0xb8>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_SPI_MspInit+0xb8>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800228a:	2320      	movs	r3, #32
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800229a:	2305      	movs	r3, #5
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a8:	f000 fe28 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022ac:	2330      	movs	r3, #48	; 0x30
 80022ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022bc:	2305      	movs	r3, #5
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <HAL_SPI_MspInit+0xbc>)
 80022c8:	f000 fe18 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022cc:	bf00      	nop
 80022ce:	3728      	adds	r7, #40	; 0x28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40013000 	.word	0x40013000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	48000400 	.word	0x48000400

080022e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_MspInit+0x44>)
 80022e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_MspInit+0x44>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6613      	str	r3, [r2, #96]	; 0x60
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_MspInit+0x44>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_MspInit+0x44>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <HAL_MspInit+0x44>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6593      	str	r3, [r2, #88]	; 0x58
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_MspInit+0x44>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002374:	f000 fc6c 	bl	8002c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <USB_IRQHandler+0x10>)
 8002382:	f001 f99f 	bl	80036c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200010ec 	.word	0x200010ec

08002390 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return 1;
 8002394:	2301      	movs	r3, #1
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_kill>:

int _kill(int pid, int sig)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023aa:	f00b f867 	bl	800d47c <__errno>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2216      	movs	r2, #22
 80023b2:	601a      	str	r2, [r3, #0]
  return -1;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_exit>:

void _exit (int status)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffe7 	bl	80023a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023d2:	e7fe      	b.n	80023d2 <_exit+0x12>

080023d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e00a      	b.n	80023fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e6:	f3af 8000 	nop.w
 80023ea:	4601      	mov	r1, r0
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	60ba      	str	r2, [r7, #8]
 80023f2:	b2ca      	uxtb	r2, r1
 80023f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	dbf0      	blt.n	80023e6 <_read+0x12>
  }

  return len;
 8002404:	687b      	ldr	r3, [r7, #4]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <_close>:
  }
  return len;
}

int _close(int file)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002436:	605a      	str	r2, [r3, #4]
  return 0;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_isatty>:

int _isatty(int file)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002480:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <_sbrk+0x5c>)
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <_sbrk+0x60>)
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <_sbrk+0x64>)
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <_sbrk+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a8:	f00a ffe8 	bl	800d47c <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	220c      	movs	r2, #12
 80024b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e009      	b.n	80024cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <_sbrk+0x64>)
 80024c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000a000 	.word	0x2000a000
 80024d8:	00000400 	.word	0x00000400
 80024dc:	20000404 	.word	0x20000404
 80024e0:	20001750 	.word	0x20001750

080024e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <SystemInit+0x20>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <SystemInit+0x20>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <isLeapYear>:
//	NMEA_result.local_time.min	 = utc_time->min;
//	NMEA_result.local_time.sec	 = utc_time->sec;
//}

// 判断给定的年份是否为闰年
int isLeapYear(int year) {
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
    if(year % 400 == 0) return 1;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <isLeapYear+0x64>)
 8002514:	fb83 1302 	smull	r1, r3, r3, r2
 8002518:	11d9      	asrs	r1, r3, #7
 800251a:	17d3      	asrs	r3, r2, #31
 800251c:	1acb      	subs	r3, r1, r3
 800251e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <isLeapYear+0x28>
 800252c:	2301      	movs	r3, #1
 800252e:	e016      	b.n	800255e <isLeapYear+0x56>
    if(year % 100 == 0) return 0;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <isLeapYear+0x64>)
 8002534:	fb83 1302 	smull	r1, r3, r3, r2
 8002538:	1159      	asrs	r1, r3, #5
 800253a:	17d3      	asrs	r3, r2, #31
 800253c:	1acb      	subs	r3, r1, r3
 800253e:	2164      	movs	r1, #100	; 0x64
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <isLeapYear+0x46>
 800254a:	2300      	movs	r3, #0
 800254c:	e007      	b.n	800255e <isLeapYear+0x56>
    if(year % 4 == 0) return 1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <isLeapYear+0x54>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <isLeapYear+0x56>
    return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	51eb851f 	.word	0x51eb851f

08002570 <daysInMonth>:

// 返回指定月份的天数
int daysInMonth(int month, int year) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
    switch(month) {
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0b      	cmp	r3, #11
 800257e:	bf8c      	ite	hi
 8002580:	2201      	movhi	r2, #1
 8002582:	2200      	movls	r2, #0
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	2a00      	cmp	r2, #0
 8002588:	d120      	bne.n	80025cc <daysInMonth+0x5c>
 800258a:	2201      	movs	r2, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	f403 6225 	and.w	r2, r3, #2640	; 0xa50
 8002594:	2a00      	cmp	r2, #0
 8002596:	bf14      	ite	ne
 8002598:	2201      	movne	r2, #1
 800259a:	2200      	moveq	r2, #0
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	2a00      	cmp	r2, #0
 80025a0:	d112      	bne.n	80025c8 <daysInMonth+0x58>
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <daysInMonth+0x5c>
        case 2: return isLeapYear(year) ? 29 : 28;
 80025b4:	6838      	ldr	r0, [r7, #0]
 80025b6:	f7ff ffa7 	bl	8002508 <isLeapYear>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <daysInMonth+0x54>
 80025c0:	231d      	movs	r3, #29
 80025c2:	e004      	b.n	80025ce <daysInMonth+0x5e>
 80025c4:	231c      	movs	r3, #28
 80025c6:	e002      	b.n	80025ce <daysInMonth+0x5e>
        case 4: case 6: case 9: case 11: return 30;
 80025c8:	231e      	movs	r3, #30
 80025ca:	e000      	b.n	80025ce <daysInMonth+0x5e>
        default: return 31;
 80025cc:	231f      	movs	r3, #31
    }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <isInDST>:
// 判断是否应该应用夏令时调整
int isInDST(nmea_time* time) {
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
    int lastSundayOfMarch = 31 - (2 + 31 - time->year) % 7;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
 80025e8:	4b34      	ldr	r3, [pc, #208]	; (80026bc <isInDST+0xe4>)
 80025ea:	fb83 1302 	smull	r1, r3, r3, r2
 80025ee:	4413      	add	r3, r2
 80025f0:	1099      	asrs	r1, r3, #2
 80025f2:	17d3      	asrs	r3, r2, #31
 80025f4:	1ac9      	subs	r1, r1, r3
 80025f6:	460b      	mov	r3, r1
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	1a5b      	subs	r3, r3, r1
 80025fc:	1ad1      	subs	r1, r2, r3
 80025fe:	f1c1 031f 	rsb	r3, r1, #31
 8002602:	60fb      	str	r3, [r7, #12]
    int lastSundayOfOctober = 31 - (5 + 31 - time->year) % 7;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f1c3 0224 	rsb	r2, r3, #36	; 0x24
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <isInDST+0xe4>)
 800260e:	fb83 1302 	smull	r1, r3, r3, r2
 8002612:	4413      	add	r3, r2
 8002614:	1099      	asrs	r1, r3, #2
 8002616:	17d3      	asrs	r3, r2, #31
 8002618:	1ac9      	subs	r1, r1, r3
 800261a:	460b      	mov	r3, r1
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	1a5b      	subs	r3, r3, r1
 8002620:	1ad1      	subs	r1, r2, r3
 8002622:	f1c1 031f 	rsb	r3, r1, #31
 8002626:	60bb      	str	r3, [r7, #8]

    if(time->month > 3 && time->month < 10) return 1;  // DST is active between last Sunday of March and October
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	789b      	ldrb	r3, [r3, #2]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d905      	bls.n	800263c <isInDST+0x64>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	789b      	ldrb	r3, [r3, #2]
 8002634:	2b09      	cmp	r3, #9
 8002636:	d801      	bhi.n	800263c <isInDST+0x64>
 8002638:	2301      	movs	r3, #1
 800263a:	e038      	b.n	80026ae <isInDST+0xd6>
    if(time->month == 3 && time->date > lastSundayOfMarch) return 1;  // After the last Sunday of March
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	789b      	ldrb	r3, [r3, #2]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d107      	bne.n	8002654 <isInDST+0x7c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	78db      	ldrb	r3, [r3, #3]
 8002648:	461a      	mov	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4293      	cmp	r3, r2
 800264e:	da01      	bge.n	8002654 <isInDST+0x7c>
 8002650:	2301      	movs	r3, #1
 8002652:	e02c      	b.n	80026ae <isInDST+0xd6>
    if(time->month == 3 && time->date == lastSundayOfMarch && time->hour >= 1) return 1;  // On the last Sunday of March but after 1am UTC
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	789b      	ldrb	r3, [r3, #2]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d10b      	bne.n	8002674 <isInDST+0x9c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	461a      	mov	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4293      	cmp	r3, r2
 8002666:	d105      	bne.n	8002674 <isInDST+0x9c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	791b      	ldrb	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <isInDST+0x9c>
 8002670:	2301      	movs	r3, #1
 8002672:	e01c      	b.n	80026ae <isInDST+0xd6>
    if(time->month == 10 && time->date < lastSundayOfOctober) return 1;  // Before the last Sunday of October
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	789b      	ldrb	r3, [r3, #2]
 8002678:	2b0a      	cmp	r3, #10
 800267a:	d107      	bne.n	800268c <isInDST+0xb4>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	78db      	ldrb	r3, [r3, #3]
 8002680:	461a      	mov	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4293      	cmp	r3, r2
 8002686:	dd01      	ble.n	800268c <isInDST+0xb4>
 8002688:	2301      	movs	r3, #1
 800268a:	e010      	b.n	80026ae <isInDST+0xd6>
    if(time->month == 10 && time->date == lastSundayOfOctober && time->hour < 1) return 1;  // On the last Sunday of October but before 1am UTC
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	789b      	ldrb	r3, [r3, #2]
 8002690:	2b0a      	cmp	r3, #10
 8002692:	d10b      	bne.n	80026ac <isInDST+0xd4>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	78db      	ldrb	r3, [r3, #3]
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4293      	cmp	r3, r2
 800269e:	d105      	bne.n	80026ac <isInDST+0xd4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	791b      	ldrb	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <isInDST+0xd4>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <isInDST+0xd6>

    return 0;  // If none of the above conditions is met, it's not DST
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	92492493 	.word	0x92492493

080026c0 <UTC_to_UKtime>:

void UTC_to_UKtime(nmea_time* utc_time) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    int year, month, day, hour;

    year = utc_time->year;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	617b      	str	r3, [r7, #20]
    month = utc_time->month;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	789b      	ldrb	r3, [r3, #2]
 80026d2:	613b      	str	r3, [r7, #16]
    day = utc_time->date;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	78db      	ldrb	r3, [r3, #3]
 80026d8:	60fb      	str	r3, [r7, #12]
    hour = utc_time->hour;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	791b      	ldrb	r3, [r3, #4]
 80026de:	60bb      	str	r3, [r7, #8]

    if(isInDST(utc_time)) {
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff79 	bl	80025d8 <isInDST>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <UTC_to_UKtime+0x32>
        hour++; // Move one hour forward for DST
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	3301      	adds	r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
    }

    // Check for time overflow after adjustment
    if(hour >= 24) {
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b17      	cmp	r3, #23
 80026f6:	dd1a      	ble.n	800272e <UTC_to_UKtime+0x6e>
        hour -= 24;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	3b18      	subs	r3, #24
 80026fc:	60bb      	str	r3, [r7, #8]
        day++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
        if(day > daysInMonth(month, year)) {
 8002704:	6979      	ldr	r1, [r7, #20]
 8002706:	6938      	ldr	r0, [r7, #16]
 8002708:	f7ff ff32 	bl	8002570 <daysInMonth>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4293      	cmp	r3, r2
 8002712:	dd0c      	ble.n	800272e <UTC_to_UKtime+0x6e>
            day = 1;
 8002714:	2301      	movs	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
            month++;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	3301      	adds	r3, #1
 800271c:	613b      	str	r3, [r7, #16]
            if(month > 12) {
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	dd04      	ble.n	800272e <UTC_to_UKtime+0x6e>
                month = 1;
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
                year++;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3301      	adds	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
            }
        }
    }

    NMEA_result.local_time.year = year;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	b29a      	uxth	r2, r3
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <UTC_to_UKtime+0xa8>)
 8002734:	801a      	strh	r2, [r3, #0]
    NMEA_result.local_time.month = month;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <UTC_to_UKtime+0xa8>)
 800273c:	709a      	strb	r2, [r3, #2]
    NMEA_result.local_time.date = day;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <UTC_to_UKtime+0xa8>)
 8002744:	70da      	strb	r2, [r3, #3]
    NMEA_result.local_time.hour = hour;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <UTC_to_UKtime+0xa8>)
 800274c:	711a      	strb	r2, [r3, #4]
    NMEA_result.local_time.min = utc_time->min;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	795a      	ldrb	r2, [r3, #5]
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <UTC_to_UKtime+0xa8>)
 8002754:	715a      	strb	r2, [r3, #5]
    NMEA_result.local_time.sec = utc_time->sec;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	799a      	ldrb	r2, [r3, #6]
 800275a:	4b03      	ldr	r3, [pc, #12]	; (8002768 <UTC_to_UKtime+0xa8>)
 800275c:	719a      	strb	r2, [r3, #6]
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000036c 	.word	0x2000036c

0800276c <ConvertDateToSecond>:
* Input          : @date: format 'DDMMYY,HHMMSS.SSS'
* Output         : None
* Return         : Second
*******************************************************************************/
uint32_t ConvertDateToSecond(const uint8_t *date)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    static const uint16_t months[12] = {
        0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334  // 闰年的2月需要特殊处理
    };

    uint32_t seconds = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
    uint16_t temp = 1970;
 8002778:	f240 73b2 	movw	r3, #1970	; 0x7b2
 800277c:	81fb      	strh	r3, [r7, #14]
    uint16_t days = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	81bb      	strh	r3, [r7, #12]

    if(NULL == date) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <ConvertDateToSecond+0x20>
        return 0;
 8002788:	2300      	movs	r3, #0
 800278a:	e0f5      	b.n	8002978 <ConvertDateToSecond+0x20c>
    }
    //year
    temp = (date[4] - 0x30) * 10 + (date[5] - 0x30) + 2000;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3b30      	subs	r3, #48	; 0x30
 8002794:	b29b      	uxth	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	4413      	add	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3305      	adds	r3, #5
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80027b0:	81fb      	strh	r3, [r7, #14]
    if(0 == (temp % 4) && (temp % 100 != 0 || temp % 400 == 0)) {
 80027b2:	89fb      	ldrh	r3, [r7, #14]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d11b      	bne.n	80027f6 <ConvertDateToSecond+0x8a>
 80027be:	89fb      	ldrh	r3, [r7, #14]
 80027c0:	4a70      	ldr	r2, [pc, #448]	; (8002984 <ConvertDateToSecond+0x218>)
 80027c2:	fba2 1203 	umull	r1, r2, r2, r3
 80027c6:	0952      	lsrs	r2, r2, #5
 80027c8:	2164      	movs	r1, #100	; 0x64
 80027ca:	fb01 f202 	mul.w	r2, r1, r2
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10c      	bne.n	80027f0 <ConvertDateToSecond+0x84>
 80027d6:	89fb      	ldrh	r3, [r7, #14]
 80027d8:	4a6a      	ldr	r2, [pc, #424]	; (8002984 <ConvertDateToSecond+0x218>)
 80027da:	fba2 1203 	umull	r1, r2, r2, r3
 80027de:	09d2      	lsrs	r2, r2, #7
 80027e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80027e4:	fb01 f202 	mul.w	r2, r1, r2
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <ConvertDateToSecond+0x8a>
        days += 1;
 80027f0:	89bb      	ldrh	r3, [r7, #12]
 80027f2:	3301      	adds	r3, #1
 80027f4:	81bb      	strh	r3, [r7, #12]
    }
    temp -= 1;
 80027f6:	89fb      	ldrh	r3, [r7, #14]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	81fb      	strh	r3, [r7, #14]
    //UTC time start 1970
    for(; temp >= 1970; temp--) {
 80027fc:	e011      	b.n	8002822 <ConvertDateToSecond+0xb6>
        if(temp % 4) {
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <ConvertDateToSecond+0xa8>
            days += 365;
 800280a:	89bb      	ldrh	r3, [r7, #12]
 800280c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8002810:	81bb      	strh	r3, [r7, #12]
 8002812:	e003      	b.n	800281c <ConvertDateToSecond+0xb0>
        } else {
            //leap year
            days += 366;
 8002814:	89bb      	ldrh	r3, [r7, #12]
 8002816:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800281a:	81bb      	strh	r3, [r7, #12]
    for(; temp >= 1970; temp--) {
 800281c:	89fb      	ldrh	r3, [r7, #14]
 800281e:	3b01      	subs	r3, #1
 8002820:	81fb      	strh	r3, [r7, #14]
 8002822:	89fb      	ldrh	r3, [r7, #14]
 8002824:	f240 72b1 	movw	r2, #1969	; 0x7b1
 8002828:	4293      	cmp	r3, r2
 800282a:	d8e8      	bhi.n	80027fe <ConvertDateToSecond+0x92>
        }
    }
    //month
    temp = (date[2] - 0x30) * 10 + (date[3] - 0x30);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3302      	adds	r3, #2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3b30      	subs	r3, #48	; 0x30
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	0092      	lsls	r2, r2, #2
 800283a:	4413      	add	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3303      	adds	r3, #3
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4413      	add	r3, r2
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b30      	subs	r3, #48	; 0x30
 800284e:	81fb      	strh	r3, [r7, #14]
    temp -= 1;
 8002850:	89fb      	ldrh	r3, [r7, #14]
 8002852:	3b01      	subs	r3, #1
 8002854:	81fb      	strh	r3, [r7, #14]
    days += months[temp];
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <ConvertDateToSecond+0x21c>)
 800285a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800285e:	89bb      	ldrh	r3, [r7, #12]
 8002860:	4413      	add	r3, r2
 8002862:	81bb      	strh	r3, [r7, #12]
    if(temp > 1 && (date[4] - 0x30) * 10 + (date[5] - 0x30) % 4 == 0) {
 8002864:	89fb      	ldrh	r3, [r7, #14]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d91a      	bls.n	80028a0 <ConvertDateToSecond+0x134>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3304      	adds	r3, #4
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4619      	mov	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3305      	adds	r3, #5
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	3b30      	subs	r3, #48	; 0x30
 8002886:	425a      	negs	r2, r3
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	f002 0203 	and.w	r2, r2, #3
 8002890:	bf58      	it	pl
 8002892:	4253      	negpl	r3, r2
 8002894:	440b      	add	r3, r1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <ConvertDateToSecond+0x134>
        days += 1;  // 如果是闰年并且月份超过2月，加一天
 800289a:	89bb      	ldrh	r3, [r7, #12]
 800289c:	3301      	adds	r3, #1
 800289e:	81bb      	strh	r3, [r7, #12]
    }
    //day
    temp = (date[0] - 0x30) * 10 + (date[1] - 0x30);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	3b30      	subs	r3, #48	; 0x30
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	0092      	lsls	r2, r2, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3301      	adds	r3, #1
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b30      	subs	r3, #48	; 0x30
 80028c0:	81fb      	strh	r3, [r7, #14]
    days += temp - 1;
 80028c2:	89fa      	ldrh	r2, [r7, #14]
 80028c4:	89bb      	ldrh	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	81bb      	strh	r3, [r7, #12]
    //hour
    temp = (date[7] - 0x30) * 10 + (date[8] - 0x30);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3307      	adds	r3, #7
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	3b30      	subs	r3, #48	; 0x30
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4413      	add	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3308      	adds	r3, #8
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b30      	subs	r3, #48	; 0x30
 80028f0:	81fb      	strh	r3, [r7, #14]
    seconds += temp * ONEMINUTETOSENCOND * 60;
 80028f2:	89fb      	ldrh	r3, [r7, #14]
 80028f4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4413      	add	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
    //min
    temp = (date[9] - 0x30) * 10 + (date[10] - 0x30);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3309      	adds	r3, #9
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	3b30      	subs	r3, #48	; 0x30
 800290c:	b29b      	uxth	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	4413      	add	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	330a      	adds	r3, #10
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	4413      	add	r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b30      	subs	r3, #48	; 0x30
 8002926:	81fb      	strh	r3, [r7, #14]
    seconds += temp * 60;
 8002928:	89fa      	ldrh	r2, [r7, #14]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4413      	add	r3, r2
 8002938:	60bb      	str	r3, [r7, #8]
    //second
    temp = (date[11] - 0x30) * 10 + (date[12] - 0x30);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	330b      	adds	r3, #11
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	3b30      	subs	r3, #48	; 0x30
 8002942:	b29b      	uxth	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	4413      	add	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	330c      	adds	r3, #12
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	4413      	add	r3, r2
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b30      	subs	r3, #48	; 0x30
 800295c:	81fb      	strh	r3, [r7, #14]
    seconds += temp;
 800295e:	89fb      	ldrh	r3, [r7, #14]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	4413      	add	r3, r2
 8002964:	60bb      	str	r3, [r7, #8]

    seconds += days * ONEDAYTOSENCOND;
 8002966:	89bb      	ldrh	r3, [r7, #12]
 8002968:	4a08      	ldr	r2, [pc, #32]	; (800298c <ConvertDateToSecond+0x220>)
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4413      	add	r3, r2
 8002974:	60bb      	str	r3, [r7, #8]

    return seconds;
 8002976:	68bb      	ldr	r3, [r7, #8]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	51eb851f 	.word	0x51eb851f
 8002988:	0800f8c4 	.word	0x0800f8c4
 800298c:	00015180 	.word	0x00015180

08002990 <read_time>:

time_data read_time(uint32_t startTime){
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	b099      	sub	sp, #100	; 0x64
 8002994:	af04      	add	r7, sp, #16
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]

	  time_data result;
	  // 获�?� RTC 的时间和日期
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800299a:	2200      	movs	r2, #0
 800299c:	4960      	ldr	r1, [pc, #384]	; (8002b20 <read_time+0x190>)
 800299e:	4861      	ldr	r0, [pc, #388]	; (8002b24 <read_time+0x194>)
 80029a0:	f003 fc7b 	bl	800629a <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80029a4:	2200      	movs	r2, #0
 80029a6:	4960      	ldr	r1, [pc, #384]	; (8002b28 <read_time+0x198>)
 80029a8:	485e      	ldr	r0, [pc, #376]	; (8002b24 <read_time+0x194>)
 80029aa:	f003 fd59 	bl	8006460 <HAL_RTC_GetDate>

	  // 显示日期和时间
	  /* Display date Format : yy/mm/dd */
	  printf("%04d/%02d/%02d\r\n",2000 + sDate.Year, sDate.Month, sDate.Date);
 80029ae:	4b5e      	ldr	r3, [pc, #376]	; (8002b28 <read_time+0x198>)
 80029b0:	78db      	ldrb	r3, [r3, #3]
 80029b2:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <read_time+0x198>)
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b5a      	ldr	r3, [pc, #360]	; (8002b28 <read_time+0x198>)
 80029be:	789b      	ldrb	r3, [r3, #2]
 80029c0:	485a      	ldr	r0, [pc, #360]	; (8002b2c <read_time+0x19c>)
 80029c2:	f00a fba3 	bl	800d10c <iprintf>
	  /* Display time Format : hh:mm:ss */
	  printf("UTC Time is: %02d:%02d:%02d\r\n",sTime.Hours, sTime.Minutes, sTime.Seconds);
 80029c6:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <read_time+0x190>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <read_time+0x190>)
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <read_time+0x190>)
 80029d4:	789b      	ldrb	r3, [r3, #2]
 80029d6:	4856      	ldr	r0, [pc, #344]	; (8002b30 <read_time+0x1a0>)
 80029d8:	f00a fb98 	bl	800d10c <iprintf>

	  // 创建一个数组，将从 RTC 获�?�的日期和时间转�?�为 "DDMMYY,HHMMSS.SSS" 格�?
	  uint8_t rtcDate[14];
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
	          sDate.Date, sDate.Month, sDate.Year,
 80029dc:	4b52      	ldr	r3, [pc, #328]	; (8002b28 <read_time+0x198>)
 80029de:	789b      	ldrb	r3, [r3, #2]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 80029e0:	461d      	mov	r5, r3
	          sDate.Date, sDate.Month, sDate.Year,
 80029e2:	4b51      	ldr	r3, [pc, #324]	; (8002b28 <read_time+0x198>)
 80029e4:	785b      	ldrb	r3, [r3, #1]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 80029e6:	461e      	mov	r6, r3
	          sDate.Date, sDate.Month, sDate.Year,
 80029e8:	4b4f      	ldr	r3, [pc, #316]	; (8002b28 <read_time+0x198>)
 80029ea:	78db      	ldrb	r3, [r3, #3]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 80029ec:	461a      	mov	r2, r3
	          sTime.Hours, sTime.Minutes, sTime.Seconds);
 80029ee:	4b4c      	ldr	r3, [pc, #304]	; (8002b20 <read_time+0x190>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 80029f2:	4619      	mov	r1, r3
	          sTime.Hours, sTime.Minutes, sTime.Seconds);
 80029f4:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <read_time+0x190>)
 80029f6:	785b      	ldrb	r3, [r3, #1]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 80029f8:	461c      	mov	r4, r3
	          sTime.Hours, sTime.Minutes, sTime.Seconds);
 80029fa:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <read_time+0x190>)
 80029fc:	789b      	ldrb	r3, [r3, #2]
	  sprintf((char *)rtcDate, "%02d%02d%02d,%02d%02d%02d.000",
 80029fe:	f107 0014 	add.w	r0, r7, #20
 8002a02:	9303      	str	r3, [sp, #12]
 8002a04:	9402      	str	r4, [sp, #8]
 8002a06:	9101      	str	r1, [sp, #4]
 8002a08:	9200      	str	r2, [sp, #0]
 8002a0a:	4633      	mov	r3, r6
 8002a0c:	462a      	mov	r2, r5
 8002a0e:	4949      	ldr	r1, [pc, #292]	; (8002b34 <read_time+0x1a4>)
 8002a10:	f00a fbea 	bl	800d1e8 <siprintf>

	  // 将 RTC 的日期和时间转�?�为 Unix 时间戳
	  uint32_t timestamp = ConvertDateToSecond(rtcDate);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fea7 	bl	800276c <ConvertDateToSecond>
 8002a1e:	64f8      	str	r0, [r7, #76]	; 0x4c
	  printf("Unix Timestamp: %u\n", timestamp);
 8002a20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a22:	4845      	ldr	r0, [pc, #276]	; (8002b38 <read_time+0x1a8>)
 8002a24:	f00a fb72 	bl	800d10c <iprintf>

	    // 为NMEA time结构填充RTC的日期和时间
	  nmea_time testTime = {
			  .year = 2000 + sDate.Year,
 8002a28:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <read_time+0x198>)
 8002a2a:	78db      	ldrb	r3, [r3, #3]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002a32:	b29b      	uxth	r3, r3
	  nmea_time testTime = {
 8002a34:	81bb      	strh	r3, [r7, #12]
			  .month = sDate.Month,
 8002a36:	4b3c      	ldr	r3, [pc, #240]	; (8002b28 <read_time+0x198>)
 8002a38:	785b      	ldrb	r3, [r3, #1]
	  nmea_time testTime = {
 8002a3a:	73bb      	strb	r3, [r7, #14]
			  .date = sDate.Date,
 8002a3c:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <read_time+0x198>)
 8002a3e:	789b      	ldrb	r3, [r3, #2]
	  nmea_time testTime = {
 8002a40:	73fb      	strb	r3, [r7, #15]
			  .hour = sTime.Hours,
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <read_time+0x190>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
	  nmea_time testTime = {
 8002a46:	743b      	strb	r3, [r7, #16]
			  .min = sTime.Minutes,
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <read_time+0x190>)
 8002a4a:	785b      	ldrb	r3, [r3, #1]
	  nmea_time testTime = {
 8002a4c:	747b      	strb	r3, [r7, #17]
			  .sec = sTime.Seconds
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <read_time+0x190>)
 8002a50:	789b      	ldrb	r3, [r3, #2]
	  nmea_time testTime = {
 8002a52:	74bb      	strb	r3, [r7, #18]
	  };


	   // 使用UTC_to_UKtime函数转�?�时间
	  UTC_to_UKtime(&testTime);
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fe31 	bl	80026c0 <UTC_to_UKtime>

	    // 打�?�转�?��?�的英国�?令时时间
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
	           NMEA_result.local_time.year, NMEA_result.local_time.month, NMEA_result.local_time.date,
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <read_time+0x1ac>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002a62:	4618      	mov	r0, r3
	           NMEA_result.local_time.year, NMEA_result.local_time.month, NMEA_result.local_time.date,
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <read_time+0x1ac>)
 8002a66:	789b      	ldrb	r3, [r3, #2]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002a68:	461c      	mov	r4, r3
	           NMEA_result.local_time.year, NMEA_result.local_time.month, NMEA_result.local_time.date,
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <read_time+0x1ac>)
 8002a6c:	78db      	ldrb	r3, [r3, #3]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002a6e:	461d      	mov	r5, r3
	           NMEA_result.local_time.hour, NMEA_result.local_time.min, NMEA_result.local_time.sec);
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <read_time+0x1ac>)
 8002a72:	791b      	ldrb	r3, [r3, #4]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002a74:	461a      	mov	r2, r3
	           NMEA_result.local_time.hour, NMEA_result.local_time.min, NMEA_result.local_time.sec);
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <read_time+0x1ac>)
 8002a78:	795b      	ldrb	r3, [r3, #5]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002a7a:	4619      	mov	r1, r3
	           NMEA_result.local_time.hour, NMEA_result.local_time.min, NMEA_result.local_time.sec);
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <read_time+0x1ac>)
 8002a7e:	799b      	ldrb	r3, [r3, #6]
	  printf("Local UK time: %04d-%02d-%02d %02d:%02d:%02d\n",
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	9101      	str	r1, [sp, #4]
 8002a84:	9200      	str	r2, [sp, #0]
 8002a86:	462b      	mov	r3, r5
 8002a88:	4622      	mov	r2, r4
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	482c      	ldr	r0, [pc, #176]	; (8002b40 <read_time+0x1b0>)
 8002a8e:	f00a fb3d 	bl	800d10c <iprintf>

	  // 计算程序运行后的流逝时间
	  uint32_t elapsedTime = HAL_GetTick() - startTime;
 8002a92:	f000 f8f1 	bl	8002c78 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint32_t elapsedSeconds = elapsedTime / 1000;
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa0:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <read_time+0x1b4>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	099b      	lsrs	r3, r3, #6
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
	  uint32_t elapsedMinutes = elapsedSeconds / 60;
 8002aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aac:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <read_time+0x1b8>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	643b      	str	r3, [r7, #64]	; 0x40
	  elapsedSeconds %= 60;
 8002ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <read_time+0x1b8>)
 8002aba:	fba3 1302 	umull	r1, r3, r3, r2
 8002abe:	0959      	lsrs	r1, r3, #5
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a5b      	subs	r3, r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	647b      	str	r3, [r7, #68]	; 0x44

	  printf("Elapsed time: %02u:%02u\n", elapsedMinutes, elapsedSeconds);
 8002acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ace:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ad0:	481e      	ldr	r0, [pc, #120]	; (8002b4c <read_time+0x1bc>)
 8002ad2:	f00a fb1b 	bl	800d10c <iprintf>
	  printf("\r\n");
 8002ad6:	481e      	ldr	r0, [pc, #120]	; (8002b50 <read_time+0x1c0>)
 8002ad8:	f00a fb7e 	bl	800d1d8 <puts>

	  result.unix_timestamp = timestamp;
 8002adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
	  result.utc_time = testTime;  // 假设NMEA_time结构体可以直接赋值，如果不行，请分别为每个字段赋值
 8002ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ae4:	f107 020c 	add.w	r2, r7, #12
 8002ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aec:	e883 0003 	stmia.w	r3, {r0, r1}
	  result.uk_time = NMEA_result.local_time;
 8002af0:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <read_time+0x1ac>)
 8002af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002af6:	6810      	ldr	r0, [r2, #0]
 8002af8:	6851      	ldr	r1, [r2, #4]
 8002afa:	c303      	stmia	r3!, {r0, r1}
	  result.elapsed_minutes = elapsedMinutes;
 8002afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
	  result.elapsed_seconds = elapsedSeconds;
 8002b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c

	  return result;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	461d      	mov	r5, r3
 8002b08:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b10:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b14:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	3754      	adds	r7, #84	; 0x54
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b20:	20000354 	.word	0x20000354
 8002b24:	20000374 	.word	0x20000374
 8002b28:	20000368 	.word	0x20000368
 8002b2c:	0800f784 	.word	0x0800f784
 8002b30:	0800f798 	.word	0x0800f798
 8002b34:	0800f7b8 	.word	0x0800f7b8
 8002b38:	0800f7d8 	.word	0x0800f7d8
 8002b3c:	2000036c 	.word	0x2000036c
 8002b40:	0800f7ec 	.word	0x0800f7ec
 8002b44:	10624dd3 	.word	0x10624dd3
 8002b48:	88888889 	.word	0x88888889
 8002b4c:	0800f81c 	.word	0x0800f81c
 8002b50:	0800f838 	.word	0x0800f838

08002b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b58:	f7ff fcc4 	bl	80024e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b5c:	480c      	ldr	r0, [pc, #48]	; (8002b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b5e:	490d      	ldr	r1, [pc, #52]	; (8002b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b60:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <LoopForever+0xe>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b64:	e002      	b.n	8002b6c <LoopCopyDataInit>

08002b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6a:	3304      	adds	r3, #4

08002b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b70:	d3f9      	bcc.n	8002b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b72:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b74:	4c0a      	ldr	r4, [pc, #40]	; (8002ba0 <LoopForever+0x16>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b78:	e001      	b.n	8002b7e <LoopFillZerobss>

08002b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b7c:	3204      	adds	r2, #4

08002b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b80:	d3fb      	bcc.n	8002b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b82:	f00a fc81 	bl	800d488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b86:	f7ff f8fb 	bl	8001d80 <main>

08002b8a <LoopForever>:

LoopForever:
    b LoopForever
 8002b8a:	e7fe      	b.n	8002b8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b8c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b94:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8002b98:	0800fc54 	.word	0x0800fc54
  ldr r2, =_sbss
 8002b9c:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8002ba0:	20001750 	.word	0x20001750

08002ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC1_2_IRQHandler>

08002ba6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 f961 	bl	8002e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bb6:	200f      	movs	r0, #15
 8002bb8:	f000 f80e 	bl	8002bd8 <HAL_InitTick>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	71fb      	strb	r3, [r7, #7]
 8002bc6:	e001      	b.n	8002bcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bc8:	f7ff fb8a 	bl	80022e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_InitTick+0x6c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d023      	beq.n	8002c34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_InitTick+0x70>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <HAL_InitTick+0x6c>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f96d 	bl	8002ee2 <HAL_SYSTICK_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b0f      	cmp	r3, #15
 8002c12:	d809      	bhi.n	8002c28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c14:	2200      	movs	r2, #0
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	f000 f937 	bl	8002e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_InitTick+0x74>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e007      	b.n	8002c38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	e004      	b.n	8002c38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
 8002c32:	e001      	b.n	8002c38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000008 	.word	0x20000008
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_IncTick+0x20>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_IncTick+0x24>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <HAL_IncTick+0x24>)
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000008 	.word	0x20000008
 8002c74:	20000408 	.word	0x20000408

08002c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_GetTick+0x14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000408 	.word	0x20000408

08002c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff ffee 	bl	8002c78 <HAL_GetTick>
 8002c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d005      	beq.n	8002cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_Delay+0x44>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cb6:	bf00      	nop
 8002cb8:	f7ff ffde 	bl	8002c78 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d8f7      	bhi.n	8002cb8 <HAL_Delay+0x28>
  {
  }
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000008 	.word	0x20000008

08002cd8 <__NVIC_SetPriorityGrouping>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <__NVIC_SetPriorityGrouping+0x44>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0a:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60d3      	str	r3, [r2, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_GetPriorityGrouping>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <__NVIC_GetPriorityGrouping+0x18>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	f003 0307 	and.w	r3, r3, #7
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <__NVIC_EnableIRQ>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	db0b      	blt.n	8002d66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	f003 021f 	and.w	r2, r3, #31
 8002d54:	4907      	ldr	r1, [pc, #28]	; (8002d74 <__NVIC_EnableIRQ+0x38>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000e100 	.word	0xe000e100

08002d78 <__NVIC_SetPriority>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6039      	str	r1, [r7, #0]
 8002d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	db0a      	blt.n	8002da2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	490c      	ldr	r1, [pc, #48]	; (8002dc4 <__NVIC_SetPriority+0x4c>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	0112      	lsls	r2, r2, #4
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002da0:	e00a      	b.n	8002db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4908      	ldr	r1, [pc, #32]	; (8002dc8 <__NVIC_SetPriority+0x50>)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	3b04      	subs	r3, #4
 8002db0:	0112      	lsls	r2, r2, #4
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	440b      	add	r3, r1
 8002db6:	761a      	strb	r2, [r3, #24]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000e100 	.word	0xe000e100
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <NVIC_EncodePriority>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f1c3 0307 	rsb	r3, r3, #7
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	bf28      	it	cs
 8002dea:	2304      	movcs	r3, #4
 8002dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d902      	bls.n	8002dfc <NVIC_EncodePriority+0x30>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3b03      	subs	r3, #3
 8002dfa:	e000      	b.n	8002dfe <NVIC_EncodePriority+0x32>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	401a      	ands	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e14:	f04f 31ff 	mov.w	r1, #4294967295
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1e:	43d9      	mvns	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	4313      	orrs	r3, r2
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3724      	adds	r7, #36	; 0x24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <SysTick_Config>:
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e44:	d301      	bcc.n	8002e4a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00f      	b.n	8002e6a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <SysTick_Config+0x40>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e52:	210f      	movs	r1, #15
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f7ff ff8e 	bl	8002d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SysTick_Config+0x40>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <SysTick_Config+0x40>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000e010 	.word	0xe000e010

08002e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff29 	bl	8002cd8 <__NVIC_SetPriorityGrouping>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea0:	f7ff ff3e 	bl	8002d20 <__NVIC_GetPriorityGrouping>
 8002ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f7ff ff8e 	bl	8002dcc <NVIC_EncodePriority>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff5d 	bl	8002d78 <__NVIC_SetPriority>
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	4603      	mov	r3, r0
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff31 	bl	8002d3c <__NVIC_EnableIRQ>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ffa2 	bl	8002e34 <SysTick_Config>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0a:	e14e      	b.n	80031aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8140 	beq.w	80031a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d005      	beq.n	8002f3c <HAL_GPIO_Init+0x40>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d130      	bne.n	8002f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f72:	2201      	movs	r2, #1
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0201 	and.w	r2, r3, #1
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d017      	beq.n	8002fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d123      	bne.n	800302e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	6939      	ldr	r1, [r7, #16]
 800302a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 809a 	beq.w	80031a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003070:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <HAL_GPIO_Init+0x2cc>)
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <HAL_GPIO_Init+0x2cc>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6613      	str	r3, [r2, #96]	; 0x60
 800307c:	4b52      	ldr	r3, [pc, #328]	; (80031c8 <HAL_GPIO_Init+0x2cc>)
 800307e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003088:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_GPIO_Init+0x2d0>)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	220f      	movs	r2, #15
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030b2:	d013      	beq.n	80030dc <HAL_GPIO_Init+0x1e0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a46      	ldr	r2, [pc, #280]	; (80031d0 <HAL_GPIO_Init+0x2d4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00d      	beq.n	80030d8 <HAL_GPIO_Init+0x1dc>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a45      	ldr	r2, [pc, #276]	; (80031d4 <HAL_GPIO_Init+0x2d8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <HAL_GPIO_Init+0x1d8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a44      	ldr	r2, [pc, #272]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_GPIO_Init+0x1d4>
 80030cc:	2303      	movs	r3, #3
 80030ce:	e006      	b.n	80030de <HAL_GPIO_Init+0x1e2>
 80030d0:	2307      	movs	r3, #7
 80030d2:	e004      	b.n	80030de <HAL_GPIO_Init+0x1e2>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e002      	b.n	80030de <HAL_GPIO_Init+0x1e2>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_GPIO_Init+0x1e2>
 80030dc:	2300      	movs	r3, #0
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	f002 0203 	and.w	r2, r2, #3
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	4093      	lsls	r3, r2
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030ee:	4937      	ldr	r1, [pc, #220]	; (80031cc <HAL_GPIO_Init+0x2d0>)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030fc:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_GPIO_Init+0x2e0>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	43db      	mvns	r3, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003120:	4a2e      	ldr	r2, [pc, #184]	; (80031dc <HAL_GPIO_Init+0x2e0>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_GPIO_Init+0x2e0>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43db      	mvns	r3, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800314a:	4a24      	ldr	r2, [pc, #144]	; (80031dc <HAL_GPIO_Init+0x2e0>)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003150:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_GPIO_Init+0x2e0>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_GPIO_Init+0x2e0>)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <HAL_GPIO_Init+0x2e0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800319e:	4a0f      	ldr	r2, [pc, #60]	; (80031dc <HAL_GPIO_Init+0x2e0>)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3301      	adds	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f47f aea9 	bne.w	8002f0c <HAL_GPIO_Init+0x10>
  }
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40010000 	.word	0x40010000
 80031d0:	48000400 	.word	0x48000400
 80031d4:	48000800 	.word	0x48000800
 80031d8:	48000c00 	.word	0x48000c00
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f0:	787b      	ldrb	r3, [r7, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e08d      	b.n	800333e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd fdb4 	bl	8000da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e006      	b.n	8003298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d108      	bne.n	80032b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	e007      	b.n	80032c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69d9      	ldr	r1, [r3, #28]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1a      	ldr	r2, [r3, #32]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b20      	cmp	r3, #32
 800335a:	d138      	bne.n	80033ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003366:	2302      	movs	r3, #2
 8003368:	e032      	b.n	80033d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2224      	movs	r2, #36	; 0x24
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003398:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d139      	bne.n	8003466 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e033      	b.n	8003468 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	; 0x24
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800342e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0201 	orr.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003466:	2302      	movs	r3, #2
  }
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	b08b      	sub	sp, #44	; 0x2c
 8003478:	af06      	add	r7, sp, #24
 800347a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0f8      	b.n	8003678 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f008 fd64 	bl	800bf68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2203      	movs	r2, #3
 80034a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 f84d 	bl	800754c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	687e      	ldr	r6, [r7, #4]
 80034ba:	466d      	mov	r5, sp
 80034bc:	f106 0410 	add.w	r4, r6, #16
 80034c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	602b      	str	r3, [r5, #0]
 80034c8:	1d33      	adds	r3, r6, #4
 80034ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034cc:	6838      	ldr	r0, [r7, #0]
 80034ce:	f004 f815 	bl	80074fc <USB_CoreInit>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0c9      	b.n	8003678 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f004 f849 	bl	8007582 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	e040      	b.n	8003578 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	3301      	adds	r3, #1
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	440b      	add	r3, r1
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	3303      	adds	r3, #3
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	3338      	adds	r3, #56	; 0x38
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	333c      	adds	r3, #60	; 0x3c
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	3340      	adds	r3, #64	; 0x40
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	3301      	adds	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d3b9      	bcc.n	80034f6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e044      	b.n	8003612 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	f203 1369 	addw	r3, r3, #361	; 0x169
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	440b      	add	r3, r1
 80035c2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	3301      	adds	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3b5      	bcc.n	8003588 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	687e      	ldr	r6, [r7, #4]
 8003624:	466d      	mov	r5, sp
 8003626:	f106 0410 	add.w	r4, r6, #16
 800362a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800362c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	602b      	str	r3, [r5, #0]
 8003632:	1d33      	adds	r3, r6, #4
 8003634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003636:	6838      	ldr	r0, [r7, #0]
 8003638:	f003 ffb0 	bl	800759c <USB_DevInit>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e014      	b.n	8003678 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d102      	bne.n	800366c <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f001 fc58 	bl	8004f1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f006 fa41 	bl	8009af8 <USB_DevDisconnect>

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003680 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_PCD_Start+0x16>
 8003692:	2302      	movs	r3, #2
 8003694:	e012      	b.n	80036bc <HAL_PCD_Start+0x3c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 ff3b 	bl	800751e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f006 fa0c 	bl	8009aca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f006 fa26 	bl	8009b22 <USB_ReadInterrupts>
 80036d6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fb13 	bl	8003d0e <PCD_EP_ISR_Handler>

    return;
 80036e8:	e110      	b.n	800390c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003706:	b292      	uxth	r2, r2
 8003708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f008 fce2 	bl	800c0d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003712:	2100      	movs	r1, #0
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f8fc 	bl	8003912 <HAL_PCD_SetAddress>

    return;
 800371a:	e0f7      	b.n	800390c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800372e:	b29a      	uxth	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003738:	b292      	uxth	r2, r2
 800373a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800373e:	e0e5      	b.n	800390c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375c:	b292      	uxth	r2, r2
 800375e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003762:	e0d3      	b.n	800390c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d034      	beq.n	80037d8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0204 	bic.w	r2, r2, #4
 8003780:	b292      	uxth	r2, r2
 8003782:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0208 	bic.w	r2, r2, #8
 8003798:	b292      	uxth	r2, r2
 800379a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d107      	bne.n	80037b8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037b0:	2100      	movs	r1, #0
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f008 ff40 	bl	800c638 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f008 fcc5 	bl	800c148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037d0:	b292      	uxth	r2, r2
 80037d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80037d6:	e099      	b.n	800390c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d027      	beq.n	8003832 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0208 	orr.w	r2, r2, #8
 80037f4:	b292      	uxth	r2, r2
 80037f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800380c:	b292      	uxth	r2, r2
 800380e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0204 	orr.w	r2, r2, #4
 8003824:	b292      	uxth	r2, r2
 8003826:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f008 fc72 	bl	800c114 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003830:	e06c      	b.n	800390c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b00      	cmp	r3, #0
 800383a:	d040      	beq.n	80038be <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384e:	b292      	uxth	r2, r2
 8003850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d12b      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0204 	orr.w	r2, r2, #4
 8003870:	b292      	uxth	r2, r2
 8003872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800387e:	b29a      	uxth	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0208 	orr.w	r2, r2, #8
 8003888:	b292      	uxth	r2, r2
 800388a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800389e:	b29b      	uxth	r3, r3
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038ac:	2101      	movs	r1, #1
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f008 fec2 	bl	800c638 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80038b4:	e02a      	b.n	800390c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f008 fc2c 	bl	800c114 <HAL_PCD_SuspendCallback>
    return;
 80038bc:	e026      	b.n	800390c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00f      	beq.n	80038e8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038da:	b292      	uxth	r2, r2
 80038dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f008 fbea 	bl	800c0ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038e6:	e011      	b.n	800390c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003904:	b292      	uxth	r2, r2
 8003906:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800390a:	bf00      	nop
  }
}
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_PCD_SetAddress+0x1a>
 8003928:	2302      	movs	r3, #2
 800392a:	e013      	b.n	8003954 <HAL_PCD_SetAddress+0x42>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f006 f8ac 	bl	8009aa2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	70fb      	strb	r3, [r7, #3]
 800396e:	460b      	mov	r3, r1
 8003970:	803b      	strh	r3, [r7, #0]
 8003972:	4613      	mov	r3, r2
 8003974:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800397a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800397e:	2b00      	cmp	r3, #0
 8003980:	da0e      	bge.n	80039a0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	705a      	strb	r2, [r3, #1]
 800399e:	e00e      	b.n	80039be <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	f003 0207 	and.w	r2, r3, #7
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4413      	add	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039ca:	883a      	ldrh	r2, [r7, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	78ba      	ldrb	r2, [r7, #2]
 80039d4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039d6:	78bb      	ldrb	r3, [r7, #2]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_PCD_EP_Open+0x94>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e00e      	b.n	8003a0e <HAL_PCD_EP_Open+0xb2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68f9      	ldr	r1, [r7, #12]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 fdee 	bl	80075e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da0e      	bge.n	8003a48 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	705a      	strb	r2, [r3, #1]
 8003a46:	e00e      	b.n	8003a66 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	f003 0207 	and.w	r2, r3, #7
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_PCD_EP_Close+0x6a>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e00e      	b.n	8003a9e <HAL_PCD_EP_Close+0x88>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68f9      	ldr	r1, [r7, #12]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 f96a 	bl	8007d68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab6:	7afb      	ldrb	r3, [r7, #11]
 8003ab8:	f003 0207 	and.w	r2, r3, #7
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6979      	ldr	r1, [r7, #20]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f004 fb22 	bl	8008142 <USB_EPStartXfer>

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 0207 	and.w	r2, r3, #7
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	460b      	mov	r3, r1
 8003b46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b48:	7afb      	ldrb	r3, [r7, #11]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2201      	movs	r2, #1
 8003b82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b84:	7afb      	ldrb	r3, [r7, #11]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6979      	ldr	r1, [r7, #20]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f004 fad3 	bl	8008142 <USB_EPStartXfer>

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 0207 	and.w	r2, r3, #7
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d901      	bls.n	8003bc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e04c      	b.n	8003c5e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da0e      	bge.n	8003bea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	705a      	strb	r2, [r3, #1]
 8003be8:	e00c      	b.n	8003c04 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_PCD_EP_SetStall+0x7e>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e01c      	b.n	8003c5e <HAL_PCD_EP_SetStall+0xb8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f005 fe36 	bl	80098a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f005 ff77 	bl	8009b42 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	f003 020f 	and.w	r2, r3, #15
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d901      	bls.n	8003c84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e040      	b.n	8003d06 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da0e      	bge.n	8003caa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	705a      	strb	r2, [r3, #1]
 8003ca8:	e00e      	b.n	8003cc8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	f003 0207 	and.w	r2, r3, #7
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_PCD_EP_ClrStall+0x82>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e00e      	b.n	8003d06 <HAL_PCD_EP_ClrStall+0xa0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f005 fe25 	bl	8009946 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b096      	sub	sp, #88	; 0x58
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d16:	e3b1      	b.n	800447c <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003d32:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 8173 	bne.w	8004022 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d150      	bne.n	8003dea <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	81fb      	strh	r3, [r7, #14]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	89fb      	ldrh	r3, [r7, #14]
 8003d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3328      	adds	r3, #40	; 0x28
 8003d70:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	441a      	add	r2, r3
 8003da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003da8:	2100      	movs	r1, #0
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f008 f96b 	bl	800c086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 835f 	beq.w	800447c <PCD_EP_ISR_Handler+0x76e>
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f040 835a 	bne.w	800447c <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	b292      	uxth	r2, r2
 8003ddc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003de8:	e348      	b.n	800447c <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003df0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d032      	beq.n	8003e6e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e3c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e40:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f005 fecb 	bl	8009bde <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e54:	4013      	ands	r3, r2
 8003e56:	823b      	strh	r3, [r7, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	8a3a      	ldrh	r2, [r7, #16]
 8003e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e62:	b292      	uxth	r2, r2
 8003e64:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f008 f8e0 	bl	800c02c <HAL_PCD_SetupStageCallback>
 8003e6c:	e306      	b.n	800447c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e6e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f280 8302 	bge.w	800447c <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e84:	4013      	ands	r3, r2
 8003e86:	83fb      	strh	r3, [r7, #30]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	8bfa      	ldrh	r2, [r7, #30]
 8003e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e92:	b292      	uxth	r2, r2
 8003e94:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ebc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d019      	beq.n	8003efa <PCD_EP_ISR_Handler+0x1ec>
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d015      	beq.n	8003efa <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed4:	6959      	ldr	r1, [r3, #20]
 8003ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003edc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f005 fe7d 	bl	8009bde <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	441a      	add	r2, r3
 8003eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f008 f8ab 	bl	800c050 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003f04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f040 82b5 	bne.w	800447c <PCD_EP_ISR_Handler+0x76e>
 8003f12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f1e:	f000 82ad 	beq.w	800447c <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	4413      	add	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	801a      	strh	r2, [r3, #0]
 8003f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b3e      	cmp	r3, #62	; 0x3e
 8003f58:	d91d      	bls.n	8003f96 <PCD_EP_ISR_Handler+0x288>
 8003f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	647b      	str	r3, [r7, #68]	; 0x44
 8003f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <PCD_EP_ISR_Handler+0x266>
 8003f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f70:	3b01      	subs	r3, #1
 8003f72:	647b      	str	r3, [r7, #68]	; 0x44
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	029b      	lsls	r3, r3, #10
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	4313      	orrs	r3, r2
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	801a      	strh	r2, [r3, #0]
 8003f94:	e026      	b.n	8003fe4 <PCD_EP_ISR_Handler+0x2d6>
 8003f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <PCD_EP_ISR_Handler+0x2a6>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	801a      	strh	r2, [r3, #0]
 8003fb2:	e017      	b.n	8003fe4 <PCD_EP_ISR_Handler+0x2d6>
 8003fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	647b      	str	r3, [r7, #68]	; 0x44
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <PCD_EP_ISR_Handler+0x2c0>
 8003fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fca:	3301      	adds	r3, #1
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	029b      	lsls	r3, r3, #10
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff4:	827b      	strh	r3, [r7, #18]
 8003ff6:	8a7b      	ldrh	r3, [r7, #18]
 8003ff8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ffc:	827b      	strh	r3, [r7, #18]
 8003ffe:	8a7b      	ldrh	r3, [r7, #18]
 8004000:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004004:	827b      	strh	r3, [r7, #18]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	8a7b      	ldrh	r3, [r7, #18]
 800400c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401c:	b29b      	uxth	r3, r3
 800401e:	8013      	strh	r3, [r2, #0]
 8004020:	e22c      	b.n	800447c <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004036:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800403a:	2b00      	cmp	r3, #0
 800403c:	f280 80f6 	bge.w	800422c <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29a      	uxth	r2, r3
 8004052:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004056:	4013      	ands	r3, r2
 8004058:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800406e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004072:	b292      	uxth	r2, r2
 8004074:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004076:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800408c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408e:	7b1b      	ldrb	r3, [r3, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d123      	bne.n	80040dc <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409c:	b29b      	uxth	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80040bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 808e 	beq.w	80041e2 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040cc:	6959      	ldr	r1, [r3, #20]
 80040ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d0:	88da      	ldrh	r2, [r3, #6]
 80040d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80040d6:	f005 fd82 	bl	8009bde <USB_ReadPMA>
 80040da:	e082      	b.n	80041e2 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040de:	78db      	ldrb	r3, [r3, #3]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d10a      	bne.n	80040fa <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040e8:	461a      	mov	r2, r3
 80040ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f9d3 	bl	8004498 <HAL_PCD_EP_DB_Receive>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80040f8:	e073      	b.n	80041e2 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800412a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800413a:	b29b      	uxth	r3, r3
 800413c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d022      	beq.n	800419e <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004160:	b29b      	uxth	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	4413      	add	r3, r2
 8004172:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800417c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004180:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02c      	beq.n	80041e2 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418e:	6959      	ldr	r1, [r3, #20]
 8004190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004192:	891a      	ldrh	r2, [r3, #8]
 8004194:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004198:	f005 fd21 	bl	8009bde <USB_ReadPMA>
 800419c:	e021      	b.n	80041e2 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80041c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d4:	6959      	ldr	r1, [r3, #20]
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	895a      	ldrh	r2, [r3, #10]
 80041da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041de:	f005 fcfe 	bl	8009bde <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041ea:	441a      	add	r2, r3
 80041ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041f8:	441a      	add	r2, r3
 80041fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <PCD_EP_ISR_Handler+0x504>
 8004206:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800420a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	429a      	cmp	r2, r3
 8004210:	d206      	bcs.n	8004220 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f007 ff19 	bl	800c050 <HAL_PCD_DataOutStageCallback>
 800421e:	e005      	b.n	800422c <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004226:	4618      	mov	r0, r3
 8004228:	f003 ff8b 	bl	8008142 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800422c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8121 	beq.w	800447c <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800423a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800427e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004286:	b29b      	uxth	r3, r3
 8004288:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800428a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428c:	78db      	ldrb	r3, [r3, #3]
 800428e:	2b01      	cmp	r3, #1
 8004290:	f040 80a2 	bne.w	80043d8 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8004294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004296:	2200      	movs	r2, #0
 8004298:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800429a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429c:	7b1b      	ldrb	r3, [r3, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8093 	beq.w	80043ca <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d046      	beq.n	800433e <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d126      	bne.n	8004306 <PCD_EP_ISR_Handler+0x5f8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	4413      	add	r3, r2
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
 80042d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	00da      	lsls	r2, r3, #3
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	4413      	add	r3, r2
 80042da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	801a      	strh	r2, [r3, #0]
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042fe:	b29a      	uxth	r2, r3
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	e061      	b.n	80043ca <PCD_EP_ISR_Handler+0x6bc>
 8004306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d15d      	bne.n	80043ca <PCD_EP_ISR_Handler+0x6bc>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	4413      	add	r3, r2
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	00da      	lsls	r2, r3, #3
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	4413      	add	r3, r2
 8004330:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2200      	movs	r2, #0
 800433a:	801a      	strh	r2, [r3, #0]
 800433c:	e045      	b.n	80043ca <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004346:	785b      	ldrb	r3, [r3, #1]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d126      	bne.n	800439a <PCD_EP_ISR_Handler+0x68c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004360:	4413      	add	r3, r2
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
 8004364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	00da      	lsls	r2, r3, #3
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436c:	4413      	add	r3, r2
 800436e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004372:	633b      	str	r3, [r7, #48]	; 0x30
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800437e:	b29a      	uxth	r2, r3
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004392:	b29a      	uxth	r2, r3
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	e017      	b.n	80043ca <PCD_EP_ISR_Handler+0x6bc>
 800439a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439c:	785b      	ldrb	r3, [r3, #1]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d113      	bne.n	80043ca <PCD_EP_ISR_Handler+0x6bc>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b0:	4413      	add	r3, r2
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	00da      	lsls	r2, r3, #3
 80043ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043bc:	4413      	add	r3, r2
 80043be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	2200      	movs	r2, #0
 80043c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f007 fe58 	bl	800c086 <HAL_PCD_DataInStageCallback>
 80043d6:	e051      	b.n	800447c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d144      	bne.n	800446e <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	4413      	add	r3, r2
 80043fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004408:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800440c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004414:	429a      	cmp	r2, r3
 8004416:	d907      	bls.n	8004428 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8004418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004420:	1ad2      	subs	r2, r2, r3
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	619a      	str	r2, [r3, #24]
 8004426:	e002      	b.n	800442e <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8004428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442a:	2200      	movs	r2, #0
 800442c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800442e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f007 fe22 	bl	800c086 <HAL_PCD_DataInStageCallback>
 8004442:	e01b      	b.n	800447c <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800444c:	441a      	add	r2, r3
 800444e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004450:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800445a:	441a      	add	r2, r3
 800445c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004466:	4618      	mov	r0, r3
 8004468:	f003 fe6b 	bl	8008142 <USB_EPStartXfer>
 800446c:	e006      	b.n	800447c <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800446e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004472:	461a      	mov	r2, r3
 8004474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f917 	bl	80046aa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004484:	b29b      	uxth	r3, r3
 8004486:	b21b      	sxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	f6ff ac45 	blt.w	8003d18 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3758      	adds	r7, #88	; 0x58
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d07c      	beq.n	80045aa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	4413      	add	r3, r2
 80044ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	8b7b      	ldrh	r3, [r7, #26]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d306      	bcc.n	80044ee <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	8b7b      	ldrh	r3, [r7, #26]
 80044e6:	1ad2      	subs	r2, r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	619a      	str	r2, [r3, #24]
 80044ec:	e002      	b.n	80044f4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2200      	movs	r2, #0
 80044f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d123      	bne.n	8004544 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	833b      	strh	r3, [r7, #24]
 8004518:	8b3b      	ldrh	r3, [r7, #24]
 800451a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800451e:	833b      	strh	r3, [r7, #24]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	8b3b      	ldrh	r3, [r7, #24]
 8004530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004540:	b29b      	uxth	r3, r3
 8004542:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01f      	beq.n	800458e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	82fb      	strh	r3, [r7, #22]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	8afb      	ldrh	r3, [r7, #22]
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800458e:	8b7b      	ldrh	r3, [r7, #26]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8085 	beq.w	80046a0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6959      	ldr	r1, [r3, #20]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	891a      	ldrh	r2, [r3, #8]
 80045a2:	8b7b      	ldrh	r3, [r7, #26]
 80045a4:	f005 fb1b 	bl	8009bde <USB_ReadPMA>
 80045a8:	e07a      	b.n	80046a0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	4413      	add	r3, r2
 80045c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	8b7b      	ldrh	r3, [r7, #26]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d306      	bcc.n	80045e8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	8b7b      	ldrh	r3, [r7, #26]
 80045e0:	1ad2      	subs	r2, r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	619a      	str	r2, [r3, #24]
 80045e6:	e002      	b.n	80045ee <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d123      	bne.n	800463e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800460c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004610:	83fb      	strh	r3, [r7, #30]
 8004612:	8bfb      	ldrh	r3, [r7, #30]
 8004614:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004618:	83fb      	strh	r3, [r7, #30]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	8bfb      	ldrh	r3, [r7, #30]
 800462a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11f      	bne.n	8004688 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	83bb      	strh	r3, [r7, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	8bbb      	ldrh	r3, [r7, #28]
 8004674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004680:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004684:	b29b      	uxth	r3, r3
 8004686:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004688:	8b7b      	ldrh	r3, [r7, #26]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6959      	ldr	r1, [r3, #20]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	895a      	ldrh	r2, [r3, #10]
 800469a:	8b7b      	ldrh	r3, [r7, #26]
 800469c:	f005 fa9f 	bl	8009bde <USB_ReadPMA>
    }
  }

  return count;
 80046a0:	8b7b      	ldrh	r3, [r7, #26]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b0a4      	sub	sp, #144	; 0x90
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 81db 	beq.w	8004a7a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	4413      	add	r3, r2
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	4413      	add	r3, r2
 80046de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d907      	bls.n	8004708 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	619a      	str	r2, [r3, #24]
 8004706:	e002      	b.n	800470e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2200      	movs	r2, #0
 800470c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 80b9 	bne.w	800488a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d126      	bne.n	800476e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472e:	b29b      	uxth	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	4413      	add	r3, r2
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	00da      	lsls	r2, r3, #3
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	4413      	add	r3, r2
 8004742:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004752:	b29a      	uxth	r2, r3
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004766:	b29a      	uxth	r2, r3
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	e01a      	b.n	80047a4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d116      	bne.n	80047a4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004784:	b29b      	uxth	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	4413      	add	r3, r2
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	00da      	lsls	r2, r3, #3
 8004794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004796:	4413      	add	r3, r2
 8004798:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	2200      	movs	r2, #0
 80047a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d126      	bne.n	8004800 <HAL_PCD_EP_DB_Transmit+0x156>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	00da      	lsls	r2, r3, #3
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	e017      	b.n	8004830 <HAL_PCD_EP_DB_Transmit+0x186>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d113      	bne.n	8004830 <HAL_PCD_EP_DB_Transmit+0x186>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004810:	b29b      	uxth	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	4413      	add	r3, r2
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	00da      	lsls	r2, r3, #3
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	4413      	add	r3, r2
 8004824:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	2200      	movs	r2, #0
 800482e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f007 fc25 	bl	800c086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 82fa 	beq.w	8004e3c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	82fb      	strh	r3, [r7, #22]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	8afb      	ldrh	r3, [r7, #22]
 8004874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	b29b      	uxth	r3, r3
 8004886:	8013      	strh	r3, [r2, #0]
 8004888:	e2d8      	b.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d021      	beq.n	80048d8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80048c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048de:	2b01      	cmp	r3, #1
 80048e0:	f040 82ac 	bne.w	8004e3c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80048ec:	441a      	add	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80048fa:	441a      	add	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6a1a      	ldr	r2, [r3, #32]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	429a      	cmp	r2, r3
 800490a:	d30b      	bcc.n	8004924 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6a1a      	ldr	r2, [r3, #32]
 8004918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800491c:	1ad2      	subs	r2, r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	621a      	str	r2, [r3, #32]
 8004922:	e017      	b.n	8004954 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d108      	bne.n	800493e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800492c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800493c:	e00a      	b.n	8004954 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d165      	bne.n	8004a28 <HAL_PCD_EP_DB_Transmit+0x37e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496a:	b29b      	uxth	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004970:	4413      	add	r3, r2
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	00da      	lsls	r2, r3, #3
 800497a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497c:	4413      	add	r3, r2
 800497e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004982:	63bb      	str	r3, [r7, #56]	; 0x38
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800498e:	b29a      	uxth	r2, r3
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	801a      	strh	r2, [r3, #0]
 8004994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004998:	2b3e      	cmp	r3, #62	; 0x3e
 800499a:	d91d      	bls.n	80049d8 <HAL_PCD_EP_DB_Transmit+0x32e>
 800499c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <HAL_PCD_EP_DB_Transmit+0x30c>
 80049b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b2:	3b01      	subs	r3, #1
 80049b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049be:	b29b      	uxth	r3, r3
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	4313      	orrs	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	e044      	b.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80049d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <HAL_PCD_EP_DB_Transmit+0x34c>
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	e035      	b.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80049f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80049fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_PCD_EP_DB_Transmit+0x366>
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	029b      	lsls	r3, r3, #10
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	e01c      	b.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d118      	bne.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	647b      	str	r3, [r7, #68]	; 0x44
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a44:	4413      	add	r3, r2
 8004a46:	647b      	str	r3, [r7, #68]	; 0x44
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	00da      	lsls	r2, r3, #3
 8004a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a50:	4413      	add	r3, r2
 8004a52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a56:	643b      	str	r3, [r7, #64]	; 0x40
 8004a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a60:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6959      	ldr	r1, [r3, #20]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	891a      	ldrh	r2, [r3, #8]
 8004a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f005 f871 	bl	8009b5a <USB_WritePMA>
 8004a78:	e1e0      	b.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	4413      	add	r3, r2
 8004a94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d307      	bcc.n	8004abe <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ab6:	1ad2      	subs	r2, r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	619a      	str	r2, [r3, #24]
 8004abc:	e002      	b.n	8004ac4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f040 80c0 	bne.w	8004c4e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	785b      	ldrb	r3, [r3, #1]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d126      	bne.n	8004b24 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004aea:	4413      	add	r3, r2
 8004aec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	00da      	lsls	r2, r3, #3
 8004af4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004af6:	4413      	add	r3, r2
 8004af8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b20:	801a      	strh	r2, [r3, #0]
 8004b22:	e01a      	b.n	8004b5a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d116      	bne.n	8004b5a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	667b      	str	r3, [r7, #100]	; 0x64
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b40:	4413      	add	r3, r2
 8004b42:	667b      	str	r3, [r7, #100]	; 0x64
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	00da      	lsls	r2, r3, #3
 8004b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b52:	663b      	str	r3, [r7, #96]	; 0x60
 8004b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b56:	2200      	movs	r2, #0
 8004b58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	677b      	str	r3, [r7, #116]	; 0x74
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d12b      	bne.n	8004bc0 <HAL_PCD_EP_DB_Transmit+0x516>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	4413      	add	r3, r2
 8004b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	00da      	lsls	r2, r3, #3
 8004b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b88:	4413      	add	r3, r2
 8004b8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ba4:	801a      	strh	r2, [r3, #0]
 8004ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	e017      	b.n	8004bf0 <HAL_PCD_EP_DB_Transmit+0x546>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d113      	bne.n	8004bf0 <HAL_PCD_EP_DB_Transmit+0x546>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd6:	4413      	add	r3, r2
 8004bd8:	677b      	str	r3, [r7, #116]	; 0x74
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	00da      	lsls	r2, r3, #3
 8004be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be2:	4413      	add	r3, r2
 8004be4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004be8:	673b      	str	r3, [r7, #112]	; 0x70
 8004bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bec:	2200      	movs	r2, #0
 8004bee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f007 fa45 	bl	800c086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 811a 	bne.w	8004e3c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c22:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	8013      	strh	r3, [r2, #0]
 8004c4c:	e0f6      	b.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d121      	bne.n	8004c9c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	441a      	add	r2, r3
 8004c84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	f040 80ca 	bne.w	8004e3c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004cbe:	441a      	add	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6a1a      	ldr	r2, [r3, #32]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d30b      	bcc.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6a1a      	ldr	r2, [r3, #32]
 8004cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ce0:	1ad2      	subs	r2, r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	621a      	str	r2, [r3, #32]
 8004ce6:	e017      	b.n	8004d18 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d108      	bne.n	8004d02 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004cf0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d00:	e00a      	b.n	8004d18 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d165      	bne.n	8004df2 <HAL_PCD_EP_DB_Transmit+0x748>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3a:	4413      	add	r3, r2
 8004d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	00da      	lsls	r2, r3, #3
 8004d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d46:	4413      	add	r3, r2
 8004d48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d5c:	801a      	strh	r2, [r3, #0]
 8004d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d62:	2b3e      	cmp	r3, #62	; 0x3e
 8004d64:	d91d      	bls.n	8004da2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	029b      	lsls	r3, r3, #10
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	e041      	b.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x716>
 8004daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	e032      	b.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_PCD_EP_DB_Transmit+0x730>
 8004dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	029b      	lsls	r3, r3, #10
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	4313      	orrs	r3, r2
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	e019      	b.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	785b      	ldrb	r3, [r3, #1]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d115      	bne.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e08:	4413      	add	r3, r2
 8004e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	00da      	lsls	r2, r3, #3
 8004e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e14:	4413      	add	r3, r2
 8004e16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e24:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6959      	ldr	r1, [r3, #20]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	895a      	ldrh	r2, [r3, #10]
 8004e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f004 fe8f 	bl	8009b5a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e56:	82bb      	strh	r3, [r7, #20]
 8004e58:	8abb      	ldrh	r3, [r7, #20]
 8004e5a:	f083 0310 	eor.w	r3, r3, #16
 8004e5e:	82bb      	strh	r3, [r7, #20]
 8004e60:	8abb      	ldrh	r3, [r7, #20]
 8004e62:	f083 0320 	eor.w	r3, r3, #32
 8004e66:	82bb      	strh	r3, [r7, #20]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	8abb      	ldrh	r3, [r7, #20]
 8004e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3790      	adds	r7, #144	; 0x90
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b087      	sub	sp, #28
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	817b      	strh	r3, [r7, #10]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ea8:	897b      	ldrh	r3, [r7, #10]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00b      	beq.n	8004ecc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eb4:	897b      	ldrh	r3, [r7, #10]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e009      	b.n	8004ee0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ecc:	897a      	ldrh	r2, [r7, #10]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ee0:	893b      	ldrh	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d107      	bne.n	8004ef6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	80da      	strh	r2, [r3, #6]
 8004ef4:	e00b      	b.n	8004f0e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f043 0302 	orr.w	r3, r3, #2
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7e:	6013      	str	r3, [r2, #0]
}
 8004f80:	bf00      	nop
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40007000 	.word	0x40007000

08004f90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40007000 	.word	0x40007000

08004fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fba:	d130      	bne.n	800501e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fbc:	4b23      	ldr	r3, [pc, #140]	; (800504c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc8:	d038      	beq.n	800503c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fda:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2232      	movs	r2, #50	; 0x32
 8004fe0:	fb02 f303 	mul.w	r3, r2, r3
 8004fe4:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	0c9b      	lsrs	r3, r3, #18
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ff0:	e002      	b.n	8004ff8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005004:	d102      	bne.n	800500c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f2      	bne.n	8004ff2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005018:	d110      	bne.n	800503c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e00f      	b.n	800503e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502a:	d007      	beq.n	800503c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005034:	4a05      	ldr	r2, [pc, #20]	; (800504c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800503a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40007000 	.word	0x40007000
 8005050:	20000000 	.word	0x20000000
 8005054:	431bde83 	.word	0x431bde83

08005058 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_PWREx_EnableVddUSB+0x1c>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005066:	6053      	str	r3, [r2, #4]
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40007000 	.word	0x40007000

08005078 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	; 0x28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f000 bc4f 	b.w	800592a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800508c:	4b97      	ldr	r3, [pc, #604]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 030c 	and.w	r3, r3, #12
 8005094:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005096:	4b95      	ldr	r3, [pc, #596]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80e6 	beq.w	800527a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <HAL_RCC_OscConfig+0x4c>
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	2b0c      	cmp	r3, #12
 80050b8:	f040 808d 	bne.w	80051d6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	f040 8089 	bne.w	80051d6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050c4:	4b89      	ldr	r3, [pc, #548]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <HAL_RCC_OscConfig+0x66>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	f000 bc26 	b.w	800592a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e2:	4b82      	ldr	r3, [pc, #520]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_RCC_OscConfig+0x80>
 80050ee:	4b7f      	ldr	r3, [pc, #508]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f6:	e005      	b.n	8005104 <HAL_RCC_OscConfig+0x8c>
 80050f8:	4b7c      	ldr	r3, [pc, #496]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80050fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005104:	4293      	cmp	r3, r2
 8005106:	d224      	bcs.n	8005152 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fda1 	bl	8005c54 <RCC_SetFlashLatencyFromMSIRange>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	f000 bc06 	b.w	800592a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800511e:	4b73      	ldr	r3, [pc, #460]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a72      	ldr	r2, [pc, #456]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005124:	f043 0308 	orr.w	r3, r3, #8
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4b70      	ldr	r3, [pc, #448]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	496d      	ldr	r1, [pc, #436]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800513c:	4b6b      	ldr	r3, [pc, #428]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	4968      	ldr	r1, [pc, #416]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800514c:	4313      	orrs	r3, r2
 800514e:	604b      	str	r3, [r1, #4]
 8005150:	e025      	b.n	800519e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005152:	4b66      	ldr	r3, [pc, #408]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a65      	ldr	r2, [pc, #404]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005158:	f043 0308 	orr.w	r3, r3, #8
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	4b63      	ldr	r3, [pc, #396]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	4960      	ldr	r1, [pc, #384]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800516c:	4313      	orrs	r3, r2
 800516e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005170:	4b5e      	ldr	r3, [pc, #376]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	495b      	ldr	r1, [pc, #364]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005180:	4313      	orrs	r3, r2
 8005182:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fd60 	bl	8005c54 <RCC_SetFlashLatencyFromMSIRange>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e3c5      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800519e:	f000 fccd 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 80051a2:	4602      	mov	r2, r0
 80051a4:	4b51      	ldr	r3, [pc, #324]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	091b      	lsrs	r3, r3, #4
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	4950      	ldr	r1, [pc, #320]	; (80052f0 <HAL_RCC_OscConfig+0x278>)
 80051b0:	5ccb      	ldrb	r3, [r1, r3]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	4a4e      	ldr	r2, [pc, #312]	; (80052f4 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051be:	4b4e      	ldr	r3, [pc, #312]	; (80052f8 <HAL_RCC_OscConfig+0x280>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fd fd08 	bl	8002bd8 <HAL_InitTick>
 80051c8:	4603      	mov	r3, r0
 80051ca:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d052      	beq.n	8005278 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	e3a9      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d032      	beq.n	8005244 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051de:	4b43      	ldr	r3, [pc, #268]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a42      	ldr	r2, [pc, #264]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051ea:	f7fd fd45 	bl	8002c78 <HAL_GetTick>
 80051ee:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051f2:	f7fd fd41 	bl	8002c78 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e392      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005204:	4b39      	ldr	r3, [pc, #228]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005210:	4b36      	ldr	r3, [pc, #216]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a35      	ldr	r2, [pc, #212]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005216:	f043 0308 	orr.w	r3, r3, #8
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	4b33      	ldr	r3, [pc, #204]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	4930      	ldr	r1, [pc, #192]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800522e:	4b2f      	ldr	r3, [pc, #188]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	492b      	ldr	r1, [pc, #172]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800523e:	4313      	orrs	r3, r2
 8005240:	604b      	str	r3, [r1, #4]
 8005242:	e01a      	b.n	800527a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005244:	4b29      	ldr	r3, [pc, #164]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a28      	ldr	r2, [pc, #160]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005250:	f7fd fd12 	bl	8002c78 <HAL_GetTick>
 8005254:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005258:	f7fd fd0e 	bl	8002c78 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e35f      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800526a:	4b20      	ldr	r3, [pc, #128]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x1e0>
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005278:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d073      	beq.n	800536e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d005      	beq.n	8005298 <HAL_RCC_OscConfig+0x220>
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d10e      	bne.n	80052b0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b03      	cmp	r3, #3
 8005296:	d10b      	bne.n	80052b0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	4b14      	ldr	r3, [pc, #80]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d063      	beq.n	800536c <HAL_RCC_OscConfig+0x2f4>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d15f      	bne.n	800536c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e33c      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b8:	d106      	bne.n	80052c8 <HAL_RCC_OscConfig+0x250>
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a0b      	ldr	r2, [pc, #44]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	e025      	b.n	8005314 <HAL_RCC_OscConfig+0x29c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d0:	d114      	bne.n	80052fc <HAL_RCC_OscConfig+0x284>
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a05      	ldr	r2, [pc, #20]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80052d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a02      	ldr	r2, [pc, #8]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e013      	b.n	8005314 <HAL_RCC_OscConfig+0x29c>
 80052ec:	40021000 	.word	0x40021000
 80052f0:	0800f884 	.word	0x0800f884
 80052f4:	20000000 	.word	0x20000000
 80052f8:	20000004 	.word	0x20000004
 80052fc:	4b8f      	ldr	r3, [pc, #572]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a8e      	ldr	r2, [pc, #568]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	4b8c      	ldr	r3, [pc, #560]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a8b      	ldr	r2, [pc, #556]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 800530e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d013      	beq.n	8005344 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531c:	f7fd fcac 	bl	8002c78 <HAL_GetTick>
 8005320:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005324:	f7fd fca8 	bl	8002c78 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	; 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e2f9      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005336:	4b81      	ldr	r3, [pc, #516]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0x2ac>
 8005342:	e014      	b.n	800536e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fd fc98 	bl	8002c78 <HAL_GetTick>
 8005348:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800534c:	f7fd fc94 	bl	8002c78 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e2e5      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800535e:	4b77      	ldr	r3, [pc, #476]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x2d4>
 800536a:	e000      	b.n	800536e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d060      	beq.n	800543c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d005      	beq.n	800538c <HAL_RCC_OscConfig+0x314>
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	2b0c      	cmp	r3, #12
 8005384:	d119      	bne.n	80053ba <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d116      	bne.n	80053ba <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800538c:	4b6b      	ldr	r3, [pc, #428]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_OscConfig+0x32c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e2c2      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a4:	4b65      	ldr	r3, [pc, #404]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	4962      	ldr	r1, [pc, #392]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053b8:	e040      	b.n	800543c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d023      	beq.n	800540a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c2:	4b5e      	ldr	r3, [pc, #376]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a5d      	ldr	r2, [pc, #372]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ce:	f7fd fc53 	bl	8002c78 <HAL_GetTick>
 80053d2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d6:	f7fd fc4f 	bl	8002c78 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e2a0      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053e8:	4b54      	ldr	r3, [pc, #336]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f4:	4b51      	ldr	r3, [pc, #324]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	494e      	ldr	r1, [pc, #312]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]
 8005408:	e018      	b.n	800543c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540a:	4b4c      	ldr	r3, [pc, #304]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a4b      	ldr	r2, [pc, #300]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005416:	f7fd fc2f 	bl	8002c78 <HAL_GetTick>
 800541a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541e:	f7fd fc2b 	bl	8002c78 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e27c      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005430:	4b42      	ldr	r3, [pc, #264]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8082 	beq.w	800554e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d05f      	beq.n	8005512 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8005452:	4b3a      	ldr	r3, [pc, #232]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005458:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	429a      	cmp	r2, r3
 8005466:	d037      	beq.n	80054d8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d006      	beq.n	8005480 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e254      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01b      	beq.n	80054c2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800548a:	4b2c      	ldr	r3, [pc, #176]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 800548c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005490:	4a2a      	ldr	r2, [pc, #168]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800549a:	f7fd fbed 	bl	8002c78 <HAL_GetTick>
 800549e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a2:	f7fd fbe9 	bl	8002c78 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b11      	cmp	r3, #17
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e23a      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054b4:	4b21      	ldr	r3, [pc, #132]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1ef      	bne.n	80054a2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80054c2:	4b1e      	ldr	r3, [pc, #120]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c8:	f023 0210 	bic.w	r2, r3, #16
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	491a      	ldr	r1, [pc, #104]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054d8:	4b18      	ldr	r3, [pc, #96]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054de:	4a17      	ldr	r2, [pc, #92]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fd fbc6 	bl	8002c78 <HAL_GetTick>
 80054ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f0:	f7fd fbc2 	bl	8002c78 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b11      	cmp	r3, #17
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e213      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005502:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0ef      	beq.n	80054f0 <HAL_RCC_OscConfig+0x478>
 8005510:	e01d      	b.n	800554e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005518:	4a08      	ldr	r2, [pc, #32]	; (800553c <HAL_RCC_OscConfig+0x4c4>)
 800551a:	f023 0301 	bic.w	r3, r3, #1
 800551e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fd fba9 	bl	8002c78 <HAL_GetTick>
 8005526:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005528:	e00a      	b.n	8005540 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552a:	f7fd fba5 	bl	8002c78 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b11      	cmp	r3, #17
 8005536:	d903      	bls.n	8005540 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e1f6      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
 800553c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005540:	4ba9      	ldr	r3, [pc, #676]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1ed      	bne.n	800552a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80bd 	beq.w	80056d6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005562:	4ba1      	ldr	r3, [pc, #644]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10e      	bne.n	800558c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556e:	4b9e      	ldr	r3, [pc, #632]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005572:	4a9d      	ldr	r2, [pc, #628]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005578:	6593      	str	r3, [r2, #88]	; 0x58
 800557a:	4b9b      	ldr	r3, [pc, #620]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 800557c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800558c:	4b97      	ldr	r3, [pc, #604]	; (80057ec <HAL_RCC_OscConfig+0x774>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d118      	bne.n	80055ca <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005598:	4b94      	ldr	r3, [pc, #592]	; (80057ec <HAL_RCC_OscConfig+0x774>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a93      	ldr	r2, [pc, #588]	; (80057ec <HAL_RCC_OscConfig+0x774>)
 800559e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055a4:	f7fd fb68 	bl	8002c78 <HAL_GetTick>
 80055a8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ac:	f7fd fb64 	bl	8002c78 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e1b5      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055be:	4b8b      	ldr	r3, [pc, #556]	; (80057ec <HAL_RCC_OscConfig+0x774>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d02c      	beq.n	8005630 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80055d6:	4b84      	ldr	r3, [pc, #528]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	497f      	ldr	r1, [pc, #508]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d010      	beq.n	800561e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80055fc:	4b7a      	ldr	r3, [pc, #488]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	4a79      	ldr	r2, [pc, #484]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005604:	f043 0304 	orr.w	r3, r3, #4
 8005608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800560c:	4b76      	ldr	r3, [pc, #472]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	4a75      	ldr	r2, [pc, #468]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800561c:	e018      	b.n	8005650 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800561e:	4b72      	ldr	r3, [pc, #456]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	4a70      	ldr	r2, [pc, #448]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800562e:	e00f      	b.n	8005650 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005630:	4b6d      	ldr	r3, [pc, #436]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	4a6c      	ldr	r2, [pc, #432]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005640:	4b69      	ldr	r3, [pc, #420]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005646:	4a68      	ldr	r2, [pc, #416]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005648:	f023 0304 	bic.w	r3, r3, #4
 800564c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d016      	beq.n	8005686 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005658:	f7fd fb0e 	bl	8002c78 <HAL_GetTick>
 800565c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800565e:	e00a      	b.n	8005676 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005660:	f7fd fb0a 	bl	8002c78 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	; 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e159      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005676:	4b5c      	ldr	r3, [pc, #368]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0ed      	beq.n	8005660 <HAL_RCC_OscConfig+0x5e8>
 8005684:	e01d      	b.n	80056c2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005686:	f7fd faf7 	bl	8002c78 <HAL_GetTick>
 800568a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800568c:	e00a      	b.n	80056a4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568e:	f7fd faf3 	bl	8002c78 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f241 3288 	movw	r2, #5000	; 0x1388
 800569c:	4293      	cmp	r3, r2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e142      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056a4:	4b50      	ldr	r3, [pc, #320]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ed      	bne.n	800568e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80056b2:	4b4d      	ldr	r3, [pc, #308]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b8:	4a4b      	ldr	r2, [pc, #300]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80056ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d105      	bne.n	80056d6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ca:	4b47      	ldr	r3, [pc, #284]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	4a46      	ldr	r2, [pc, #280]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80056d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d03c      	beq.n	800575c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01c      	beq.n	8005724 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056ea:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80056ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056f0:	4a3d      	ldr	r2, [pc, #244]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fa:	f7fd fabd 	bl	8002c78 <HAL_GetTick>
 80056fe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005702:	f7fd fab9 	bl	8002c78 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e10a      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005714:	4b34      	ldr	r3, [pc, #208]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0ef      	beq.n	8005702 <HAL_RCC_OscConfig+0x68a>
 8005722:	e01b      	b.n	800575c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005724:	4b30      	ldr	r3, [pc, #192]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800572a:	4a2f      	ldr	r2, [pc, #188]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fd faa0 	bl	8002c78 <HAL_GetTick>
 8005738:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800573c:	f7fd fa9c 	bl	8002c78 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e0ed      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800574e:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ef      	bne.n	800573c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 80e1 	beq.w	8005928 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	2b02      	cmp	r3, #2
 800576c:	f040 80b5 	bne.w	80058da <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f003 0203 	and.w	r2, r3, #3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	429a      	cmp	r2, r3
 8005782:	d124      	bne.n	80057ce <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	3b01      	subs	r3, #1
 8005790:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d11b      	bne.n	80057ce <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d113      	bne.n	80057ce <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	3b01      	subs	r3, #1
 80057b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d109      	bne.n	80057ce <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	3b01      	subs	r3, #1
 80057c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d05f      	beq.n	800588e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	2b0c      	cmp	r3, #12
 80057d2:	d05a      	beq.n	800588a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a03      	ldr	r2, [pc, #12]	; (80057e8 <HAL_RCC_OscConfig+0x770>)
 80057da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057e0:	f7fd fa4a 	bl	8002c78 <HAL_GetTick>
 80057e4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e6:	e00c      	b.n	8005802 <HAL_RCC_OscConfig+0x78a>
 80057e8:	40021000 	.word	0x40021000
 80057ec:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fd fa42 	bl	8002c78 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e093      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005802:	4b4c      	ldr	r3, [pc, #304]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800580e:	4b49      	ldr	r3, [pc, #292]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	4b49      	ldr	r3, [pc, #292]	; (8005938 <HAL_RCC_OscConfig+0x8c0>)
 8005814:	4013      	ands	r3, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800581e:	3a01      	subs	r2, #1
 8005820:	0112      	lsls	r2, r2, #4
 8005822:	4311      	orrs	r1, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005828:	0212      	lsls	r2, r2, #8
 800582a:	4311      	orrs	r1, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005830:	0852      	lsrs	r2, r2, #1
 8005832:	3a01      	subs	r2, #1
 8005834:	0552      	lsls	r2, r2, #21
 8005836:	4311      	orrs	r1, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800583c:	0852      	lsrs	r2, r2, #1
 800583e:	3a01      	subs	r2, #1
 8005840:	0652      	lsls	r2, r2, #25
 8005842:	430a      	orrs	r2, r1
 8005844:	493b      	ldr	r1, [pc, #236]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 8005846:	4313      	orrs	r3, r2
 8005848:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800584a:	4b3a      	ldr	r3, [pc, #232]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a39      	ldr	r2, [pc, #228]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 8005850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005854:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005856:	4b37      	ldr	r3, [pc, #220]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	4a36      	ldr	r2, [pc, #216]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 800585c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005860:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005862:	f7fd fa09 	bl	8002c78 <HAL_GetTick>
 8005866:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586a:	f7fd fa05 	bl	8002c78 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e056      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587c:	4b2d      	ldr	r3, [pc, #180]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005888:	e04e      	b.n	8005928 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e04d      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800588e:	4b29      	ldr	r3, [pc, #164]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d146      	bne.n	8005928 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800589a:	4b26      	ldr	r3, [pc, #152]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a25      	ldr	r2, [pc, #148]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 80058a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058a4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058a6:	4b23      	ldr	r3, [pc, #140]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4a22      	ldr	r2, [pc, #136]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 80058ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058b0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058b2:	f7fd f9e1 	bl	8002c78 <HAL_GetTick>
 80058b6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ba:	f7fd f9dd 	bl	8002c78 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e02e      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058cc:	4b19      	ldr	r3, [pc, #100]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x842>
 80058d8:	e026      	b.n	8005928 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2b0c      	cmp	r3, #12
 80058de:	d021      	beq.n	8005924 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e0:	4b14      	ldr	r3, [pc, #80]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a13      	ldr	r2, [pc, #76]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 80058e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ec:	f7fd f9c4 	bl	8002c78 <HAL_GetTick>
 80058f0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f4:	f7fd f9c0 	bl	8002c78 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e011      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4a07      	ldr	r2, [pc, #28]	; (8005934 <HAL_RCC_OscConfig+0x8bc>)
 8005918:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800591c:	f023 0303 	bic.w	r3, r3, #3
 8005920:	60d3      	str	r3, [r2, #12]
 8005922:	e001      	b.n	8005928 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3728      	adds	r7, #40	; 0x28
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
 8005938:	f99f808c 	.word	0xf99f808c

0800593c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0e7      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005950:	4b75      	ldr	r3, [pc, #468]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d910      	bls.n	8005980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b72      	ldr	r3, [pc, #456]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f023 0207 	bic.w	r2, r3, #7
 8005966:	4970      	ldr	r1, [pc, #448]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596e:	4b6e      	ldr	r3, [pc, #440]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d001      	beq.n	8005980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0cf      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d010      	beq.n	80059ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005998:	429a      	cmp	r2, r3
 800599a:	d908      	bls.n	80059ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800599c:	4b63      	ldr	r3, [pc, #396]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	4960      	ldr	r1, [pc, #384]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d04c      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d107      	bne.n	80059d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c2:	4b5a      	ldr	r3, [pc, #360]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d121      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0a6      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d107      	bne.n	80059ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059da:	4b54      	ldr	r3, [pc, #336]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d115      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e09a      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d107      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059f2:	4b4e      	ldr	r3, [pc, #312]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e08e      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a02:	4b4a      	ldr	r3, [pc, #296]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e086      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a12:	4b46      	ldr	r3, [pc, #280]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f023 0203 	bic.w	r2, r3, #3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4943      	ldr	r1, [pc, #268]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a24:	f7fd f928 	bl	8002c78 <HAL_GetTick>
 8005a28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2a:	e00a      	b.n	8005a42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2c:	f7fd f924 	bl	8002c78 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e06e      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	4b3a      	ldr	r3, [pc, #232]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 020c 	and.w	r2, r3, #12
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d1eb      	bne.n	8005a2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d010      	beq.n	8005a82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	4b31      	ldr	r3, [pc, #196]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d208      	bcs.n	8005a82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a70:	4b2e      	ldr	r3, [pc, #184]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	492b      	ldr	r1, [pc, #172]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a82:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d210      	bcs.n	8005ab2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a90:	4b25      	ldr	r3, [pc, #148]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f023 0207 	bic.w	r2, r3, #7
 8005a98:	4923      	ldr	r1, [pc, #140]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa0:	4b21      	ldr	r3, [pc, #132]	; (8005b28 <HAL_RCC_ClockConfig+0x1ec>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e036      	b.n	8005b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	4918      	ldr	r1, [pc, #96]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	4910      	ldr	r1, [pc, #64]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005af0:	f000 f824 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_RCC_ClockConfig+0x1f0>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	490b      	ldr	r1, [pc, #44]	; (8005b30 <HAL_RCC_ClockConfig+0x1f4>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0c:	4a09      	ldr	r2, [pc, #36]	; (8005b34 <HAL_RCC_ClockConfig+0x1f8>)
 8005b0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_RCC_ClockConfig+0x1fc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fd f85f 	bl	8002bd8 <HAL_InitTick>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40022000 	.word	0x40022000
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	0800f884 	.word	0x0800f884
 8005b34:	20000000 	.word	0x20000000
 8005b38:	20000004 	.word	0x20000004

08005b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	2300      	movs	r3, #0
 8005b48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4a:	4b3e      	ldr	r3, [pc, #248]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b54:	4b3b      	ldr	r3, [pc, #236]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x34>
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d121      	bne.n	8005bae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d11e      	bne.n	8005bae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b70:	4b34      	ldr	r3, [pc, #208]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b7c:	4b31      	ldr	r3, [pc, #196]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	e005      	b.n	8005b98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b8c:	4b2d      	ldr	r3, [pc, #180]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b98:	4a2b      	ldr	r2, [pc, #172]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bac:	e00a      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d102      	bne.n	8005bba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	e004      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bc0:	4b23      	ldr	r3, [pc, #140]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d134      	bne.n	8005c34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bca:	4b1e      	ldr	r3, [pc, #120]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d003      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0xac>
 8005be0:	e005      	b.n	8005bee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005be2:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8005be4:	617b      	str	r3, [r7, #20]
      break;
 8005be6:	e005      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005be8:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8005bea:	617b      	str	r3, [r7, #20]
      break;
 8005bec:	e002      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	617b      	str	r3, [r7, #20]
      break;
 8005bf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bf4:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	3301      	adds	r3, #1
 8005c00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c02:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	fb03 f202 	mul.w	r2, r3, r2
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	0e5b      	lsrs	r3, r3, #25
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	3301      	adds	r3, #1
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c34:	69bb      	ldr	r3, [r7, #24]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3724      	adds	r7, #36	; 0x24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	0800f894 	.word	0x0800f894
 8005c4c:	00f42400 	.word	0x00f42400
 8005c50:	007a1200 	.word	0x007a1200

08005c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c60:	4b2a      	ldr	r3, [pc, #168]	; (8005d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c6c:	f7ff f990 	bl	8004f90 <HAL_PWREx_GetVoltageRange>
 8005c70:	6178      	str	r0, [r7, #20]
 8005c72:	e014      	b.n	8005c9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c74:	4b25      	ldr	r3, [pc, #148]	; (8005d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c78:	4a24      	ldr	r2, [pc, #144]	; (8005d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c80:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c8c:	f7ff f980 	bl	8004f90 <HAL_PWREx_GetVoltageRange>
 8005c90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c96:	4a1d      	ldr	r2, [pc, #116]	; (8005d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ca4:	d10b      	bne.n	8005cbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d919      	bls.n	8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2ba0      	cmp	r3, #160	; 0xa0
 8005cb0:	d902      	bls.n	8005cb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	e013      	b.n	8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cb8:	2301      	movs	r3, #1
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	e010      	b.n	8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b80      	cmp	r3, #128	; 0x80
 8005cc2:	d902      	bls.n	8005cca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	613b      	str	r3, [r7, #16]
 8005cc8:	e00a      	b.n	8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b80      	cmp	r3, #128	; 0x80
 8005cce:	d102      	bne.n	8005cd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	e004      	b.n	8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b70      	cmp	r3, #112	; 0x70
 8005cda:	d101      	bne.n	8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cdc:	2301      	movs	r3, #1
 8005cde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f023 0207 	bic.w	r2, r3, #7
 8005ce8:	4909      	ldr	r1, [pc, #36]	; (8005d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005cf0:	4b07      	ldr	r3, [pc, #28]	; (8005d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d001      	beq.n	8005d02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	40022000 	.word	0x40022000

08005d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d20:	2300      	movs	r3, #0
 8005d22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 809e 	beq.w	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d32:	2300      	movs	r3, #0
 8005d34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d36:	4b46      	ldr	r3, [pc, #280]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005d46:	2300      	movs	r3, #0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d4c:	4b40      	ldr	r3, [pc, #256]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d50:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d56:	6593      	str	r3, [r2, #88]	; 0x58
 8005d58:	4b3d      	ldr	r3, [pc, #244]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d60:	60bb      	str	r3, [r7, #8]
 8005d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d64:	2301      	movs	r3, #1
 8005d66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d68:	4b3a      	ldr	r3, [pc, #232]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a39      	ldr	r2, [pc, #228]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d74:	f7fc ff80 	bl	8002c78 <HAL_GetTick>
 8005d78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d7a:	e009      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7c:	f7fc ff7c 	bl	8002c78 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d902      	bls.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	74fb      	strb	r3, [r7, #19]
        break;
 8005d8e:	e005      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d90:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0ef      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005d9c:	7cfb      	ldrb	r3, [r7, #19]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d15a      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005da2:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01e      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d019      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dbe:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dca:	4b21      	ldr	r3, [pc, #132]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dda:	4b1d      	ldr	r3, [pc, #116]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dea:	4a19      	ldr	r2, [pc, #100]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d016      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfc:	f7fc ff3c 	bl	8002c78 <HAL_GetTick>
 8005e00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e02:	e00b      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f7fc ff38 	bl	8002c78 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d902      	bls.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	74fb      	strb	r3, [r7, #19]
            break;
 8005e1a:	e006      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1c:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0ec      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005e2a:	7cfb      	ldrb	r3, [r7, #19]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e30:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	4904      	ldr	r1, [pc, #16]	; (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e46:	e009      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e48:	7cfb      	ldrb	r3, [r7, #19]
 8005e4a:	74bb      	strb	r3, [r7, #18]
 8005e4c:	e006      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005e4e:	bf00      	nop
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e5c:	7c7b      	ldrb	r3, [r7, #17]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d105      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4b6e      	ldr	r3, [pc, #440]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	4a6d      	ldr	r2, [pc, #436]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e7a:	4b68      	ldr	r3, [pc, #416]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e80:	f023 0203 	bic.w	r2, r3, #3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4964      	ldr	r1, [pc, #400]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e9c:	4b5f      	ldr	r3, [pc, #380]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea2:	f023 020c 	bic.w	r2, r3, #12
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	495c      	ldr	r1, [pc, #368]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ebe:	4b57      	ldr	r3, [pc, #348]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4953      	ldr	r1, [pc, #332]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ee0:	4b4e      	ldr	r3, [pc, #312]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	494b      	ldr	r1, [pc, #300]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f02:	4b46      	ldr	r3, [pc, #280]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	4942      	ldr	r1, [pc, #264]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f24:	4b3d      	ldr	r3, [pc, #244]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	493a      	ldr	r1, [pc, #232]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f46:	4b35      	ldr	r3, [pc, #212]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	4931      	ldr	r1, [pc, #196]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f68:	4b2c      	ldr	r3, [pc, #176]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	4929      	ldr	r1, [pc, #164]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	4920      	ldr	r1, [pc, #128]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d015      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fac:	4b1b      	ldr	r3, [pc, #108]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	4918      	ldr	r1, [pc, #96]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fca:	d105      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fcc:	4b13      	ldr	r3, [pc, #76]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a12      	ldr	r2, [pc, #72]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	490a      	ldr	r1, [pc, #40]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006002:	d105      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a04      	ldr	r2, [pc, #16]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800600a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800600e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006010:	7cbb      	ldrb	r3, [r7, #18]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000

08006020 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a04      	ldr	r2, [pc, #16]	; (800603c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800602a:	f043 0304 	orr.w	r3, r3, #4
 800602e:	6013      	str	r3, [r2, #0]
}
 8006030:	bf00      	nop
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40021000 	.word	0x40021000

08006040 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d07f      	beq.n	8006152 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fc f86c 	bl	8002144 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006072:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800607c:	4b37      	ldr	r3, [pc, #220]	; (800615c <HAL_RTC_Init+0x11c>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b10      	cmp	r3, #16
 8006086:	d05b      	beq.n	8006140 <HAL_RTC_Init+0x100>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	22ca      	movs	r2, #202	; 0xca
 800608e:	625a      	str	r2, [r3, #36]	; 0x24
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2253      	movs	r2, #83	; 0x53
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fa53 	bl	8006544 <RTC_EnterInitMode>
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d127      	bne.n	80060f8 <HAL_RTC_Init+0xb8>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80060b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ba:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6999      	ldr	r1, [r3, #24]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6912      	ldr	r2, [r2, #16]
 80060e2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6919      	ldr	r1, [r3, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	041a      	lsls	r2, r3, #16
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fa59 	bl	80065b0 <RTC_ExitInitMode>
 80060fe:	4603      	mov	r3, r0
 8006100:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d116      	bne.n	8006136 <HAL_RTC_Init+0xf6>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006116:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6999      	ldr	r1, [r3, #24]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	22ff      	movs	r2, #255	; 0xff
 800613c:	625a      	str	r2, [r3, #36]	; 0x24
 800613e:	e001      	b.n	8006144 <HAL_RTC_Init+0x104>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <HAL_RTC_Init+0x112>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
  }

  return status;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40002800 	.word	0x40002800

08006160 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_RTC_SetTime+0x1a>
 8006176:	2302      	movs	r3, #2
 8006178:	e08b      	b.n	8006292 <HAL_RTC_SetTime+0x132>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2202      	movs	r2, #2
 8006186:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	22ca      	movs	r2, #202	; 0xca
 8006190:	625a      	str	r2, [r3, #36]	; 0x24
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2253      	movs	r2, #83	; 0x53
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f9d2 	bl	8006544 <RTC_EnterInitMode>
 80061a0:	4603      	mov	r3, r0
 80061a2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80061a4:	7cfb      	ldrb	r3, [r7, #19]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d163      	bne.n	8006272 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d126      	bne.n	80061fe <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fa2f 	bl	800662c <RTC_ByteToBcd2>
 80061ce:	4603      	mov	r3, r0
 80061d0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	785b      	ldrb	r3, [r3, #1]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fa28 	bl	800662c <RTC_ByteToBcd2>
 80061dc:	4603      	mov	r3, r0
 80061de:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80061e0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	789b      	ldrb	r3, [r3, #2]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fa20 	bl	800662c <RTC_ByteToBcd2>
 80061ec:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80061ee:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	78db      	ldrb	r3, [r3, #3]
 80061f6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e018      	b.n	8006230 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2200      	movs	r2, #0
 8006210:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800621e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006224:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	78db      	ldrb	r3, [r3, #3]
 800622a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800623a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800623e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800624e:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6999      	ldr	r1, [r3, #24]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	431a      	orrs	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f9a1 	bl	80065b0 <RTC_ExitInitMode>
 800626e:	4603      	mov	r3, r0
 8006270:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	22ff      	movs	r2, #255	; 0xff
 8006278:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800627a:	7cfb      	ldrb	r3, [r7, #19]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d103      	bne.n	8006288 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8006290:	7cfb      	ldrb	r3, [r7, #19]
}
 8006292:	4618      	mov	r0, r3
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd90      	pop	{r4, r7, pc}

0800629a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b086      	sub	sp, #24
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80062c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80062cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	0a1b      	lsrs	r3, r3, #8
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	0d9b      	lsrs	r3, r3, #22
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d11a      	bne.n	8006348 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f9a8 	bl	800666c <RTC_Bcd2ToByte>
 800631c:	4603      	mov	r3, r0
 800631e:	461a      	mov	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 f99f 	bl	800666c <RTC_Bcd2ToByte>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	789b      	ldrb	r3, [r3, #2]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f996 	bl	800666c <RTC_Bcd2ToByte>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006352:	b590      	push	{r4, r7, lr}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_RTC_SetDate+0x1a>
 8006368:	2302      	movs	r3, #2
 800636a:	e075      	b.n	8006458 <HAL_RTC_SetDate+0x106>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10e      	bne.n	80063a0 <HAL_RTC_SetDate+0x4e>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	f003 0310 	and.w	r3, r3, #16
 800638a:	2b00      	cmp	r3, #0
 800638c:	d008      	beq.n	80063a0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	f023 0310 	bic.w	r3, r3, #16
 8006396:	b2db      	uxtb	r3, r3
 8006398:	330a      	adds	r3, #10
 800639a:	b2da      	uxtb	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d11c      	bne.n	80063e0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	78db      	ldrb	r3, [r3, #3]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 f93e 	bl	800662c <RTC_ByteToBcd2>
 80063b0:	4603      	mov	r3, r0
 80063b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 f937 	bl	800662c <RTC_ByteToBcd2>
 80063be:	4603      	mov	r3, r0
 80063c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80063c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	789b      	ldrb	r3, [r3, #2]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f92f 	bl	800662c <RTC_ByteToBcd2>
 80063ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80063d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	e00e      	b.n	80063fe <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	78db      	ldrb	r3, [r3, #3]
 80063e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80063ec:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80063f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	22ca      	movs	r2, #202	; 0xca
 8006404:	625a      	str	r2, [r3, #36]	; 0x24
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2253      	movs	r2, #83	; 0x53
 800640c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f898 	bl	8006544 <RTC_EnterInitMode>
 8006414:	4603      	mov	r3, r0
 8006416:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006418:	7cfb      	ldrb	r3, [r7, #19]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10c      	bne.n	8006438 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006428:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800642c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f8be 	bl	80065b0 <RTC_ExitInitMode>
 8006434:	4603      	mov	r3, r0
 8006436:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	22ff      	movs	r2, #255	; 0xff
 800643e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006440:	7cfb      	ldrb	r3, [r7, #19]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8006456:	7cfb      	ldrb	r3, [r7, #19]
}
 8006458:	4618      	mov	r0, r3
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	bd90      	pop	{r4, r7, pc}

08006460 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006476:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800647a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	0c1b      	lsrs	r3, r3, #16
 8006480:	b2da      	uxtb	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	b2da      	uxtb	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	0b5b      	lsrs	r3, r3, #13
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d11a      	bne.n	80064f0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	78db      	ldrb	r3, [r3, #3]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f8d4 	bl	800666c <RTC_Bcd2ToByte>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	785b      	ldrb	r3, [r3, #1]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 f8cb 	bl	800666c <RTC_Bcd2ToByte>
 80064d6:	4603      	mov	r3, r0
 80064d8:	461a      	mov	r2, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	789b      	ldrb	r3, [r3, #2]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f8c2 	bl	800666c <RTC_Bcd2ToByte>
 80064e8:	4603      	mov	r3, r0
 80064ea:	461a      	mov	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a0d      	ldr	r2, [pc, #52]	; (8006540 <HAL_RTC_WaitForSynchro+0x44>)
 800650a:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 800650c:	f7fc fbb4 	bl	8002c78 <HAL_GetTick>
 8006510:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006512:	e009      	b.n	8006528 <HAL_RTC_WaitForSynchro+0x2c>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006514:	f7fc fbb0 	bl	8002c78 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006522:	d901      	bls.n	8006528 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e007      	b.n	8006538 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0ee      	beq.n	8006514 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	0001005c 	.word	0x0001005c

08006544 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d123      	bne.n	80065a6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800656c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800656e:	f7fc fb83 	bl	8002c78 <HAL_GetTick>
 8006572:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006574:	e00d      	b.n	8006592 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006576:	f7fc fb7f 	bl	8002c78 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006584:	d905      	bls.n	8006592 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2203      	movs	r2, #3
 800658e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <RTC_EnterInitMode+0x62>
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d1e7      	bne.n	8006576 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80065bc:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <RTC_ExitInitMode+0x78>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	4a19      	ldr	r2, [pc, #100]	; (8006628 <RTC_ExitInitMode+0x78>)
 80065c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c6:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80065c8:	4b17      	ldr	r3, [pc, #92]	; (8006628 <RTC_ExitInitMode+0x78>)
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10c      	bne.n	80065ee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff ff91 	bl	80064fc <HAL_RTC_WaitForSynchro>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01e      	beq.n	800661e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2203      	movs	r2, #3
 80065e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	73fb      	strb	r3, [r7, #15]
 80065ec:	e017      	b.n	800661e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <RTC_ExitInitMode+0x78>)
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	4a0d      	ldr	r2, [pc, #52]	; (8006628 <RTC_ExitInitMode+0x78>)
 80065f4:	f023 0320 	bic.w	r3, r3, #32
 80065f8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ff7e 	bl	80064fc <HAL_RTC_WaitForSynchro>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2203      	movs	r2, #3
 800660a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006612:	4b05      	ldr	r3, [pc, #20]	; (8006628 <RTC_ExitInitMode+0x78>)
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	4a04      	ldr	r2, [pc, #16]	; (8006628 <RTC_ExitInitMode+0x78>)
 8006618:	f043 0320 	orr.w	r3, r3, #32
 800661c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40002800 	.word	0x40002800

0800662c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800663e:	e005      	b.n	800664c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3301      	adds	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006646:	7afb      	ldrb	r3, [r7, #11]
 8006648:	3b0a      	subs	r3, #10
 800664a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	2b09      	cmp	r3, #9
 8006650:	d8f6      	bhi.n	8006640 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	b2da      	uxtb	r2, r3
 800665a:	7afb      	ldrb	r3, [r7, #11]
 800665c:	4313      	orrs	r3, r2
 800665e:	b2db      	uxtb	r3, r3
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	0092      	lsls	r2, r2, #2
 8006680:	4413      	add	r3, r2
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	b2da      	uxtb	r2, r3
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	4413      	add	r3, r2
 8006692:	b2db      	uxtb	r3, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e095      	b.n	80067de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d108      	bne.n	80066cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066c2:	d009      	beq.n	80066d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	61da      	str	r2, [r3, #28]
 80066ca:	e005      	b.n	80066d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fb fd94 	bl	8002220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800670e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006718:	d902      	bls.n	8006720 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e002      	b.n	8006726 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006724:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800672e:	d007      	beq.n	8006740 <HAL_SPI_Init+0xa0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006738:	d002      	beq.n	8006740 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006782:	ea42 0103 	orr.w	r1, r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	0c1b      	lsrs	r3, r3, #16
 800679c:	f003 0204 	and.w	r2, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067bc:	ea42 0103 	orr.w	r1, r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b088      	sub	sp, #32
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_SPI_Transmit+0x22>
 8006804:	2302      	movs	r3, #2
 8006806:	e15f      	b.n	8006ac8 <HAL_SPI_Transmit+0x2e2>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006810:	f7fc fa32 	bl	8002c78 <HAL_GetTick>
 8006814:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b01      	cmp	r3, #1
 8006824:	d002      	beq.n	800682c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006826:	2302      	movs	r3, #2
 8006828:	77fb      	strb	r3, [r7, #31]
    goto error;
 800682a:	e148      	b.n	8006abe <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <HAL_SPI_Transmit+0x52>
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800683c:	e13f      	b.n	8006abe <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2203      	movs	r2, #3
 8006842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	88fa      	ldrh	r2, [r7, #6]
 8006856:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	d10f      	bne.n	80068aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006898:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d007      	beq.n	80068c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068d0:	d94f      	bls.n	8006972 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_SPI_Transmit+0xfa>
 80068da:	8afb      	ldrh	r3, [r7, #22]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d142      	bne.n	8006966 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	881a      	ldrh	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	1c9a      	adds	r2, r3, #2
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006904:	e02f      	b.n	8006966 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b02      	cmp	r3, #2
 8006912:	d112      	bne.n	800693a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	881a      	ldrh	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	1c9a      	adds	r2, r3, #2
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006938:	e015      	b.n	8006966 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800693a:	f7fc f99d 	bl	8002c78 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d803      	bhi.n	8006952 <HAL_SPI_Transmit+0x16c>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d102      	bne.n	8006958 <HAL_SPI_Transmit+0x172>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d106      	bne.n	8006966 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006964:	e0ab      	b.n	8006abe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1ca      	bne.n	8006906 <HAL_SPI_Transmit+0x120>
 8006970:	e080      	b.n	8006a74 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <HAL_SPI_Transmit+0x19a>
 800697a:	8afb      	ldrh	r3, [r7, #22]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d174      	bne.n	8006a6a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	d912      	bls.n	80069b0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	881a      	ldrh	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	1c9a      	adds	r2, r3, #2
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b02      	subs	r3, #2
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069ae:	e05c      	b.n	8006a6a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80069d6:	e048      	b.n	8006a6a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d12b      	bne.n	8006a3e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d912      	bls.n	8006a16 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	881a      	ldrh	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	1c9a      	adds	r2, r3, #2
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b02      	subs	r3, #2
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a14:	e029      	b.n	8006a6a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	7812      	ldrb	r2, [r2, #0]
 8006a22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a3c:	e015      	b.n	8006a6a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a3e:	f7fc f91b 	bl	8002c78 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d803      	bhi.n	8006a56 <HAL_SPI_Transmit+0x270>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a54:	d102      	bne.n	8006a5c <HAL_SPI_Transmit+0x276>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006a68:	e029      	b.n	8006abe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1b1      	bne.n	80069d8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fcf9 	bl	8007470 <SPI_EndRxTxTransaction>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a92:	2300      	movs	r3, #0
 8006a94:	613b      	str	r3, [r7, #16]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e003      	b.n	8006abe <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	4613      	mov	r3, r2
 8006ade:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d002      	beq.n	8006af6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006af0:	2302      	movs	r3, #2
 8006af2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006af4:	e11a      	b.n	8006d2c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006afe:	d112      	bne.n	8006b26 <HAL_SPI_Receive+0x56>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10e      	bne.n	8006b26 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b10:	88fa      	ldrh	r2, [r7, #6]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	4613      	mov	r3, r2
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f90e 	bl	8006d3e <HAL_SPI_TransmitReceive>
 8006b22:	4603      	mov	r3, r0
 8006b24:	e107      	b.n	8006d36 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_SPI_Receive+0x64>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e100      	b.n	8006d36 <HAL_SPI_Receive+0x266>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b3c:	f7fc f89c 	bl	8002c78 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HAL_SPI_Receive+0x7e>
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b52:	e0eb      	b.n	8006d2c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2204      	movs	r2, #4
 8006b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	88fa      	ldrh	r2, [r7, #6]
 8006b6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	88fa      	ldrh	r2, [r7, #6]
 8006b74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b9e:	d908      	bls.n	8006bb2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bae:	605a      	str	r2, [r3, #4]
 8006bb0:	e007      	b.n	8006bc2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bc0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bca:	d10f      	bne.n	8006bec <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d007      	beq.n	8006c0a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c12:	d86f      	bhi.n	8006cf4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c14:	e034      	b.n	8006c80 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d117      	bne.n	8006c54 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f103 020c 	add.w	r2, r3, #12
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	7812      	ldrb	r2, [r2, #0]
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006c52:	e015      	b.n	8006c80 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c54:	f7fc f810 	bl	8002c78 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d803      	bhi.n	8006c6c <HAL_SPI_Receive+0x19c>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6a:	d102      	bne.n	8006c72 <HAL_SPI_Receive+0x1a2>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006c7e:	e055      	b.n	8006d2c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1c4      	bne.n	8006c16 <HAL_SPI_Receive+0x146>
 8006c8c:	e038      	b.n	8006d00 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d115      	bne.n	8006cc8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	b292      	uxth	r2, r2
 8006ca8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	1c9a      	adds	r2, r3, #2
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006cc6:	e015      	b.n	8006cf4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc8:	f7fb ffd6 	bl	8002c78 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d803      	bhi.n	8006ce0 <HAL_SPI_Receive+0x210>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d102      	bne.n	8006ce6 <HAL_SPI_Receive+0x216>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006cf2:	e01b      	b.n	8006d2c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1c6      	bne.n	8006c8e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 fb5b 	bl	80073c0 <SPI_EndRxTransaction>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	75fb      	strb	r3, [r7, #23]
 8006d22:	e003      	b.n	8006d2c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b08a      	sub	sp, #40	; 0x28
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x26>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e20a      	b.n	800717a <HAL_SPI_TransmitReceive+0x43c>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d6c:	f7fb ff84 	bl	8002c78 <HAL_GetTick>
 8006d70:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d78:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d80:	887b      	ldrh	r3, [r7, #2]
 8006d82:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d84:	887b      	ldrh	r3, [r7, #2]
 8006d86:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d88:	7efb      	ldrb	r3, [r7, #27]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d00e      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x6e>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d94:	d106      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x66>
 8006d9e:	7efb      	ldrb	r3, [r7, #27]
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d003      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
 8006da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006daa:	e1e0      	b.n	800716e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x80>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x80>
 8006db8:	887b      	ldrh	r3, [r7, #2]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d103      	bne.n	8006dc6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006dc4:	e1d3      	b.n	800716e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d003      	beq.n	8006dda <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	887a      	ldrh	r2, [r7, #2]
 8006dea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	887a      	ldrh	r2, [r7, #2]
 8006df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	887a      	ldrh	r2, [r7, #2]
 8006e00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	887a      	ldrh	r2, [r7, #2]
 8006e06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e1c:	d802      	bhi.n	8006e24 <HAL_SPI_TransmitReceive+0xe6>
 8006e1e:	8a3b      	ldrh	r3, [r7, #16]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d908      	bls.n	8006e36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e32:	605a      	str	r2, [r3, #4]
 8006e34:	e007      	b.n	8006e46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	d007      	beq.n	8006e64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e6c:	f240 8081 	bls.w	8006f72 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <HAL_SPI_TransmitReceive+0x140>
 8006e78:	8a7b      	ldrh	r3, [r7, #18]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d16d      	bne.n	8006f5a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	881a      	ldrh	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	1c9a      	adds	r2, r3, #2
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ea2:	e05a      	b.n	8006f5a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d11b      	bne.n	8006eea <HAL_SPI_TransmitReceive+0x1ac>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d016      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x1ac>
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d113      	bne.n	8006eea <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	881a      	ldrh	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	1c9a      	adds	r2, r3, #2
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d11c      	bne.n	8006f32 <HAL_SPI_TransmitReceive+0x1f4>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d016      	beq.n	8006f32 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	b292      	uxth	r2, r2
 8006f10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	1c9a      	adds	r2, r3, #2
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f32:	f7fb fea1 	bl	8002c78 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d80b      	bhi.n	8006f5a <HAL_SPI_TransmitReceive+0x21c>
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d007      	beq.n	8006f5a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006f58:	e109      	b.n	800716e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d19f      	bne.n	8006ea4 <HAL_SPI_TransmitReceive+0x166>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d199      	bne.n	8006ea4 <HAL_SPI_TransmitReceive+0x166>
 8006f70:	e0e3      	b.n	800713a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_SPI_TransmitReceive+0x244>
 8006f7a:	8a7b      	ldrh	r3, [r7, #18]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	f040 80cf 	bne.w	8007120 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d912      	bls.n	8006fb2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	881a      	ldrh	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	1c9a      	adds	r2, r3, #2
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b02      	subs	r3, #2
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fb0:	e0b6      	b.n	8007120 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	7812      	ldrb	r2, [r2, #0]
 8006fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fd8:	e0a2      	b.n	8007120 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d134      	bne.n	8007052 <HAL_SPI_TransmitReceive+0x314>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02f      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x314>
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d12c      	bne.n	8007052 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d912      	bls.n	8007028 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	881a      	ldrh	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b02      	subs	r3, #2
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007026:	e012      	b.n	800704e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	7812      	ldrb	r2, [r2, #0]
 8007034:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b01      	cmp	r3, #1
 800705e:	d148      	bne.n	80070f2 <HAL_SPI_TransmitReceive+0x3b4>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d042      	beq.n	80070f2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	d923      	bls.n	80070c0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	b292      	uxth	r2, r2
 8007084:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	1c9a      	adds	r2, r3, #2
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b02      	subs	r3, #2
 800709a:	b29a      	uxth	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d81f      	bhi.n	80070ee <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	e016      	b.n	80070ee <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f103 020c 	add.w	r2, r3, #12
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	7812      	ldrb	r2, [r2, #0]
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070ee:	2301      	movs	r3, #1
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070f2:	f7fb fdc1 	bl	8002c78 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070fe:	429a      	cmp	r2, r3
 8007100:	d803      	bhi.n	800710a <HAL_SPI_TransmitReceive+0x3cc>
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d102      	bne.n	8007110 <HAL_SPI_TransmitReceive+0x3d2>
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	2b00      	cmp	r3, #0
 800710e:	d107      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800711e:	e026      	b.n	800716e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	f47f af57 	bne.w	8006fda <HAL_SPI_TransmitReceive+0x29c>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	f47f af50 	bne.w	8006fda <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f996 	bl	8007470 <SPI_EndRxTxTransaction>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2220      	movs	r2, #32
 8007154:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007164:	e003      	b.n	800716e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	; 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	4613      	mov	r3, r2
 8007192:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007194:	f7fb fd70 	bl	8002c78 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	1a9b      	subs	r3, r3, r2
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4413      	add	r3, r2
 80071a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071a4:	f7fb fd68 	bl	8002c78 <HAL_GetTick>
 80071a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071aa:	4b39      	ldr	r3, [pc, #228]	; (8007290 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	015b      	lsls	r3, r3, #5
 80071b0:	0d1b      	lsrs	r3, r3, #20
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	fb02 f303 	mul.w	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071ba:	e054      	b.n	8007266 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c2:	d050      	beq.n	8007266 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071c4:	f7fb fd58 	bl	8002c78 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d902      	bls.n	80071da <SPI_WaitFlagStateUntilTimeout+0x56>
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d13d      	bne.n	8007256 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071f2:	d111      	bne.n	8007218 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071fc:	d004      	beq.n	8007208 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007206:	d107      	bne.n	8007218 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007220:	d10f      	bne.n	8007242 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007240:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e017      	b.n	8007286 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	3b01      	subs	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4013      	ands	r3, r2
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	429a      	cmp	r2, r3
 8007274:	bf0c      	ite	eq
 8007276:	2301      	moveq	r3, #1
 8007278:	2300      	movne	r3, #0
 800727a:	b2db      	uxtb	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	429a      	cmp	r2, r3
 8007282:	d19b      	bne.n	80071bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3720      	adds	r7, #32
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000000 	.word	0x20000000

08007294 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08a      	sub	sp, #40	; 0x28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072a6:	f7fb fce7 	bl	8002c78 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	1a9b      	subs	r3, r3, r2
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	4413      	add	r3, r2
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80072b6:	f7fb fcdf 	bl	8002c78 <HAL_GetTick>
 80072ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	330c      	adds	r3, #12
 80072c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072c4:	4b3d      	ldr	r3, [pc, #244]	; (80073bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	00da      	lsls	r2, r3, #3
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	0d1b      	lsrs	r3, r3, #20
 80072d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072dc:	e060      	b.n	80073a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80072e4:	d107      	bne.n	80072f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d104      	bne.n	80072f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fc:	d050      	beq.n	80073a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072fe:	f7fb fcbb 	bl	8002c78 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730a:	429a      	cmp	r2, r3
 800730c:	d902      	bls.n	8007314 <SPI_WaitFifoStateUntilTimeout+0x80>
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	d13d      	bne.n	8007390 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007322:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800732c:	d111      	bne.n	8007352 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007336:	d004      	beq.n	8007342 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007340:	d107      	bne.n	8007352 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007350:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735a:	d10f      	bne.n	800737c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800737a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e010      	b.n	80073b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	3b01      	subs	r3, #1
 800739e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4013      	ands	r3, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d196      	bne.n	80072de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3728      	adds	r7, #40	; 0x28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000000 	.word	0x20000000

080073c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073d4:	d111      	bne.n	80073fa <SPI_EndRxTransaction+0x3a>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073de:	d004      	beq.n	80073ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e8:	d107      	bne.n	80073fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2200      	movs	r2, #0
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff febd 	bl	8007184 <SPI_WaitFlagStateUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e023      	b.n	8007468 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007428:	d11d      	bne.n	8007466 <SPI_EndRxTransaction+0xa6>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007432:	d004      	beq.n	800743e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743c:	d113      	bne.n	8007466 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff ff22 	bl	8007294 <SPI_WaitFifoStateUntilTimeout>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d007      	beq.n	8007466 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800745a:	f043 0220 	orr.w	r2, r3, #32
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e000      	b.n	8007468 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff ff03 	bl	8007294 <SPI_WaitFifoStateUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007498:	f043 0220 	orr.w	r2, r3, #32
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e027      	b.n	80074f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	2180      	movs	r1, #128	; 0x80
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff fe68 	bl	8007184 <SPI_WaitFlagStateUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e014      	b.n	80074f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff fedc 	bl	8007294 <SPI_WaitFifoStateUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e6:	f043 0220 	orr.w	r2, r3, #32
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e000      	b.n	80074f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074fc:	b084      	sub	sp, #16
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	f107 0014 	add.w	r0, r7, #20
 800750a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	b004      	add	sp, #16
 800751c:	4770      	bx	lr

0800751e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800752e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007532:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007554:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007558:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	b29b      	uxth	r3, r3
 8007566:	43db      	mvns	r3, r3
 8007568:	b29b      	uxth	r3, r3
 800756a:	4013      	ands	r3, r2
 800756c:	b29a      	uxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800759c:	b084      	sub	sp, #16
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	f107 0014 	add.w	r0, r7, #20
 80075aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	b004      	add	sp, #16
 80075dc:	4770      	bx	lr
	...

080075e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b09d      	sub	sp, #116	; 0x74
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	78db      	ldrb	r3, [r3, #3]
 800760e:	2b03      	cmp	r3, #3
 8007610:	d81f      	bhi.n	8007652 <USB_ActivateEndpoint+0x72>
 8007612:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <USB_ActivateEndpoint+0x38>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	08007629 	.word	0x08007629
 800761c:	08007645 	.word	0x08007645
 8007620:	0800765b 	.word	0x0800765b
 8007624:	08007637 	.word	0x08007637
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007628:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800762c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007630:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007634:	e012      	b.n	800765c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007636:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800763a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800763e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007642:	e00b      	b.n	800765c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007644:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800764c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007650:	e004      	b.n	800765c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007658:	e000      	b.n	800765c <USB_ActivateEndpoint+0x7c>
      break;
 800765a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	441a      	add	r2, r3
 8007666:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800766a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800766e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767a:	b29b      	uxth	r3, r3
 800767c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	b21b      	sxth	r3, r3
 800768e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007696:	b21a      	sxth	r2, r3
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b21b      	sxth	r3, r3
 800769e:	4313      	orrs	r3, r2
 80076a0:	b21b      	sxth	r3, r3
 80076a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	441a      	add	r2, r3
 80076b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80076b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	7b1b      	ldrb	r3, [r3, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 8178 	bne.w	80079c2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8084 	beq.w	80077e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	61bb      	str	r3, [r7, #24]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	4413      	add	r3, r2
 80076ee:	61bb      	str	r3, [r7, #24]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	00da      	lsls	r2, r3, #3
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	88db      	ldrh	r3, [r3, #6]
 8007704:	085b      	lsrs	r3, r3, #1
 8007706:	b29b      	uxth	r3, r3
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	827b      	strh	r3, [r7, #18]
 800771e:	8a7b      	ldrh	r3, [r7, #18]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01b      	beq.n	8007760 <USB_ActivateEndpoint+0x180>
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	823b      	strh	r3, [r7, #16]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	8a3b      	ldrh	r3, [r7, #16]
 800774c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800775c:	b29b      	uxth	r3, r3
 800775e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	78db      	ldrb	r3, [r3, #3]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d020      	beq.n	80077aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777e:	81bb      	strh	r3, [r7, #12]
 8007780:	89bb      	ldrh	r3, [r7, #12]
 8007782:	f083 0320 	eor.w	r3, r3, #32
 8007786:	81bb      	strh	r3, [r7, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	441a      	add	r2, r3
 8007792:	89bb      	ldrh	r3, [r7, #12]
 8007794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	8013      	strh	r3, [r2, #0]
 80077a8:	e2d5      	b.n	8007d56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c0:	81fb      	strh	r3, [r7, #14]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	441a      	add	r2, r3
 80077cc:	89fb      	ldrh	r3, [r7, #14]
 80077ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077de:	b29b      	uxth	r3, r3
 80077e0:	8013      	strh	r3, [r2, #0]
 80077e2:	e2b8      	b.n	8007d56 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	633b      	str	r3, [r7, #48]	; 0x30
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	4413      	add	r3, r2
 80077f6:	633b      	str	r3, [r7, #48]	; 0x30
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	00da      	lsls	r2, r3, #3
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	4413      	add	r3, r2
 8007802:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	b29b      	uxth	r3, r3
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	62bb      	str	r3, [r7, #40]	; 0x28
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007822:	b29b      	uxth	r3, r3
 8007824:	461a      	mov	r2, r3
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	4413      	add	r3, r2
 800782a:	62bb      	str	r3, [r7, #40]	; 0x28
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	00da      	lsls	r2, r3, #3
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	4413      	add	r3, r2
 8007836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800783a:	627b      	str	r3, [r7, #36]	; 0x24
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007846:	b29a      	uxth	r2, r3
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b3e      	cmp	r3, #62	; 0x3e
 8007852:	d91d      	bls.n	8007890 <USB_ActivateEndpoint+0x2b0>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	66bb      	str	r3, [r7, #104]	; 0x68
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <USB_ActivateEndpoint+0x28e>
 8007868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800786a:	3b01      	subs	r3, #1
 800786c:	66bb      	str	r3, [r7, #104]	; 0x68
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29a      	uxth	r2, r3
 8007874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007876:	b29b      	uxth	r3, r3
 8007878:	029b      	lsls	r3, r3, #10
 800787a:	b29b      	uxth	r3, r3
 800787c:	4313      	orrs	r3, r2
 800787e:	b29b      	uxth	r3, r3
 8007880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007888:	b29a      	uxth	r2, r3
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	e026      	b.n	80078de <USB_ActivateEndpoint+0x2fe>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <USB_ActivateEndpoint+0x2ce>
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e017      	b.n	80078de <USB_ActivateEndpoint+0x2fe>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	085b      	lsrs	r3, r3, #1
 80078b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <USB_ActivateEndpoint+0x2e8>
 80078c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078c4:	3301      	adds	r3, #1
 80078c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	029b      	lsls	r3, r3, #10
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	4313      	orrs	r3, r2
 80078d8:	b29a      	uxth	r2, r3
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80078ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d01b      	beq.n	800792e <USB_ActivateEndpoint+0x34e>
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790c:	843b      	strh	r3, [r7, #32]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	441a      	add	r2, r3
 8007918:	8c3b      	ldrh	r3, [r7, #32]
 800791a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792a:	b29b      	uxth	r3, r3
 800792c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d124      	bne.n	8007980 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794c:	83bb      	strh	r3, [r7, #28]
 800794e:	8bbb      	ldrh	r3, [r7, #28]
 8007950:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007954:	83bb      	strh	r3, [r7, #28]
 8007956:	8bbb      	ldrh	r3, [r7, #28]
 8007958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800795c:	83bb      	strh	r3, [r7, #28]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	441a      	add	r2, r3
 8007968:	8bbb      	ldrh	r3, [r7, #28]
 800796a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800796e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800797a:	b29b      	uxth	r3, r3
 800797c:	8013      	strh	r3, [r2, #0]
 800797e:	e1ea      	b.n	8007d56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007996:	83fb      	strh	r3, [r7, #30]
 8007998:	8bfb      	ldrh	r3, [r7, #30]
 800799a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800799e:	83fb      	strh	r3, [r7, #30]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	441a      	add	r2, r3
 80079aa:	8bfb      	ldrh	r3, [r7, #30]
 80079ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079bc:	b29b      	uxth	r3, r3
 80079be:	8013      	strh	r3, [r2, #0]
 80079c0:	e1c9      	b.n	8007d56 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	78db      	ldrb	r3, [r3, #3]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d11e      	bne.n	8007a08 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	441a      	add	r2, r3
 80079ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80079f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	8013      	strh	r3, [r2, #0]
 8007a06:	e01d      	b.n	8007a44 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	441a      	add	r2, r3
 8007a2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a54:	4413      	add	r3, r2
 8007a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	00da      	lsls	r2, r3, #3
 8007a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	891b      	ldrh	r3, [r3, #8]
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a76:	801a      	strh	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a88:	4413      	add	r3, r2
 8007a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	00da      	lsls	r2, r3, #3
 8007a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a94:	4413      	add	r3, r2
 8007a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	895b      	ldrh	r3, [r3, #10]
 8007aa0:	085b      	lsrs	r3, r3, #1
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aaa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f040 8093 	bne.w	8007bdc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01b      	beq.n	8007b0a <USB_ActivateEndpoint+0x52a>
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	441a      	add	r2, r3
 8007af4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d01b      	beq.n	8007b5a <USB_ActivateEndpoint+0x57a>
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	441a      	add	r2, r3
 8007b44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b70:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b78:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b80:	873b      	strh	r3, [r7, #56]	; 0x38
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	441a      	add	r2, r3
 8007b8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	441a      	add	r2, r3
 8007bc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	8013      	strh	r3, [r2, #0]
 8007bda:	e0bc      	b.n	8007d56 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007bec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01d      	beq.n	8007c34 <USB_ActivateEndpoint+0x654>
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	441a      	add	r2, r3
 8007c1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007c44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01d      	beq.n	8007c8c <USB_ActivateEndpoint+0x6ac>
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	441a      	add	r2, r3
 8007c74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	78db      	ldrb	r3, [r3, #3]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d024      	beq.n	8007cde <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007caa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007cae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007cb2:	f083 0320 	eor.w	r3, r3, #32
 8007cb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	441a      	add	r2, r3
 8007cc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	8013      	strh	r3, [r2, #0]
 8007cdc:	e01d      	b.n	8007d1a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	441a      	add	r2, r3
 8007d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007d56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3774      	adds	r7, #116	; 0x74
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop

08007d68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b08d      	sub	sp, #52	; 0x34
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	7b1b      	ldrb	r3, [r3, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f040 808e 	bne.w	8007e98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d044      	beq.n	8007e0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	81bb      	strh	r3, [r7, #12]
 8007d92:	89bb      	ldrh	r3, [r7, #12]
 8007d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01b      	beq.n	8007dd4 <USB_DeactivateEndpoint+0x6c>
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db2:	817b      	strh	r3, [r7, #10]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	441a      	add	r2, r3
 8007dbe:	897b      	ldrh	r3, [r7, #10]
 8007dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dea:	813b      	strh	r3, [r7, #8]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	441a      	add	r2, r3
 8007df6:	893b      	ldrh	r3, [r7, #8]
 8007df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	8013      	strh	r3, [r2, #0]
 8007e0c:	e192      	b.n	8008134 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	827b      	strh	r3, [r7, #18]
 8007e1c:	8a7b      	ldrh	r3, [r7, #18]
 8007e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d01b      	beq.n	8007e5e <USB_DeactivateEndpoint+0xf6>
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3c:	823b      	strh	r3, [r7, #16]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	441a      	add	r2, r3
 8007e48:	8a3b      	ldrh	r3, [r7, #16]
 8007e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e74:	81fb      	strh	r3, [r7, #14]
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	441a      	add	r2, r3
 8007e80:	89fb      	ldrh	r3, [r7, #14]
 8007e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	8013      	strh	r3, [r2, #0]
 8007e96:	e14d      	b.n	8008134 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f040 80a5 	bne.w	8007fec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	843b      	strh	r3, [r7, #32]
 8007eb0:	8c3b      	ldrh	r3, [r7, #32]
 8007eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01b      	beq.n	8007ef2 <USB_DeactivateEndpoint+0x18a>
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed0:	83fb      	strh	r3, [r7, #30]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	441a      	add	r2, r3
 8007edc:	8bfb      	ldrh	r3, [r7, #30]
 8007ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	83bb      	strh	r3, [r7, #28]
 8007f00:	8bbb      	ldrh	r3, [r7, #28]
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01b      	beq.n	8007f42 <USB_DeactivateEndpoint+0x1da>
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f20:	837b      	strh	r3, [r7, #26]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	441a      	add	r2, r3
 8007f2c:	8b7b      	ldrh	r3, [r7, #26]
 8007f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f58:	833b      	strh	r3, [r7, #24]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	441a      	add	r2, r3
 8007f64:	8b3b      	ldrh	r3, [r7, #24]
 8007f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f90:	82fb      	strh	r3, [r7, #22]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	441a      	add	r2, r3
 8007f9c:	8afb      	ldrh	r3, [r7, #22]
 8007f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fc8:	82bb      	strh	r3, [r7, #20]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	441a      	add	r2, r3
 8007fd4:	8abb      	ldrh	r3, [r7, #20]
 8007fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	8013      	strh	r3, [r2, #0]
 8007fea:	e0a3      	b.n	8008134 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ffa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d01b      	beq.n	800803c <USB_DeactivateEndpoint+0x2d4>
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b29b      	uxth	r3, r3
 8008012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	441a      	add	r2, r3
 8008026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800802c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008038:	b29b      	uxth	r3, r3
 800803a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	857b      	strh	r3, [r7, #42]	; 0x2a
 800804a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800804c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01b      	beq.n	800808c <USB_DeactivateEndpoint+0x324>
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800806a:	853b      	strh	r3, [r7, #40]	; 0x28
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	441a      	add	r2, r3
 8008076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800807c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008088:	b29b      	uxth	r3, r3
 800808a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	441a      	add	r2, r3
 80080ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	847b      	strh	r3, [r7, #34]	; 0x22
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	441a      	add	r2, r3
 800811e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008130:	b29b      	uxth	r3, r3
 8008132:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3734      	adds	r7, #52	; 0x34
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b0c2      	sub	sp, #264	; 0x108
 8008146:	af00      	add	r7, sp, #0
 8008148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008150:	6018      	str	r0, [r3, #0]
 8008152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800815c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	785b      	ldrb	r3, [r3, #1]
 8008168:	2b01      	cmp	r3, #1
 800816a:	f040 86b7 	bne.w	8008edc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699a      	ldr	r2, [r3, #24]
 800817a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	d908      	bls.n	800819c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800818a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800819a:	e007      	b.n	80081ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800819c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80081ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	7b1b      	ldrb	r3, [r3, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d13a      	bne.n	8008232 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80081bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6959      	ldr	r1, [r3, #20]
 80081c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	88da      	ldrh	r2, [r3, #6]
 80081d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80081de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80081e2:	6800      	ldr	r0, [r0, #0]
 80081e4:	f001 fcb9 	bl	8009b5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80081e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008202:	b29b      	uxth	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	4413      	add	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
 800820c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	00da      	lsls	r2, r3, #3
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4413      	add	r3, r2
 800821e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	801a      	strh	r2, [r3, #0]
 800822e:	f000 be1f 	b.w	8008e70 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	78db      	ldrb	r3, [r3, #3]
 800823e:	2b02      	cmp	r3, #2
 8008240:	f040 8462 	bne.w	8008b08 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6a1a      	ldr	r2, [r3, #32]
 8008250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	429a      	cmp	r2, r3
 800825e:	f240 83df 	bls.w	8008a20 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008288:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800828c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	441a      	add	r2, r3
 80082a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80082b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80082be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6a1a      	ldr	r2, [r3, #32]
 80082ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	881b      	ldrh	r3, [r3, #0]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 81c7 	beq.w	8008692 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	633b      	str	r3, [r7, #48]	; 0x30
 8008310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d177      	bne.n	8008410 <USB_EPStartXfer+0x2ce>
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
 800832c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833a:	b29b      	uxth	r3, r3
 800833c:	461a      	mov	r2, r3
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	4413      	add	r3, r2
 8008342:	62bb      	str	r3, [r7, #40]	; 0x28
 8008344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	00da      	lsls	r2, r3, #3
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	4413      	add	r3, r2
 8008356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008366:	b29a      	uxth	r2, r3
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	801a      	strh	r2, [r3, #0]
 800836c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008370:	2b3e      	cmp	r3, #62	; 0x3e
 8008372:	d921      	bls.n	80083b8 <USB_EPStartXfer+0x276>
 8008374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800837e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008382:	f003 031f 	and.w	r3, r3, #31
 8008386:	2b00      	cmp	r3, #0
 8008388:	d104      	bne.n	8008394 <USB_EPStartXfer+0x252>
 800838a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800838e:	3b01      	subs	r3, #1
 8008390:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	b29a      	uxth	r2, r3
 800839a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800839e:	b29b      	uxth	r3, r3
 80083a0:	029b      	lsls	r3, r3, #10
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	4313      	orrs	r3, r2
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	801a      	strh	r2, [r3, #0]
 80083b6:	e050      	b.n	800845a <USB_EPStartXfer+0x318>
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <USB_EPStartXfer+0x294>
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	801a      	strh	r2, [r3, #0]
 80083d4:	e041      	b.n	800845a <USB_EPStartXfer+0x318>
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083da:	085b      	lsrs	r3, r3, #1
 80083dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d004      	beq.n	80083f6 <USB_EPStartXfer+0x2b4>
 80083ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083f0:	3301      	adds	r3, #1
 80083f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008400:	b29b      	uxth	r3, r3
 8008402:	029b      	lsls	r3, r3, #10
 8008404:	b29b      	uxth	r3, r3
 8008406:	4313      	orrs	r3, r2
 8008408:	b29a      	uxth	r2, r3
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	801a      	strh	r2, [r3, #0]
 800840e:	e024      	b.n	800845a <USB_EPStartXfer+0x318>
 8008410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d11c      	bne.n	800845a <USB_EPStartXfer+0x318>
 8008420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800842e:	b29b      	uxth	r3, r3
 8008430:	461a      	mov	r2, r3
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	4413      	add	r3, r2
 8008436:	633b      	str	r3, [r7, #48]	; 0x30
 8008438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	00da      	lsls	r2, r3, #3
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	4413      	add	r3, r2
 800844a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800844e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008454:	b29a      	uxth	r2, r3
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800845a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800845e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	895b      	ldrh	r3, [r3, #10]
 8008466:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800846a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6959      	ldr	r1, [r3, #20]
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847a:	b29b      	uxth	r3, r3
 800847c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008480:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008484:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008488:	6800      	ldr	r0, [r0, #0]
 800848a:	f001 fb66 	bl	8009b5a <USB_WritePMA>
            ep->xfer_buff += len;
 800848e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	695a      	ldr	r2, [r3, #20]
 800849a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800849e:	441a      	add	r2, r3
 80084a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6a1a      	ldr	r2, [r3, #32]
 80084b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d90f      	bls.n	80084e8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80084c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6a1a      	ldr	r2, [r3, #32]
 80084d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d8:	1ad2      	subs	r2, r2, r3
 80084da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	621a      	str	r2, [r3, #32]
 80084e6:	e00e      	b.n	8008506 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80084e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80084f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2200      	movs	r2, #0
 8008504:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d177      	bne.n	8008606 <USB_EPStartXfer+0x4c4>
 8008516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008530:	b29b      	uxth	r3, r3
 8008532:	461a      	mov	r2, r3
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	4413      	add	r3, r2
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800853e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	00da      	lsls	r2, r3, #3
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	4413      	add	r3, r2
 800854c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800855c:	b29a      	uxth	r2, r3
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008566:	2b3e      	cmp	r3, #62	; 0x3e
 8008568:	d921      	bls.n	80085ae <USB_EPStartXfer+0x46c>
 800856a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <USB_EPStartXfer+0x448>
 8008580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008584:	3b01      	subs	r3, #1
 8008586:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	b29a      	uxth	r2, r3
 8008590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008594:	b29b      	uxth	r3, r3
 8008596:	029b      	lsls	r3, r3, #10
 8008598:	b29b      	uxth	r3, r3
 800859a:	4313      	orrs	r3, r2
 800859c:	b29b      	uxth	r3, r3
 800859e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	801a      	strh	r2, [r3, #0]
 80085ac:	e056      	b.n	800865c <USB_EPStartXfer+0x51a>
 80085ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <USB_EPStartXfer+0x48a>
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	801a      	strh	r2, [r3, #0]
 80085ca:	e047      	b.n	800865c <USB_EPStartXfer+0x51a>
 80085cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d0:	085b      	lsrs	r3, r3, #1
 80085d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d004      	beq.n	80085ec <USB_EPStartXfer+0x4aa>
 80085e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e6:	3301      	adds	r3, #1
 80085e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	029b      	lsls	r3, r3, #10
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4313      	orrs	r3, r2
 80085fe:	b29a      	uxth	r2, r3
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	801a      	strh	r2, [r3, #0]
 8008604:	e02a      	b.n	800865c <USB_EPStartXfer+0x51a>
 8008606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800860a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d122      	bne.n	800865c <USB_EPStartXfer+0x51a>
 8008616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	623b      	str	r3, [r7, #32]
 8008622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008630:	b29b      	uxth	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	4413      	add	r3, r2
 8008638:	623b      	str	r3, [r7, #32]
 800863a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	00da      	lsls	r2, r3, #3
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	4413      	add	r3, r2
 800864c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008656:	b29a      	uxth	r2, r3
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800865c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	891b      	ldrh	r3, [r3, #8]
 8008668:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800866c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6959      	ldr	r1, [r3, #20]
 8008678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800867c:	b29b      	uxth	r3, r3
 800867e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008682:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008686:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800868a:	6800      	ldr	r0, [r0, #0]
 800868c:	f001 fa65 	bl	8009b5a <USB_WritePMA>
 8008690:	e3ee      	b.n	8008e70 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	785b      	ldrb	r3, [r3, #1]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d177      	bne.n	8008792 <USB_EPStartXfer+0x650>
 80086a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086bc:	b29b      	uxth	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c2:	4413      	add	r3, r2
 80086c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	00da      	lsls	r2, r3, #3
 80086d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d6:	4413      	add	r3, r2
 80086d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086dc:	647b      	str	r3, [r7, #68]	; 0x44
 80086de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ec:	801a      	strh	r2, [r3, #0]
 80086ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f2:	2b3e      	cmp	r3, #62	; 0x3e
 80086f4:	d921      	bls.n	800873a <USB_EPStartXfer+0x5f8>
 80086f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086fa:	095b      	lsrs	r3, r3, #5
 80086fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008704:	f003 031f 	and.w	r3, r3, #31
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <USB_EPStartXfer+0x5d4>
 800870c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008710:	3b01      	subs	r3, #1
 8008712:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	b29a      	uxth	r2, r3
 800871c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008720:	b29b      	uxth	r3, r3
 8008722:	029b      	lsls	r3, r3, #10
 8008724:	b29b      	uxth	r3, r3
 8008726:	4313      	orrs	r3, r2
 8008728:	b29b      	uxth	r3, r3
 800872a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800872e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008732:	b29a      	uxth	r2, r3
 8008734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008736:	801a      	strh	r2, [r3, #0]
 8008738:	e056      	b.n	80087e8 <USB_EPStartXfer+0x6a6>
 800873a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <USB_EPStartXfer+0x616>
 8008742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	b29b      	uxth	r3, r3
 8008748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008750:	b29a      	uxth	r2, r3
 8008752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008754:	801a      	strh	r2, [r3, #0]
 8008756:	e047      	b.n	80087e8 <USB_EPStartXfer+0x6a6>
 8008758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d004      	beq.n	8008778 <USB_EPStartXfer+0x636>
 800876e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008772:	3301      	adds	r3, #1
 8008774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	b29a      	uxth	r2, r3
 800877e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008782:	b29b      	uxth	r3, r3
 8008784:	029b      	lsls	r3, r3, #10
 8008786:	b29b      	uxth	r3, r3
 8008788:	4313      	orrs	r3, r2
 800878a:	b29a      	uxth	r2, r3
 800878c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878e:	801a      	strh	r2, [r3, #0]
 8008790:	e02a      	b.n	80087e8 <USB_EPStartXfer+0x6a6>
 8008792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d122      	bne.n	80087e8 <USB_EPStartXfer+0x6a6>
 80087a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	653b      	str	r3, [r7, #80]	; 0x50
 80087ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087bc:	b29b      	uxth	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087c2:	4413      	add	r3, r2
 80087c4:	653b      	str	r3, [r7, #80]	; 0x50
 80087c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	00da      	lsls	r2, r3, #3
 80087d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d6:	4413      	add	r3, r2
 80087d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80087e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	891b      	ldrh	r3, [r3, #8]
 80087f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6959      	ldr	r1, [r3, #20]
 8008804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008808:	b29b      	uxth	r3, r3
 800880a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800880e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008812:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008816:	6800      	ldr	r0, [r0, #0]
 8008818:	f001 f99f 	bl	8009b5a <USB_WritePMA>
            ep->xfer_buff += len;
 800881c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	695a      	ldr	r2, [r3, #20]
 8008828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800882c:	441a      	add	r2, r3
 800882e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800883a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6a1a      	ldr	r2, [r3, #32]
 8008846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	429a      	cmp	r2, r3
 8008854:	d90f      	bls.n	8008876 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6a1a      	ldr	r2, [r3, #32]
 8008862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008866:	1ad2      	subs	r2, r2, r3
 8008868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	621a      	str	r2, [r3, #32]
 8008874:	e00e      	b.n	8008894 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2200      	movs	r2, #0
 8008892:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	643b      	str	r3, [r7, #64]	; 0x40
 80088a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d177      	bne.n	80089a0 <USB_EPStartXfer+0x85e>
 80088b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80088bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	4413      	add	r3, r2
 80088d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	00da      	lsls	r2, r3, #3
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	4413      	add	r3, r2
 80088e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008900:	2b3e      	cmp	r3, #62	; 0x3e
 8008902:	d921      	bls.n	8008948 <USB_EPStartXfer+0x806>
 8008904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008908:	095b      	lsrs	r3, r3, #5
 800890a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800890e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008912:	f003 031f 	and.w	r3, r3, #31
 8008916:	2b00      	cmp	r3, #0
 8008918:	d104      	bne.n	8008924 <USB_EPStartXfer+0x7e2>
 800891a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800891e:	3b01      	subs	r3, #1
 8008920:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	b29a      	uxth	r2, r3
 800892a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800892e:	b29b      	uxth	r3, r3
 8008930:	029b      	lsls	r3, r3, #10
 8008932:	b29b      	uxth	r3, r3
 8008934:	4313      	orrs	r3, r2
 8008936:	b29b      	uxth	r3, r3
 8008938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008940:	b29a      	uxth	r2, r3
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	e050      	b.n	80089ea <USB_EPStartXfer+0x8a8>
 8008948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <USB_EPStartXfer+0x824>
 8008950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800895e:	b29a      	uxth	r2, r3
 8008960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008962:	801a      	strh	r2, [r3, #0]
 8008964:	e041      	b.n	80089ea <USB_EPStartXfer+0x8a8>
 8008966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896a:	085b      	lsrs	r3, r3, #1
 800896c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d004      	beq.n	8008986 <USB_EPStartXfer+0x844>
 800897c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008980:	3301      	adds	r3, #1
 8008982:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	b29a      	uxth	r2, r3
 800898c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008990:	b29b      	uxth	r3, r3
 8008992:	029b      	lsls	r3, r3, #10
 8008994:	b29b      	uxth	r3, r3
 8008996:	4313      	orrs	r3, r2
 8008998:	b29a      	uxth	r2, r3
 800899a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	e024      	b.n	80089ea <USB_EPStartXfer+0x8a8>
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d11c      	bne.n	80089ea <USB_EPStartXfer+0x8a8>
 80089b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089be:	b29b      	uxth	r3, r3
 80089c0:	461a      	mov	r2, r3
 80089c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c4:	4413      	add	r3, r2
 80089c6:	643b      	str	r3, [r7, #64]	; 0x40
 80089c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	00da      	lsls	r2, r3, #3
 80089d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d8:	4413      	add	r3, r2
 80089da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	895b      	ldrh	r3, [r3, #10]
 80089f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6959      	ldr	r1, [r3, #20]
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a18:	6800      	ldr	r0, [r0, #0]
 8008a1a:	f001 f89e 	bl	8009b5a <USB_WritePMA>
 8008a1e:	e227      	b.n	8008e70 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a56:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	441a      	add	r2, r3
 8008a74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aac:	4413      	add	r3, r2
 8008aae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	00da      	lsls	r2, r3, #3
 8008abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ac6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ad0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	891b      	ldrh	r3, [r3, #8]
 8008ade:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6959      	ldr	r1, [r3, #20]
 8008aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008af8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008afc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b00:	6800      	ldr	r0, [r0, #0]
 8008b02:	f001 f82a 	bl	8009b5a <USB_WritePMA>
 8008b06:	e1b3      	b.n	8008e70 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6a1a      	ldr	r2, [r3, #32]
 8008b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b18:	1ad2      	subs	r2, r2, r3
 8008b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 80c6 	beq.w	8008cda <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	673b      	str	r3, [r7, #112]	; 0x70
 8008b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	785b      	ldrb	r3, [r3, #1]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d177      	bne.n	8008c5a <USB_EPStartXfer+0xb18>
 8008b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	461a      	mov	r2, r3
 8008b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b8a:	4413      	add	r3, r2
 8008b8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	00da      	lsls	r2, r3, #3
 8008b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bb4:	801a      	strh	r2, [r3, #0]
 8008bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bba:	2b3e      	cmp	r3, #62	; 0x3e
 8008bbc:	d921      	bls.n	8008c02 <USB_EPStartXfer+0xac0>
 8008bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc2:	095b      	lsrs	r3, r3, #5
 8008bc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bcc:	f003 031f 	and.w	r3, r3, #31
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d104      	bne.n	8008bde <USB_EPStartXfer+0xa9c>
 8008bd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008be0:	881b      	ldrh	r3, [r3, #0]
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	029b      	lsls	r3, r3, #10
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bfe:	801a      	strh	r2, [r3, #0]
 8008c00:	e050      	b.n	8008ca4 <USB_EPStartXfer+0xb62>
 8008c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10a      	bne.n	8008c20 <USB_EPStartXfer+0xade>
 8008c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1c:	801a      	strh	r2, [r3, #0]
 8008c1e:	e041      	b.n	8008ca4 <USB_EPStartXfer+0xb62>
 8008c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c24:	085b      	lsrs	r3, r3, #1
 8008c26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <USB_EPStartXfer+0xafe>
 8008c36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	029b      	lsls	r3, r3, #10
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	4313      	orrs	r3, r2
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	e024      	b.n	8008ca4 <USB_EPStartXfer+0xb62>
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d11c      	bne.n	8008ca4 <USB_EPStartXfer+0xb62>
 8008c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c7e:	4413      	add	r3, r2
 8008c80:	673b      	str	r3, [r7, #112]	; 0x70
 8008c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	00da      	lsls	r2, r3, #3
 8008c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c92:	4413      	add	r3, r2
 8008c94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	895b      	ldrh	r3, [r3, #10]
 8008cb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6959      	ldr	r1, [r3, #20]
 8008cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008cca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008cce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008cd2:	6800      	ldr	r0, [r0, #0]
 8008cd4:	f000 ff41 	bl	8009b5a <USB_WritePMA>
 8008cd8:	e0ca      	b.n	8008e70 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	785b      	ldrb	r3, [r3, #1]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d177      	bne.n	8008dda <USB_EPStartXfer+0xc98>
 8008cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	461a      	mov	r2, r3
 8008d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d0a:	4413      	add	r3, r2
 8008d0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	00da      	lsls	r2, r3, #3
 8008d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d1e:	4413      	add	r3, r2
 8008d20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d24:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d34:	801a      	strh	r2, [r3, #0]
 8008d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8008d3c:	d921      	bls.n	8008d82 <USB_EPStartXfer+0xc40>
 8008d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d42:	095b      	lsrs	r3, r3, #5
 8008d44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d4c:	f003 031f 	and.w	r3, r3, #31
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d104      	bne.n	8008d5e <USB_EPStartXfer+0xc1c>
 8008d54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	029b      	lsls	r3, r3, #10
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d7e:	801a      	strh	r2, [r3, #0]
 8008d80:	e05c      	b.n	8008e3c <USB_EPStartXfer+0xcfa>
 8008d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <USB_EPStartXfer+0xc5e>
 8008d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9c:	801a      	strh	r2, [r3, #0]
 8008d9e:	e04d      	b.n	8008e3c <USB_EPStartXfer+0xcfa>
 8008da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da4:	085b      	lsrs	r3, r3, #1
 8008da6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d004      	beq.n	8008dc0 <USB_EPStartXfer+0xc7e>
 8008db6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dba:	3301      	adds	r3, #1
 8008dbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	029b      	lsls	r3, r3, #10
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dd6:	801a      	strh	r2, [r3, #0]
 8008dd8:	e030      	b.n	8008e3c <USB_EPStartXfer+0xcfa>
 8008dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d128      	bne.n	8008e3c <USB_EPStartXfer+0xcfa>
 8008dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e0e:	4413      	add	r3, r2
 8008e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	00da      	lsls	r2, r3, #3
 8008e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e26:	4413      	add	r3, r2
 8008e28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	891b      	ldrh	r3, [r3, #8]
 8008e48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6959      	ldr	r1, [r3, #20]
 8008e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	f000 fe75 	bl	8009b5a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e96:	817b      	strh	r3, [r7, #10]
 8008e98:	897b      	ldrh	r3, [r7, #10]
 8008e9a:	f083 0310 	eor.w	r3, r3, #16
 8008e9e:	817b      	strh	r3, [r7, #10]
 8008ea0:	897b      	ldrh	r3, [r7, #10]
 8008ea2:	f083 0320 	eor.w	r3, r3, #32
 8008ea6:	817b      	strh	r3, [r7, #10]
 8008ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	441a      	add	r2, r3
 8008ec2:	897b      	ldrh	r3, [r7, #10]
 8008ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	8013      	strh	r3, [r2, #0]
 8008ed8:	f000 bcde 	b.w	8009898 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	7b1b      	ldrb	r3, [r3, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f040 80bb 	bne.w	8009064 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	699a      	ldr	r2, [r3, #24]
 8008efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d917      	bls.n	8008f3a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699a      	ldr	r2, [r3, #24]
 8008f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2a:	1ad2      	subs	r2, r2, r3
 8008f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	619a      	str	r2, [r3, #24]
 8008f38:	e00e      	b.n	8008f58 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2200      	movs	r2, #0
 8008f56:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	461a      	mov	r2, r3
 8008f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	00da      	lsls	r2, r3, #3
 8008f90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f94:	4413      	add	r3, r2
 8008f96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fb0:	801a      	strh	r2, [r3, #0]
 8008fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8008fb8:	d924      	bls.n	8009004 <USB_EPStartXfer+0xec2>
 8008fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc8:	f003 031f 	and.w	r3, r3, #31
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <USB_EPStartXfer+0xe98>
 8008fd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	029b      	lsls	r3, r3, #10
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	4313      	orrs	r3, r2
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ffe:	801a      	strh	r2, [r3, #0]
 8009000:	f000 bc10 	b.w	8009824 <USB_EPStartXfer+0x16e2>
 8009004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10c      	bne.n	8009026 <USB_EPStartXfer+0xee4>
 800900c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b29b      	uxth	r3, r3
 8009014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800901c:	b29a      	uxth	r2, r3
 800901e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009022:	801a      	strh	r2, [r3, #0]
 8009024:	e3fe      	b.n	8009824 <USB_EPStartXfer+0x16e2>
 8009026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800902a:	085b      	lsrs	r3, r3, #1
 800902c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d004      	beq.n	8009046 <USB_EPStartXfer+0xf04>
 800903c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009040:	3301      	adds	r3, #1
 8009042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	b29a      	uxth	r2, r3
 800904e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009052:	b29b      	uxth	r3, r3
 8009054:	029b      	lsls	r3, r3, #10
 8009056:	b29b      	uxth	r3, r3
 8009058:	4313      	orrs	r3, r2
 800905a:	b29a      	uxth	r2, r3
 800905c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009060:	801a      	strh	r2, [r3, #0]
 8009062:	e3df      	b.n	8009824 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	78db      	ldrb	r3, [r3, #3]
 8009070:	2b02      	cmp	r3, #2
 8009072:	f040 8218 	bne.w	80094a6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	785b      	ldrb	r3, [r3, #1]
 8009082:	2b00      	cmp	r3, #0
 8009084:	f040 809d 	bne.w	80091c2 <USB_EPStartXfer+0x1080>
 8009088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800908c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800909a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090ac:	4413      	add	r3, r2
 80090ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	00da      	lsls	r2, r3, #3
 80090c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090c4:	4413      	add	r3, r2
 80090c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80090ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090da:	b29a      	uxth	r2, r3
 80090dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090e0:	801a      	strh	r2, [r3, #0]
 80090e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	2b3e      	cmp	r3, #62	; 0x3e
 80090f0:	d92b      	bls.n	800914a <USB_EPStartXfer+0x1008>
 80090f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	095b      	lsrs	r3, r3, #5
 8009100:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	f003 031f 	and.w	r3, r3, #31
 8009114:	2b00      	cmp	r3, #0
 8009116:	d104      	bne.n	8009122 <USB_EPStartXfer+0xfe0>
 8009118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800911c:	3b01      	subs	r3, #1
 800911e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	b29a      	uxth	r2, r3
 800912a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800912e:	b29b      	uxth	r3, r3
 8009130:	029b      	lsls	r3, r3, #10
 8009132:	b29b      	uxth	r3, r3
 8009134:	4313      	orrs	r3, r2
 8009136:	b29b      	uxth	r3, r3
 8009138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009140:	b29a      	uxth	r2, r3
 8009142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	e070      	b.n	800922c <USB_EPStartXfer+0x10ea>
 800914a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10c      	bne.n	8009174 <USB_EPStartXfer+0x1032>
 800915a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	b29b      	uxth	r3, r3
 8009162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800916a:	b29a      	uxth	r2, r3
 800916c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009170:	801a      	strh	r2, [r3, #0]
 8009172:	e05b      	b.n	800922c <USB_EPStartXfer+0x10ea>
 8009174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <USB_EPStartXfer+0x1062>
 800919a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800919e:	3301      	adds	r3, #1
 80091a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	029b      	lsls	r3, r3, #10
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091be:	801a      	strh	r2, [r3, #0]
 80091c0:	e034      	b.n	800922c <USB_EPStartXfer+0x10ea>
 80091c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d12c      	bne.n	800922c <USB_EPStartXfer+0x10ea>
 80091d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	461a      	mov	r2, r3
 80091f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091f6:	4413      	add	r3, r2
 80091f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	00da      	lsls	r2, r3, #3
 800920a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800920e:	4413      	add	r3, r2
 8009210:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	b29a      	uxth	r2, r3
 8009226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800922a:	801a      	strh	r2, [r3, #0]
 800922c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800923a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	785b      	ldrb	r3, [r3, #1]
 8009246:	2b00      	cmp	r3, #0
 8009248:	f040 809d 	bne.w	8009386 <USB_EPStartXfer+0x1244>
 800924c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009268:	b29b      	uxth	r3, r3
 800926a:	461a      	mov	r2, r3
 800926c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009270:	4413      	add	r3, r2
 8009272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800927a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	00da      	lsls	r2, r3, #3
 8009284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009288:	4413      	add	r3, r2
 800928a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800928e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009292:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009296:	881b      	ldrh	r3, [r3, #0]
 8009298:	b29b      	uxth	r3, r3
 800929a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800929e:	b29a      	uxth	r2, r3
 80092a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	2b3e      	cmp	r3, #62	; 0x3e
 80092b4:	d92b      	bls.n	800930e <USB_EPStartXfer+0x11cc>
 80092b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	095b      	lsrs	r3, r3, #5
 80092c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <USB_EPStartXfer+0x11a4>
 80092dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092e0:	3b01      	subs	r3, #1
 80092e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	029b      	lsls	r3, r3, #10
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4313      	orrs	r3, r2
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009304:	b29a      	uxth	r2, r3
 8009306:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800930a:	801a      	strh	r2, [r3, #0]
 800930c:	e069      	b.n	80093e2 <USB_EPStartXfer+0x12a0>
 800930e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10c      	bne.n	8009338 <USB_EPStartXfer+0x11f6>
 800931e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b29b      	uxth	r3, r3
 8009326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800932a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800932e:	b29a      	uxth	r2, r3
 8009330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009334:	801a      	strh	r2, [r3, #0]
 8009336:	e054      	b.n	80093e2 <USB_EPStartXfer+0x12a0>
 8009338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800933c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800934a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d004      	beq.n	8009368 <USB_EPStartXfer+0x1226>
 800935e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009362:	3301      	adds	r3, #1
 8009364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	b29a      	uxth	r2, r3
 8009370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009374:	b29b      	uxth	r3, r3
 8009376:	029b      	lsls	r3, r3, #10
 8009378:	b29b      	uxth	r3, r3
 800937a:	4313      	orrs	r3, r2
 800937c:	b29a      	uxth	r2, r3
 800937e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	e02d      	b.n	80093e2 <USB_EPStartXfer+0x12a0>
 8009386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	785b      	ldrb	r3, [r3, #1]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d125      	bne.n	80093e2 <USB_EPStartXfer+0x12a0>
 8009396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800939a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093ac:	4413      	add	r3, r2
 80093ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80093b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	00da      	lsls	r2, r3, #3
 80093c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093c4:	4413      	add	r3, r2
 80093c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	b29a      	uxth	r2, r3
 80093dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80093e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 8218 	beq.w	8009824 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80093f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009414:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <USB_EPStartXfer+0x12ea>
 8009420:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10d      	bne.n	8009448 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800942c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009434:	2b00      	cmp	r3, #0
 8009436:	f040 81f5 	bne.w	8009824 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800943a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800943e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009442:	2b00      	cmp	r3, #0
 8009444:	f040 81ee 	bne.w	8009824 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	b29b      	uxth	r3, r3
 8009466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800946a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	441a      	add	r2, r3
 800948c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800949c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	8013      	strh	r3, [r2, #0]
 80094a4:	e1be      	b.n	8009824 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80094a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	78db      	ldrb	r3, [r3, #3]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	f040 81b4 	bne.w	8009820 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80094b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	699a      	ldr	r2, [r3, #24]
 80094c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d917      	bls.n	8009504 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80094d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80094e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	699a      	ldr	r2, [r3, #24]
 80094f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f4:	1ad2      	subs	r2, r2, r3
 80094f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	619a      	str	r2, [r3, #24]
 8009502:	e00e      	b.n	8009522 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2200      	movs	r2, #0
 8009520:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	785b      	ldrb	r3, [r3, #1]
 800952e:	2b00      	cmp	r3, #0
 8009530:	f040 8085 	bne.w	800963e <USB_EPStartXfer+0x14fc>
 8009534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009550:	b29b      	uxth	r3, r3
 8009552:	461a      	mov	r2, r3
 8009554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009558:	4413      	add	r3, r2
 800955a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800955e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	00da      	lsls	r2, r3, #3
 800956c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009570:	4413      	add	r3, r2
 8009572:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800957a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	b29b      	uxth	r3, r3
 8009582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009586:	b29a      	uxth	r2, r3
 8009588:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800958c:	801a      	strh	r2, [r3, #0]
 800958e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009592:	2b3e      	cmp	r3, #62	; 0x3e
 8009594:	d923      	bls.n	80095de <USB_EPStartXfer+0x149c>
 8009596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800959a:	095b      	lsrs	r3, r3, #5
 800959c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a4:	f003 031f 	and.w	r3, r3, #31
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d104      	bne.n	80095b6 <USB_EPStartXfer+0x1474>
 80095ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095b0:	3b01      	subs	r3, #1
 80095b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	b29a      	uxth	r2, r3
 80095be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	029b      	lsls	r3, r3, #10
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	4313      	orrs	r3, r2
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e060      	b.n	80096a0 <USB_EPStartXfer+0x155e>
 80095de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10c      	bne.n	8009600 <USB_EPStartXfer+0x14be>
 80095e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095fc:	801a      	strh	r2, [r3, #0]
 80095fe:	e04f      	b.n	80096a0 <USB_EPStartXfer+0x155e>
 8009600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009604:	085b      	lsrs	r3, r3, #1
 8009606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800960a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d004      	beq.n	8009620 <USB_EPStartXfer+0x14de>
 8009616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800961a:	3301      	adds	r3, #1
 800961c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29a      	uxth	r2, r3
 8009628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800962c:	b29b      	uxth	r3, r3
 800962e:	029b      	lsls	r3, r3, #10
 8009630:	b29b      	uxth	r3, r3
 8009632:	4313      	orrs	r3, r2
 8009634:	b29a      	uxth	r2, r3
 8009636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800963a:	801a      	strh	r2, [r3, #0]
 800963c:	e030      	b.n	80096a0 <USB_EPStartXfer+0x155e>
 800963e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	785b      	ldrb	r3, [r3, #1]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d128      	bne.n	80096a0 <USB_EPStartXfer+0x155e>
 800964e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800965c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800966a:	b29b      	uxth	r3, r3
 800966c:	461a      	mov	r2, r3
 800966e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009672:	4413      	add	r3, r2
 8009674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800967c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	00da      	lsls	r2, r3, #3
 8009686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800968a:	4413      	add	r3, r2
 800968c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009698:	b29a      	uxth	r2, r3
 800969a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f040 8085 	bne.w	80097ca <USB_EPStartXfer+0x1688>
 80096c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096dc:	b29b      	uxth	r3, r3
 80096de:	461a      	mov	r2, r3
 80096e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096e4:	4413      	add	r3, r2
 80096e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	00da      	lsls	r2, r3, #3
 80096f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096fc:	4413      	add	r3, r2
 80096fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009702:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	b29b      	uxth	r3, r3
 800970e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009712:	b29a      	uxth	r2, r3
 8009714:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009718:	801a      	strh	r2, [r3, #0]
 800971a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800971e:	2b3e      	cmp	r3, #62	; 0x3e
 8009720:	d923      	bls.n	800976a <USB_EPStartXfer+0x1628>
 8009722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800972c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009730:	f003 031f 	and.w	r3, r3, #31
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <USB_EPStartXfer+0x1600>
 8009738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800973c:	3b01      	subs	r3, #1
 800973e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	b29a      	uxth	r2, r3
 800974a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800974e:	b29b      	uxth	r3, r3
 8009750:	029b      	lsls	r3, r3, #10
 8009752:	b29b      	uxth	r3, r3
 8009754:	4313      	orrs	r3, r2
 8009756:	b29b      	uxth	r3, r3
 8009758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800975c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009760:	b29a      	uxth	r2, r3
 8009762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009766:	801a      	strh	r2, [r3, #0]
 8009768:	e05c      	b.n	8009824 <USB_EPStartXfer+0x16e2>
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10c      	bne.n	800978c <USB_EPStartXfer+0x164a>
 8009772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	b29b      	uxth	r3, r3
 800977a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800977e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009782:	b29a      	uxth	r2, r3
 8009784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009788:	801a      	strh	r2, [r3, #0]
 800978a:	e04b      	b.n	8009824 <USB_EPStartXfer+0x16e2>
 800978c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009790:	085b      	lsrs	r3, r3, #1
 8009792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d004      	beq.n	80097ac <USB_EPStartXfer+0x166a>
 80097a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097a6:	3301      	adds	r3, #1
 80097a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	029b      	lsls	r3, r3, #10
 80097bc:	b29b      	uxth	r3, r3
 80097be:	4313      	orrs	r3, r2
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097c6:	801a      	strh	r2, [r3, #0]
 80097c8:	e02c      	b.n	8009824 <USB_EPStartXfer+0x16e2>
 80097ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d124      	bne.n	8009824 <USB_EPStartXfer+0x16e2>
 80097da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	461a      	mov	r2, r3
 80097ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097f0:	4413      	add	r3, r2
 80097f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	00da      	lsls	r2, r3, #3
 8009804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009808:	4413      	add	r3, r2
 800980a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800980e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009816:	b29a      	uxth	r2, r3
 8009818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800981c:	801a      	strh	r2, [r3, #0]
 800981e:	e001      	b.n	8009824 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e03a      	b.n	800989a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b29b      	uxth	r3, r3
 8009842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800984e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009852:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009856:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800985a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800985e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009862:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	441a      	add	r2, r3
 8009880:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800988c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009894:	b29b      	uxth	r3, r3
 8009896:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	785b      	ldrb	r3, [r3, #1]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d020      	beq.n	80098f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098cc:	81bb      	strh	r3, [r7, #12]
 80098ce:	89bb      	ldrh	r3, [r7, #12]
 80098d0:	f083 0310 	eor.w	r3, r3, #16
 80098d4:	81bb      	strh	r3, [r7, #12]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	441a      	add	r2, r3
 80098e0:	89bb      	ldrh	r3, [r7, #12]
 80098e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	8013      	strh	r3, [r2, #0]
 80098f6:	e01f      	b.n	8009938 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	b29b      	uxth	r3, r3
 8009906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800990a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990e:	81fb      	strh	r3, [r7, #14]
 8009910:	89fb      	ldrh	r3, [r7, #14]
 8009912:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009916:	81fb      	strh	r3, [r7, #14]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	441a      	add	r2, r3
 8009922:	89fb      	ldrh	r3, [r7, #14]
 8009924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009934:	b29b      	uxth	r3, r3
 8009936:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009946:	b480      	push	{r7}
 8009948:	b087      	sub	sp, #28
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	7b1b      	ldrb	r3, [r3, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	f040 809d 	bne.w	8009a94 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	785b      	ldrb	r3, [r3, #1]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d04c      	beq.n	80099fc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	823b      	strh	r3, [r7, #16]
 8009970:	8a3b      	ldrh	r3, [r7, #16]
 8009972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01b      	beq.n	80099b2 <USB_EPClearStall+0x6c>
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800998c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009990:	81fb      	strh	r3, [r7, #14]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	441a      	add	r2, r3
 800999c:	89fb      	ldrh	r3, [r7, #14]
 800999e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	78db      	ldrb	r3, [r3, #3]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d06c      	beq.n	8009a94 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099d0:	81bb      	strh	r3, [r7, #12]
 80099d2:	89bb      	ldrh	r3, [r7, #12]
 80099d4:	f083 0320 	eor.w	r3, r3, #32
 80099d8:	81bb      	strh	r3, [r7, #12]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	441a      	add	r2, r3
 80099e4:	89bb      	ldrh	r3, [r7, #12]
 80099e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	8013      	strh	r3, [r2, #0]
 80099fa:	e04b      	b.n	8009a94 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	82fb      	strh	r3, [r7, #22]
 8009a0a:	8afb      	ldrh	r3, [r7, #22]
 8009a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d01b      	beq.n	8009a4c <USB_EPClearStall+0x106>
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2a:	82bb      	strh	r3, [r7, #20]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	441a      	add	r2, r3
 8009a36:	8abb      	ldrh	r3, [r7, #20]
 8009a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a62:	827b      	strh	r3, [r7, #18]
 8009a64:	8a7b      	ldrh	r3, [r7, #18]
 8009a66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a6a:	827b      	strh	r3, [r7, #18]
 8009a6c:	8a7b      	ldrh	r3, [r7, #18]
 8009a6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a72:	827b      	strh	r3, [r7, #18]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	441a      	add	r2, r3
 8009a7e:	8a7b      	ldrh	r3, [r7, #18]
 8009a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009aae:	78fb      	ldrb	r3, [r7, #3]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d103      	bne.n	8009abc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2280      	movs	r2, #128	; 0x80
 8009ab8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b085      	sub	sp, #20
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009b34:	68fb      	ldr	r3, [r7, #12]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b083      	sub	sp, #12
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b08b      	sub	sp, #44	; 0x2c
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	4611      	mov	r1, r2
 8009b66:	461a      	mov	r2, r3
 8009b68:	460b      	mov	r3, r1
 8009b6a:	80fb      	strh	r3, [r7, #6]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009b70:	88bb      	ldrh	r3, [r7, #4]
 8009b72:	3301      	adds	r3, #1
 8009b74:	085b      	lsrs	r3, r3, #1
 8009b76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b80:	88fa      	ldrh	r2, [r7, #6]
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b8a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b90:	e01b      	b.n	8009bca <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	b21a      	sxth	r2, r3
 8009ba2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	b21b      	sxth	r3, r3
 8009baa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	8a7a      	ldrh	r2, [r7, #18]
 8009bb0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	3302      	adds	r3, #2
 8009bb6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1e0      	bne.n	8009b92 <USB_WritePMA+0x38>
  }
}
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	372c      	adds	r7, #44	; 0x2c
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b08b      	sub	sp, #44	; 0x2c
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	60f8      	str	r0, [r7, #12]
 8009be6:	60b9      	str	r1, [r7, #8]
 8009be8:	4611      	mov	r1, r2
 8009bea:	461a      	mov	r2, r3
 8009bec:	460b      	mov	r3, r1
 8009bee:	80fb      	strh	r3, [r7, #6]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009bf4:	88bb      	ldrh	r3, [r7, #4]
 8009bf6:	085b      	lsrs	r3, r3, #1
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c04:	88fa      	ldrh	r2, [r7, #6]
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c0e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	627b      	str	r3, [r7, #36]	; 0x24
 8009c14:	e018      	b.n	8009c48 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	3302      	adds	r3, #2
 8009c22:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	0a1b      	lsrs	r3, r3, #8
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	3b01      	subs	r3, #1
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e3      	bne.n	8009c16 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009c4e:	88bb      	ldrh	r3, [r7, #4]
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	701a      	strb	r2, [r3, #0]
  }
}
 8009c6a:	bf00      	nop
 8009c6c:	372c      	adds	r7, #44	; 0x2c
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
	...

08009c78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	460b      	mov	r3, r1
 8009c82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009c88:	f002 fd0c 	bl	800c6a4 <USBD_static_malloc>
 8009c8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d109      	bne.n	8009ca8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	32b0      	adds	r2, #176	; 0xb0
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e0d4      	b.n	8009e52 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ca8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009cac:	2100      	movs	r1, #0
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f003 fb92 	bl	800d3d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	32b0      	adds	r2, #176	; 0xb0
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	32b0      	adds	r2, #176	; 0xb0
 8009cce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	7c1b      	ldrb	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d138      	bne.n	8009d52 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009ce0:	4b5e      	ldr	r3, [pc, #376]	; (8009e5c <USBD_CDC_Init+0x1e4>)
 8009ce2:	7819      	ldrb	r1, [r3, #0]
 8009ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ce8:	2202      	movs	r2, #2
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f002 fadc 	bl	800c2a8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009cf0:	4b5a      	ldr	r3, [pc, #360]	; (8009e5c <USBD_CDC_Init+0x1e4>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	f003 020f 	and.w	r2, r3, #15
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	3324      	adds	r3, #36	; 0x24
 8009d06:	2201      	movs	r2, #1
 8009d08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d0a:	4b55      	ldr	r3, [pc, #340]	; (8009e60 <USBD_CDC_Init+0x1e8>)
 8009d0c:	7819      	ldrb	r1, [r3, #0]
 8009d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d12:	2202      	movs	r2, #2
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f002 fac7 	bl	800c2a8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d1a:	4b51      	ldr	r3, [pc, #324]	; (8009e60 <USBD_CDC_Init+0x1e8>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	f003 020f 	and.w	r2, r3, #15
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	440b      	add	r3, r1
 8009d2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d32:	2201      	movs	r2, #1
 8009d34:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009d36:	4b4b      	ldr	r3, [pc, #300]	; (8009e64 <USBD_CDC_Init+0x1ec>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	f003 020f 	and.w	r2, r3, #15
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	4613      	mov	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	3326      	adds	r3, #38	; 0x26
 8009d4c:	2210      	movs	r2, #16
 8009d4e:	801a      	strh	r2, [r3, #0]
 8009d50:	e035      	b.n	8009dbe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d52:	4b42      	ldr	r3, [pc, #264]	; (8009e5c <USBD_CDC_Init+0x1e4>)
 8009d54:	7819      	ldrb	r1, [r3, #0]
 8009d56:	2340      	movs	r3, #64	; 0x40
 8009d58:	2202      	movs	r2, #2
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f002 faa4 	bl	800c2a8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d60:	4b3e      	ldr	r3, [pc, #248]	; (8009e5c <USBD_CDC_Init+0x1e4>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	f003 020f 	and.w	r2, r3, #15
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	440b      	add	r3, r1
 8009d74:	3324      	adds	r3, #36	; 0x24
 8009d76:	2201      	movs	r2, #1
 8009d78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d7a:	4b39      	ldr	r3, [pc, #228]	; (8009e60 <USBD_CDC_Init+0x1e8>)
 8009d7c:	7819      	ldrb	r1, [r3, #0]
 8009d7e:	2340      	movs	r3, #64	; 0x40
 8009d80:	2202      	movs	r2, #2
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f002 fa90 	bl	800c2a8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d88:	4b35      	ldr	r3, [pc, #212]	; (8009e60 <USBD_CDC_Init+0x1e8>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	f003 020f 	and.w	r2, r3, #15
 8009d90:	6879      	ldr	r1, [r7, #4]
 8009d92:	4613      	mov	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	440b      	add	r3, r1
 8009d9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009da0:	2201      	movs	r2, #1
 8009da2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009da4:	4b2f      	ldr	r3, [pc, #188]	; (8009e64 <USBD_CDC_Init+0x1ec>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	f003 020f 	and.w	r2, r3, #15
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	440b      	add	r3, r1
 8009db8:	3326      	adds	r3, #38	; 0x26
 8009dba:	2210      	movs	r2, #16
 8009dbc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009dbe:	4b29      	ldr	r3, [pc, #164]	; (8009e64 <USBD_CDC_Init+0x1ec>)
 8009dc0:	7819      	ldrb	r1, [r3, #0]
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	2203      	movs	r2, #3
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f002 fa6e 	bl	800c2a8 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009dcc:	4b25      	ldr	r3, [pc, #148]	; (8009e64 <USBD_CDC_Init+0x1ec>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f003 020f 	and.w	r2, r3, #15
 8009dd4:	6879      	ldr	r1, [r7, #4]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	440b      	add	r3, r1
 8009de0:	3324      	adds	r3, #36	; 0x24
 8009de2:	2201      	movs	r2, #1
 8009de4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	33b0      	adds	r3, #176	; 0xb0
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	e018      	b.n	8009e52 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	7c1b      	ldrb	r3, [r3, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e28:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <USBD_CDC_Init+0x1e8>)
 8009e2a:	7819      	ldrb	r1, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f002 fbb2 	bl	800c5a0 <USBD_LL_PrepareReceive>
 8009e3c:	e008      	b.n	8009e50 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e3e:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <USBD_CDC_Init+0x1e8>)
 8009e40:	7819      	ldrb	r1, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e48:	2340      	movs	r3, #64	; 0x40
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f002 fba8 	bl	800c5a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20000093 	.word	0x20000093
 8009e60:	20000094 	.word	0x20000094
 8009e64:	20000095 	.word	0x20000095

08009e68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009e74:	4b3a      	ldr	r3, [pc, #232]	; (8009f60 <USBD_CDC_DeInit+0xf8>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f002 fa52 	bl	800c324 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009e80:	4b37      	ldr	r3, [pc, #220]	; (8009f60 <USBD_CDC_DeInit+0xf8>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	f003 020f 	and.w	r2, r3, #15
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4413      	add	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	440b      	add	r3, r1
 8009e94:	3324      	adds	r3, #36	; 0x24
 8009e96:	2200      	movs	r2, #0
 8009e98:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e9a:	4b32      	ldr	r3, [pc, #200]	; (8009f64 <USBD_CDC_DeInit+0xfc>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f002 fa3f 	bl	800c324 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009ea6:	4b2f      	ldr	r3, [pc, #188]	; (8009f64 <USBD_CDC_DeInit+0xfc>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	f003 020f 	and.w	r2, r3, #15
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	440b      	add	r3, r1
 8009eba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009ec2:	4b29      	ldr	r3, [pc, #164]	; (8009f68 <USBD_CDC_DeInit+0x100>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f002 fa2b 	bl	800c324 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009ece:	4b26      	ldr	r3, [pc, #152]	; (8009f68 <USBD_CDC_DeInit+0x100>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	f003 020f 	and.w	r2, r3, #15
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	3324      	adds	r3, #36	; 0x24
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009ee8:	4b1f      	ldr	r3, [pc, #124]	; (8009f68 <USBD_CDC_DeInit+0x100>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	f003 020f 	and.w	r2, r3, #15
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	440b      	add	r3, r1
 8009efc:	3326      	adds	r3, #38	; 0x26
 8009efe:	2200      	movs	r2, #0
 8009f00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	32b0      	adds	r2, #176	; 0xb0
 8009f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01f      	beq.n	8009f54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	33b0      	adds	r3, #176	; 0xb0
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	32b0      	adds	r2, #176	; 0xb0
 8009f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f002 fbc2 	bl	800c6c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	32b0      	adds	r2, #176	; 0xb0
 8009f46:	2100      	movs	r1, #0
 8009f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000093 	.word	0x20000093
 8009f64:	20000094 	.word	0x20000094
 8009f68:	20000095 	.word	0x20000095

08009f6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	32b0      	adds	r2, #176	; 0xb0
 8009f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e0bf      	b.n	800a11c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d050      	beq.n	800a04a <USBD_CDC_Setup+0xde>
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	f040 80af 	bne.w	800a10c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	88db      	ldrh	r3, [r3, #6]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d03a      	beq.n	800a02c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	b25b      	sxtb	r3, r3
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	da1b      	bge.n	8009ff8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	33b0      	adds	r3, #176	; 0xb0
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009fd6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	88d2      	ldrh	r2, [r2, #6]
 8009fdc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	88db      	ldrh	r3, [r3, #6]
 8009fe2:	2b07      	cmp	r3, #7
 8009fe4:	bf28      	it	cs
 8009fe6:	2307      	movcs	r3, #7
 8009fe8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	89fa      	ldrh	r2, [r7, #14]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 fd21 	bl	800ba38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009ff6:	e090      	b.n	800a11a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	785a      	ldrb	r2, [r3, #1]
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	88db      	ldrh	r3, [r3, #6]
 800a006:	2b3f      	cmp	r3, #63	; 0x3f
 800a008:	d803      	bhi.n	800a012 <USBD_CDC_Setup+0xa6>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	88db      	ldrh	r3, [r3, #6]
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	e000      	b.n	800a014 <USBD_CDC_Setup+0xa8>
 800a012:	2240      	movs	r2, #64	; 0x40
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a01a:	6939      	ldr	r1, [r7, #16]
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a022:	461a      	mov	r2, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 fd33 	bl	800ba90 <USBD_CtlPrepareRx>
      break;
 800a02a:	e076      	b.n	800a11a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	33b0      	adds	r3, #176	; 0xb0
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	7850      	ldrb	r0, [r2, #1]
 800a042:	2200      	movs	r2, #0
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	4798      	blx	r3
      break;
 800a048:	e067      	b.n	800a11a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	785b      	ldrb	r3, [r3, #1]
 800a04e:	2b0b      	cmp	r3, #11
 800a050:	d851      	bhi.n	800a0f6 <USBD_CDC_Setup+0x18a>
 800a052:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <USBD_CDC_Setup+0xec>)
 800a054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a058:	0800a089 	.word	0x0800a089
 800a05c:	0800a105 	.word	0x0800a105
 800a060:	0800a0f7 	.word	0x0800a0f7
 800a064:	0800a0f7 	.word	0x0800a0f7
 800a068:	0800a0f7 	.word	0x0800a0f7
 800a06c:	0800a0f7 	.word	0x0800a0f7
 800a070:	0800a0f7 	.word	0x0800a0f7
 800a074:	0800a0f7 	.word	0x0800a0f7
 800a078:	0800a0f7 	.word	0x0800a0f7
 800a07c:	0800a0f7 	.word	0x0800a0f7
 800a080:	0800a0b3 	.word	0x0800a0b3
 800a084:	0800a0dd 	.word	0x0800a0dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b03      	cmp	r3, #3
 800a092:	d107      	bne.n	800a0a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a094:	f107 030a 	add.w	r3, r7, #10
 800a098:	2202      	movs	r2, #2
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 fccb 	bl	800ba38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0a2:	e032      	b.n	800a10a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 fc55 	bl	800b956 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	75fb      	strb	r3, [r7, #23]
          break;
 800a0b0:	e02b      	b.n	800a10a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d107      	bne.n	800a0ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a0be:	f107 030d 	add.w	r3, r7, #13
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 fcb6 	bl	800ba38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0cc:	e01d      	b.n	800a10a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 fc40 	bl	800b956 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	75fb      	strb	r3, [r7, #23]
          break;
 800a0da:	e016      	b.n	800a10a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	d00f      	beq.n	800a108 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 fc33 	bl	800b956 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a0f4:	e008      	b.n	800a108 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a0f6:	6839      	ldr	r1, [r7, #0]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 fc2c 	bl	800b956 <USBD_CtlError>
          ret = USBD_FAIL;
 800a0fe:	2303      	movs	r3, #3
 800a100:	75fb      	strb	r3, [r7, #23]
          break;
 800a102:	e002      	b.n	800a10a <USBD_CDC_Setup+0x19e>
          break;
 800a104:	bf00      	nop
 800a106:	e008      	b.n	800a11a <USBD_CDC_Setup+0x1ae>
          break;
 800a108:	bf00      	nop
      }
      break;
 800a10a:	e006      	b.n	800a11a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f001 fc21 	bl	800b956 <USBD_CtlError>
      ret = USBD_FAIL;
 800a114:	2303      	movs	r3, #3
 800a116:	75fb      	strb	r3, [r7, #23]
      break;
 800a118:	bf00      	nop
  }

  return (uint8_t)ret;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a136:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	32b0      	adds	r2, #176	; 0xb0
 800a142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e065      	b.n	800a21a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	32b0      	adds	r2, #176	; 0xb0
 800a158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a15e:	78fb      	ldrb	r3, [r7, #3]
 800a160:	f003 020f 	and.w	r2, r3, #15
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	440b      	add	r3, r1
 800a170:	3318      	adds	r3, #24
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d02f      	beq.n	800a1d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	f003 020f 	and.w	r2, r3, #15
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	4613      	mov	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	440b      	add	r3, r1
 800a18a:	3318      	adds	r3, #24
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	78fb      	ldrb	r3, [r7, #3]
 800a190:	f003 010f 	and.w	r1, r3, #15
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	460b      	mov	r3, r1
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	00db      	lsls	r3, r3, #3
 800a19e:	4403      	add	r3, r0
 800a1a0:	3338      	adds	r3, #56	; 0x38
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a1a8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d112      	bne.n	800a1d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	f003 020f 	and.w	r2, r3, #15
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3318      	adds	r3, #24
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a1ca:	78f9      	ldrb	r1, [r7, #3]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f002 f9ad 	bl	800c530 <USBD_LL_Transmit>
 800a1d6:	e01f      	b.n	800a218 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	33b0      	adds	r3, #176	; 0xb0
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d010      	beq.n	800a218 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	33b0      	adds	r3, #176	; 0xb0
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a214:	78fa      	ldrb	r2, [r7, #3]
 800a216:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	460b      	mov	r3, r1
 800a22c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	32b0      	adds	r2, #176	; 0xb0
 800a238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	32b0      	adds	r2, #176	; 0xb0
 800a248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a250:	2303      	movs	r3, #3
 800a252:	e01a      	b.n	800a28a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f002 f9d9 	bl	800c610 <USBD_LL_GetRxDataSize>
 800a25e:	4602      	mov	r2, r0
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	33b0      	adds	r3, #176	; 0xb0
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a284:	4611      	mov	r1, r2
 800a286:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	32b0      	adds	r2, #176	; 0xb0
 800a2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e025      	b.n	800a300 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	33b0      	adds	r3, #176	; 0xb0
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d01a      	beq.n	800a2fe <USBD_CDC_EP0_RxReady+0x6c>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a2ce:	2bff      	cmp	r3, #255	; 0xff
 800a2d0:	d015      	beq.n	800a2fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	33b0      	adds	r3, #176	; 0xb0
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a2ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a2f2:	b292      	uxth	r2, r2
 800a2f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	22ff      	movs	r2, #255	; 0xff
 800a2fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a310:	2182      	movs	r1, #130	; 0x82
 800a312:	4818      	ldr	r0, [pc, #96]	; (800a374 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a314:	f000 fcbd 	bl	800ac92 <USBD_GetEpDesc>
 800a318:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a31a:	2101      	movs	r1, #1
 800a31c:	4815      	ldr	r0, [pc, #84]	; (800a374 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a31e:	f000 fcb8 	bl	800ac92 <USBD_GetEpDesc>
 800a322:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a324:	2181      	movs	r1, #129	; 0x81
 800a326:	4813      	ldr	r0, [pc, #76]	; (800a374 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a328:	f000 fcb3 	bl	800ac92 <USBD_GetEpDesc>
 800a32c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2210      	movs	r2, #16
 800a338:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d006      	beq.n	800a34e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	2200      	movs	r2, #0
 800a344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a348:	711a      	strb	r2, [r3, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d006      	beq.n	800a362 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a35c:	711a      	strb	r2, [r3, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2243      	movs	r2, #67	; 0x43
 800a366:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a368:	4b02      	ldr	r3, [pc, #8]	; (800a374 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000050 	.word	0x20000050

0800a378 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a380:	2182      	movs	r1, #130	; 0x82
 800a382:	4818      	ldr	r0, [pc, #96]	; (800a3e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a384:	f000 fc85 	bl	800ac92 <USBD_GetEpDesc>
 800a388:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a38a:	2101      	movs	r1, #1
 800a38c:	4815      	ldr	r0, [pc, #84]	; (800a3e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a38e:	f000 fc80 	bl	800ac92 <USBD_GetEpDesc>
 800a392:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a394:	2181      	movs	r1, #129	; 0x81
 800a396:	4813      	ldr	r0, [pc, #76]	; (800a3e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a398:	f000 fc7b 	bl	800ac92 <USBD_GetEpDesc>
 800a39c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2210      	movs	r2, #16
 800a3a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d006      	beq.n	800a3be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	711a      	strb	r2, [r3, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f042 0202 	orr.w	r2, r2, #2
 800a3bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d006      	beq.n	800a3d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	711a      	strb	r2, [r3, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f042 0202 	orr.w	r2, r2, #2
 800a3d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2243      	movs	r2, #67	; 0x43
 800a3d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3d8:	4b02      	ldr	r3, [pc, #8]	; (800a3e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20000050 	.word	0x20000050

0800a3e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3f0:	2182      	movs	r1, #130	; 0x82
 800a3f2:	4818      	ldr	r0, [pc, #96]	; (800a454 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3f4:	f000 fc4d 	bl	800ac92 <USBD_GetEpDesc>
 800a3f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	4815      	ldr	r0, [pc, #84]	; (800a454 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3fe:	f000 fc48 	bl	800ac92 <USBD_GetEpDesc>
 800a402:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a404:	2181      	movs	r1, #129	; 0x81
 800a406:	4813      	ldr	r0, [pc, #76]	; (800a454 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a408:	f000 fc43 	bl	800ac92 <USBD_GetEpDesc>
 800a40c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	2210      	movs	r2, #16
 800a418:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d006      	beq.n	800a42e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	2200      	movs	r2, #0
 800a424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a428:	711a      	strb	r2, [r3, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d006      	beq.n	800a442 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a43c:	711a      	strb	r2, [r3, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2243      	movs	r2, #67	; 0x43
 800a446:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a448:	4b02      	ldr	r3, [pc, #8]	; (800a454 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20000050 	.word	0x20000050

0800a458 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	220a      	movs	r2, #10
 800a464:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a466:	4b03      	ldr	r3, [pc, #12]	; (800a474 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	2000000c 	.word	0x2000000c

0800a478 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a488:	2303      	movs	r3, #3
 800a48a:	e009      	b.n	800a4a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	33b0      	adds	r3, #176	; 0xb0
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	32b0      	adds	r2, #176	; 0xb0
 800a4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	e008      	b.n	800a4e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	32b0      	adds	r2, #176	; 0xb0
 800a504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a508:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a510:	2303      	movs	r3, #3
 800a512:	e004      	b.n	800a51e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
	...

0800a52c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	32b0      	adds	r2, #176	; 0xb0
 800a53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a542:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a544:	2301      	movs	r3, #1
 800a546:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a54e:	2303      	movs	r3, #3
 800a550:	e025      	b.n	800a59e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d11f      	bne.n	800a59c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2201      	movs	r2, #1
 800a560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a564:	4b10      	ldr	r3, [pc, #64]	; (800a5a8 <USBD_CDC_TransmitPacket+0x7c>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	f003 020f 	and.w	r2, r3, #15
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4403      	add	r3, r0
 800a57e:	3318      	adds	r3, #24
 800a580:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a582:	4b09      	ldr	r3, [pc, #36]	; (800a5a8 <USBD_CDC_TransmitPacket+0x7c>)
 800a584:	7819      	ldrb	r1, [r3, #0]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f001 ffcc 	bl	800c530 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000093 	.word	0x20000093

0800a5ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	32b0      	adds	r2, #176	; 0xb0
 800a5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	32b0      	adds	r2, #176	; 0xb0
 800a5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	e018      	b.n	800a60c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	7c1b      	ldrb	r3, [r3, #16]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10a      	bne.n	800a5f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5e2:	4b0c      	ldr	r3, [pc, #48]	; (800a614 <USBD_CDC_ReceivePacket+0x68>)
 800a5e4:	7819      	ldrb	r1, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f001 ffd5 	bl	800c5a0 <USBD_LL_PrepareReceive>
 800a5f6:	e008      	b.n	800a60a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a5f8:	4b06      	ldr	r3, [pc, #24]	; (800a614 <USBD_CDC_ReceivePacket+0x68>)
 800a5fa:	7819      	ldrb	r1, [r3, #0]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a602:	2340      	movs	r3, #64	; 0x40
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 ffcb 	bl	800c5a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	20000094 	.word	0x20000094

0800a618 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	4613      	mov	r3, r2
 800a624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e01f      	b.n	800a670 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	79fa      	ldrb	r2, [r7, #7]
 800a662:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f001 fd8b 	bl	800c180 <USBD_LL_Init>
 800a66a:	4603      	mov	r3, r0
 800a66c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a682:	2300      	movs	r3, #0
 800a684:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e025      	b.n	800a6dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	32ae      	adds	r2, #174	; 0xae
 800a6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00f      	beq.n	800a6cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	32ae      	adds	r2, #174	; 0xae
 800a6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	f107 020e 	add.w	r2, r7, #14
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	4798      	blx	r3
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f001 fda9 	bl	800c244 <USBD_LL_Start>
 800a6f2:	4603      	mov	r3, r0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a704:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a706:	4618      	mov	r0, r3
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b084      	sub	sp, #16
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	460b      	mov	r3, r1
 800a71c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d009      	beq.n	800a740 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	78fa      	ldrb	r2, [r7, #3]
 800a736:	4611      	mov	r1, r2
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	4798      	blx	r3
 800a73c:	4603      	mov	r3, r0
 800a73e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	78fa      	ldrb	r2, [r7, #3]
 800a764:	4611      	mov	r1, r2
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a770:	2303      	movs	r3, #3
 800a772:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a774:	7bfb      	ldrb	r3, [r7, #15]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a78e:	6839      	ldr	r1, [r7, #0]
 800a790:	4618      	mov	r0, r3
 800a792:	f001 f8a6 	bl	800b8e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a7b2:	f003 031f 	and.w	r3, r3, #31
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d01a      	beq.n	800a7f0 <USBD_LL_SetupStage+0x72>
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d822      	bhi.n	800a804 <USBD_LL_SetupStage+0x86>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <USBD_LL_SetupStage+0x4a>
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d00a      	beq.n	800a7dc <USBD_LL_SetupStage+0x5e>
 800a7c6:	e01d      	b.n	800a804 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fad3 	bl	800ad7c <USBD_StdDevReq>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7da:	e020      	b.n	800a81e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fb3b 	bl	800ae60 <USBD_StdItfReq>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ee:	e016      	b.n	800a81e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fb9d 	bl	800af38 <USBD_StdEPReq>
 800a7fe:	4603      	mov	r3, r0
 800a800:	73fb      	strb	r3, [r7, #15]
      break;
 800a802:	e00c      	b.n	800a81e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a80a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 fdbc 	bl	800c390 <USBD_LL_StallEP>
 800a818:	4603      	mov	r3, r0
 800a81a:	73fb      	strb	r3, [r7, #15]
      break;
 800a81c:	bf00      	nop
  }

  return ret;
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	460b      	mov	r3, r1
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a83a:	7afb      	ldrb	r3, [r7, #11]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d16e      	bne.n	800a91e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a846:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a84e:	2b03      	cmp	r3, #3
 800a850:	f040 8098 	bne.w	800a984 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d913      	bls.n	800a888 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	1ad2      	subs	r2, r2, r3
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	68da      	ldr	r2, [r3, #12]
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	4293      	cmp	r3, r2
 800a878:	bf28      	it	cs
 800a87a:	4613      	movcs	r3, r2
 800a87c:	461a      	mov	r2, r3
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f001 f922 	bl	800baca <USBD_CtlContinueRx>
 800a886:	e07d      	b.n	800a984 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a88e:	f003 031f 	and.w	r3, r3, #31
 800a892:	2b02      	cmp	r3, #2
 800a894:	d014      	beq.n	800a8c0 <USBD_LL_DataOutStage+0x98>
 800a896:	2b02      	cmp	r3, #2
 800a898:	d81d      	bhi.n	800a8d6 <USBD_LL_DataOutStage+0xae>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d002      	beq.n	800a8a4 <USBD_LL_DataOutStage+0x7c>
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d003      	beq.n	800a8aa <USBD_LL_DataOutStage+0x82>
 800a8a2:	e018      	b.n	800a8d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	75bb      	strb	r3, [r7, #22]
            break;
 800a8a8:	e018      	b.n	800a8dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f000 f9d2 	bl	800ac5e <USBD_CoreFindIF>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	75bb      	strb	r3, [r7, #22]
            break;
 800a8be:	e00d      	b.n	800a8dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f000 f9d4 	bl	800ac78 <USBD_CoreFindEP>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	75bb      	strb	r3, [r7, #22]
            break;
 800a8d4:	e002      	b.n	800a8dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	75bb      	strb	r3, [r7, #22]
            break;
 800a8da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a8dc:	7dbb      	ldrb	r3, [r7, #22]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d119      	bne.n	800a916 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d113      	bne.n	800a916 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a8ee:	7dba      	ldrb	r2, [r7, #22]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	32ae      	adds	r2, #174	; 0xae
 800a8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00b      	beq.n	800a916 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a8fe:	7dba      	ldrb	r2, [r7, #22]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a906:	7dba      	ldrb	r2, [r7, #22]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	32ae      	adds	r2, #174	; 0xae
 800a90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f001 f8e8 	bl	800baec <USBD_CtlSendStatus>
 800a91c:	e032      	b.n	800a984 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a91e:	7afb      	ldrb	r3, [r7, #11]
 800a920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a924:	b2db      	uxtb	r3, r3
 800a926:	4619      	mov	r1, r3
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 f9a5 	bl	800ac78 <USBD_CoreFindEP>
 800a92e:	4603      	mov	r3, r0
 800a930:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a932:	7dbb      	ldrb	r3, [r7, #22]
 800a934:	2bff      	cmp	r3, #255	; 0xff
 800a936:	d025      	beq.n	800a984 <USBD_LL_DataOutStage+0x15c>
 800a938:	7dbb      	ldrb	r3, [r7, #22]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d122      	bne.n	800a984 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b03      	cmp	r3, #3
 800a948:	d117      	bne.n	800a97a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a94a:	7dba      	ldrb	r2, [r7, #22]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	32ae      	adds	r2, #174	; 0xae
 800a950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00f      	beq.n	800a97a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a95a:	7dba      	ldrb	r2, [r7, #22]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a962:	7dba      	ldrb	r2, [r7, #22]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	32ae      	adds	r2, #174	; 0xae
 800a968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	7afa      	ldrb	r2, [r7, #11]
 800a970:	4611      	mov	r1, r2
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	4798      	blx	r3
 800a976:	4603      	mov	r3, r0
 800a978:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a980:	7dfb      	ldrb	r3, [r7, #23]
 800a982:	e000      	b.n	800a986 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b086      	sub	sp, #24
 800a992:	af00      	add	r7, sp, #0
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	460b      	mov	r3, r1
 800a998:	607a      	str	r2, [r7, #4]
 800a99a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a99c:	7afb      	ldrb	r3, [r7, #11]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d16f      	bne.n	800aa82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3314      	adds	r3, #20
 800a9a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d15a      	bne.n	800aa68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	689a      	ldr	r2, [r3, #8]
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d914      	bls.n	800a9e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	689a      	ldr	r2, [r3, #8]
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	1ad2      	subs	r2, r2, r3
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	6879      	ldr	r1, [r7, #4]
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f001 f84a 	bl	800ba6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9da:	2300      	movs	r3, #0
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2100      	movs	r1, #0
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f001 fddd 	bl	800c5a0 <USBD_LL_PrepareReceive>
 800a9e6:	e03f      	b.n	800aa68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	68da      	ldr	r2, [r3, #12]
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d11c      	bne.n	800aa2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d316      	bcc.n	800aa2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d20f      	bcs.n	800aa2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2100      	movs	r1, #0
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f001 f82b 	bl	800ba6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa20:	2300      	movs	r3, #0
 800aa22:	2200      	movs	r2, #0
 800aa24:	2100      	movs	r1, #0
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f001 fdba 	bl	800c5a0 <USBD_LL_PrepareReceive>
 800aa2c:	e01c      	b.n	800aa68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d10f      	bne.n	800aa5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d009      	beq.n	800aa5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa5a:	2180      	movs	r1, #128	; 0x80
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f001 fc97 	bl	800c390 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f001 f855 	bl	800bb12 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d03a      	beq.n	800aae8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f7ff fe42 	bl	800a6fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa80:	e032      	b.n	800aae8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aa82:	7afb      	ldrb	r3, [r7, #11]
 800aa84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 f8f3 	bl	800ac78 <USBD_CoreFindEP>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	2bff      	cmp	r3, #255	; 0xff
 800aa9a:	d025      	beq.n	800aae8 <USBD_LL_DataInStage+0x15a>
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d122      	bne.n	800aae8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d11c      	bne.n	800aae8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aaae:	7dfa      	ldrb	r2, [r7, #23]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	32ae      	adds	r2, #174	; 0xae
 800aab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d014      	beq.n	800aae8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aabe:	7dfa      	ldrb	r2, [r7, #23]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aac6:	7dfa      	ldrb	r2, [r7, #23]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	32ae      	adds	r2, #174	; 0xae
 800aacc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	7afa      	ldrb	r2, [r7, #11]
 800aad4:	4611      	mov	r1, r2
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	4798      	blx	r3
 800aada:	4603      	mov	r3, r0
 800aadc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aade:	7dbb      	ldrb	r3, [r7, #22]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d001      	beq.n	800aae8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aae4:	7dbb      	ldrb	r3, [r7, #22]
 800aae6:	e000      	b.n	800aaea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3718      	adds	r7, #24
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d014      	beq.n	800ab58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00e      	beq.n	800ab58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6852      	ldr	r2, [r2, #4]
 800ab46:	b2d2      	uxtb	r2, r2
 800ab48:	4611      	mov	r1, r2
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	4798      	blx	r3
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ab54:	2303      	movs	r3, #3
 800ab56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab58:	2340      	movs	r3, #64	; 0x40
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 fba2 	bl	800c2a8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2240      	movs	r2, #64	; 0x40
 800ab70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	2200      	movs	r2, #0
 800ab78:	2180      	movs	r1, #128	; 0x80
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f001 fb94 	bl	800c2a8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2240      	movs	r2, #64	; 0x40
 800ab8a:	621a      	str	r2, [r3, #32]

  return ret;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	460b      	mov	r3, r1
 800aba0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	78fa      	ldrb	r2, [r7, #3]
 800aba6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b04      	cmp	r3, #4
 800abc8:	d006      	beq.n	800abd8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2204      	movs	r2, #4
 800abdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800abee:	b480      	push	{r7}
 800abf0:	b083      	sub	sp, #12
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d106      	bne.n	800ac10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b082      	sub	sp, #8
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d110      	bne.n	800ac54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00b      	beq.n	800ac54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d005      	beq.n	800ac54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4e:	69db      	ldr	r3, [r3, #28]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	460b      	mov	r3, r1
 800ac82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b086      	sub	sp, #24
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	885b      	ldrh	r3, [r3, #2]
 800acae:	b29a      	uxth	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d920      	bls.n	800acfc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800acc2:	e013      	b.n	800acec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800acc4:	f107 030a 	add.w	r3, r7, #10
 800acc8:	4619      	mov	r1, r3
 800acca:	6978      	ldr	r0, [r7, #20]
 800accc:	f000 f81b 	bl	800ad06 <USBD_GetNextDesc>
 800acd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	785b      	ldrb	r3, [r3, #1]
 800acd6:	2b05      	cmp	r3, #5
 800acd8:	d108      	bne.n	800acec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	789b      	ldrb	r3, [r3, #2]
 800ace2:	78fa      	ldrb	r2, [r7, #3]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d008      	beq.n	800acfa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ace8:	2300      	movs	r3, #0
 800acea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	885b      	ldrh	r3, [r3, #2]
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	897b      	ldrh	r3, [r7, #10]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d8e5      	bhi.n	800acc4 <USBD_GetEpDesc+0x32>
 800acf8:	e000      	b.n	800acfc <USBD_GetEpDesc+0x6a>
          break;
 800acfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800acfc:	693b      	ldr	r3, [r7, #16]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b085      	sub	sp, #20
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	881a      	ldrh	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	4413      	add	r3, r2
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad32:	68fb      	ldr	r3, [r7, #12]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	3301      	adds	r3, #1
 800ad56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad5e:	8a3b      	ldrh	r3, [r7, #16]
 800ad60:	021b      	lsls	r3, r3, #8
 800ad62:	b21a      	sxth	r2, r3
 800ad64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	b21b      	sxth	r3, r3
 800ad6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad6e:	89fb      	ldrh	r3, [r7, #14]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	371c      	adds	r7, #28
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad92:	2b40      	cmp	r3, #64	; 0x40
 800ad94:	d005      	beq.n	800ada2 <USBD_StdDevReq+0x26>
 800ad96:	2b40      	cmp	r3, #64	; 0x40
 800ad98:	d857      	bhi.n	800ae4a <USBD_StdDevReq+0xce>
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00f      	beq.n	800adbe <USBD_StdDevReq+0x42>
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d153      	bne.n	800ae4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	32ae      	adds	r2, #174	; 0xae
 800adac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	4798      	blx	r3
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
      break;
 800adbc:	e04a      	b.n	800ae54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	785b      	ldrb	r3, [r3, #1]
 800adc2:	2b09      	cmp	r3, #9
 800adc4:	d83b      	bhi.n	800ae3e <USBD_StdDevReq+0xc2>
 800adc6:	a201      	add	r2, pc, #4	; (adr r2, 800adcc <USBD_StdDevReq+0x50>)
 800adc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adcc:	0800ae21 	.word	0x0800ae21
 800add0:	0800ae35 	.word	0x0800ae35
 800add4:	0800ae3f 	.word	0x0800ae3f
 800add8:	0800ae2b 	.word	0x0800ae2b
 800addc:	0800ae3f 	.word	0x0800ae3f
 800ade0:	0800adff 	.word	0x0800adff
 800ade4:	0800adf5 	.word	0x0800adf5
 800ade8:	0800ae3f 	.word	0x0800ae3f
 800adec:	0800ae17 	.word	0x0800ae17
 800adf0:	0800ae09 	.word	0x0800ae09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fa3c 	bl	800b274 <USBD_GetDescriptor>
          break;
 800adfc:	e024      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fbcb 	bl	800b59c <USBD_SetAddress>
          break;
 800ae06:	e01f      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fc0a 	bl	800b624 <USBD_SetConfig>
 800ae10:	4603      	mov	r3, r0
 800ae12:	73fb      	strb	r3, [r7, #15]
          break;
 800ae14:	e018      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fcad 	bl	800b778 <USBD_GetConfig>
          break;
 800ae1e:	e013      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fcde 	bl	800b7e4 <USBD_GetStatus>
          break;
 800ae28:	e00e      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fd0d 	bl	800b84c <USBD_SetFeature>
          break;
 800ae32:	e009      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fd31 	bl	800b89e <USBD_ClrFeature>
          break;
 800ae3c:	e004      	b.n	800ae48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fd88 	bl	800b956 <USBD_CtlError>
          break;
 800ae46:	bf00      	nop
      }
      break;
 800ae48:	e004      	b.n	800ae54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fd82 	bl	800b956 <USBD_CtlError>
      break;
 800ae52:	bf00      	nop
  }

  return ret;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop

0800ae60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae76:	2b40      	cmp	r3, #64	; 0x40
 800ae78:	d005      	beq.n	800ae86 <USBD_StdItfReq+0x26>
 800ae7a:	2b40      	cmp	r3, #64	; 0x40
 800ae7c:	d852      	bhi.n	800af24 <USBD_StdItfReq+0xc4>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <USBD_StdItfReq+0x26>
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	d14e      	bne.n	800af24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d840      	bhi.n	800af16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	889b      	ldrh	r3, [r3, #4]
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d836      	bhi.n	800af0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	889b      	ldrh	r3, [r3, #4]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7ff fed9 	bl	800ac5e <USBD_CoreFindIF>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2bff      	cmp	r3, #255	; 0xff
 800aeb4:	d01d      	beq.n	800aef2 <USBD_StdItfReq+0x92>
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d11a      	bne.n	800aef2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aebc:	7bba      	ldrb	r2, [r7, #14]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	32ae      	adds	r2, #174	; 0xae
 800aec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00f      	beq.n	800aeec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aecc:	7bba      	ldrb	r2, [r7, #14]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aed4:	7bba      	ldrb	r2, [r7, #14]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	32ae      	adds	r2, #174	; 0xae
 800aeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
 800aee6:	4603      	mov	r3, r0
 800aee8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aeea:	e004      	b.n	800aef6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aeec:	2303      	movs	r3, #3
 800aeee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aef0:	e001      	b.n	800aef6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aef2:	2303      	movs	r3, #3
 800aef4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	88db      	ldrh	r3, [r3, #6]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d110      	bne.n	800af20 <USBD_StdItfReq+0xc0>
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10d      	bne.n	800af20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 fdf1 	bl	800baec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af0a:	e009      	b.n	800af20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fd21 	bl	800b956 <USBD_CtlError>
          break;
 800af14:	e004      	b.n	800af20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fd1c 	bl	800b956 <USBD_CtlError>
          break;
 800af1e:	e000      	b.n	800af22 <USBD_StdItfReq+0xc2>
          break;
 800af20:	bf00      	nop
      }
      break;
 800af22:	e004      	b.n	800af2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af24:	6839      	ldr	r1, [r7, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fd15 	bl	800b956 <USBD_CtlError>
      break;
 800af2c:	bf00      	nop
  }

  return ret;
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	889b      	ldrh	r3, [r3, #4]
 800af4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af54:	2b40      	cmp	r3, #64	; 0x40
 800af56:	d007      	beq.n	800af68 <USBD_StdEPReq+0x30>
 800af58:	2b40      	cmp	r3, #64	; 0x40
 800af5a:	f200 817f 	bhi.w	800b25c <USBD_StdEPReq+0x324>
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d02a      	beq.n	800afb8 <USBD_StdEPReq+0x80>
 800af62:	2b20      	cmp	r3, #32
 800af64:	f040 817a 	bne.w	800b25c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff fe83 	bl	800ac78 <USBD_CoreFindEP>
 800af72:	4603      	mov	r3, r0
 800af74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af76:	7b7b      	ldrb	r3, [r7, #13]
 800af78:	2bff      	cmp	r3, #255	; 0xff
 800af7a:	f000 8174 	beq.w	800b266 <USBD_StdEPReq+0x32e>
 800af7e:	7b7b      	ldrb	r3, [r7, #13]
 800af80:	2b00      	cmp	r3, #0
 800af82:	f040 8170 	bne.w	800b266 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af86:	7b7a      	ldrb	r2, [r7, #13]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af8e:	7b7a      	ldrb	r2, [r7, #13]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	32ae      	adds	r2, #174	; 0xae
 800af94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 8163 	beq.w	800b266 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afa0:	7b7a      	ldrb	r2, [r7, #13]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	32ae      	adds	r2, #174	; 0xae
 800afa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	4798      	blx	r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afb6:	e156      	b.n	800b266 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	785b      	ldrb	r3, [r3, #1]
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d008      	beq.n	800afd2 <USBD_StdEPReq+0x9a>
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	f300 8145 	bgt.w	800b250 <USBD_StdEPReq+0x318>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 809b 	beq.w	800b102 <USBD_StdEPReq+0x1ca>
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d03c      	beq.n	800b04a <USBD_StdEPReq+0x112>
 800afd0:	e13e      	b.n	800b250 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d002      	beq.n	800afe4 <USBD_StdEPReq+0xac>
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d016      	beq.n	800b010 <USBD_StdEPReq+0xd8>
 800afe2:	e02c      	b.n	800b03e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00d      	beq.n	800b006 <USBD_StdEPReq+0xce>
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b80      	cmp	r3, #128	; 0x80
 800afee:	d00a      	beq.n	800b006 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 f9cb 	bl	800c390 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800affa:	2180      	movs	r1, #128	; 0x80
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f001 f9c7 	bl	800c390 <USBD_LL_StallEP>
 800b002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b004:	e020      	b.n	800b048 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fca4 	bl	800b956 <USBD_CtlError>
              break;
 800b00e:	e01b      	b.n	800b048 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	885b      	ldrh	r3, [r3, #2]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10e      	bne.n	800b036 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00b      	beq.n	800b036 <USBD_StdEPReq+0xfe>
 800b01e:	7bbb      	ldrb	r3, [r7, #14]
 800b020:	2b80      	cmp	r3, #128	; 0x80
 800b022:	d008      	beq.n	800b036 <USBD_StdEPReq+0xfe>
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	88db      	ldrh	r3, [r3, #6]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d104      	bne.n	800b036 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 f9ad 	bl	800c390 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fd58 	bl	800baec <USBD_CtlSendStatus>

              break;
 800b03c:	e004      	b.n	800b048 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fc88 	bl	800b956 <USBD_CtlError>
              break;
 800b046:	bf00      	nop
          }
          break;
 800b048:	e107      	b.n	800b25a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b02      	cmp	r3, #2
 800b054:	d002      	beq.n	800b05c <USBD_StdEPReq+0x124>
 800b056:	2b03      	cmp	r3, #3
 800b058:	d016      	beq.n	800b088 <USBD_StdEPReq+0x150>
 800b05a:	e04b      	b.n	800b0f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00d      	beq.n	800b07e <USBD_StdEPReq+0x146>
 800b062:	7bbb      	ldrb	r3, [r7, #14]
 800b064:	2b80      	cmp	r3, #128	; 0x80
 800b066:	d00a      	beq.n	800b07e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 f98f 	bl	800c390 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b072:	2180      	movs	r1, #128	; 0x80
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f001 f98b 	bl	800c390 <USBD_LL_StallEP>
 800b07a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b07c:	e040      	b.n	800b100 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fc68 	bl	800b956 <USBD_CtlError>
              break;
 800b086:	e03b      	b.n	800b100 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	885b      	ldrh	r3, [r3, #2]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d136      	bne.n	800b0fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b090:	7bbb      	ldrb	r3, [r7, #14]
 800b092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b096:	2b00      	cmp	r3, #0
 800b098:	d004      	beq.n	800b0a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f001 f9ac 	bl	800c3fc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fd21 	bl	800baec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff fde2 	bl	800ac78 <USBD_CoreFindEP>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0b8:	7b7b      	ldrb	r3, [r7, #13]
 800b0ba:	2bff      	cmp	r3, #255	; 0xff
 800b0bc:	d01f      	beq.n	800b0fe <USBD_StdEPReq+0x1c6>
 800b0be:	7b7b      	ldrb	r3, [r7, #13]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d11c      	bne.n	800b0fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b0c4:	7b7a      	ldrb	r2, [r7, #13]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b0cc:	7b7a      	ldrb	r2, [r7, #13]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	32ae      	adds	r2, #174	; 0xae
 800b0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d010      	beq.n	800b0fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0dc:	7b7a      	ldrb	r2, [r7, #13]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	32ae      	adds	r2, #174	; 0xae
 800b0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0f2:	e004      	b.n	800b0fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fc2d 	bl	800b956 <USBD_CtlError>
              break;
 800b0fc:	e000      	b.n	800b100 <USBD_StdEPReq+0x1c8>
              break;
 800b0fe:	bf00      	nop
          }
          break;
 800b100:	e0ab      	b.n	800b25a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d002      	beq.n	800b114 <USBD_StdEPReq+0x1dc>
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d032      	beq.n	800b178 <USBD_StdEPReq+0x240>
 800b112:	e097      	b.n	800b244 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d007      	beq.n	800b12a <USBD_StdEPReq+0x1f2>
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	2b80      	cmp	r3, #128	; 0x80
 800b11e:	d004      	beq.n	800b12a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fc17 	bl	800b956 <USBD_CtlError>
                break;
 800b128:	e091      	b.n	800b24e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b12a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	da0b      	bge.n	800b14a <USBD_StdEPReq+0x212>
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b138:	4613      	mov	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	3310      	adds	r3, #16
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	4413      	add	r3, r2
 800b146:	3304      	adds	r3, #4
 800b148:	e00b      	b.n	800b162 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
 800b14c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	4413      	add	r3, r2
 800b160:	3304      	adds	r3, #4
 800b162:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2202      	movs	r2, #2
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fc61 	bl	800ba38 <USBD_CtlSendData>
              break;
 800b176:	e06a      	b.n	800b24e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	da11      	bge.n	800b1a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	f003 020f 	and.w	r2, r3, #15
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	4613      	mov	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	440b      	add	r3, r1
 800b192:	3324      	adds	r3, #36	; 0x24
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d117      	bne.n	800b1ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fbda 	bl	800b956 <USBD_CtlError>
                  break;
 800b1a2:	e054      	b.n	800b24e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
 800b1a6:	f003 020f 	and.w	r2, r3, #15
 800b1aa:	6879      	ldr	r1, [r7, #4]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	440b      	add	r3, r1
 800b1b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d104      	bne.n	800b1ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fbc7 	bl	800b956 <USBD_CtlError>
                  break;
 800b1c8:	e041      	b.n	800b24e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	da0b      	bge.n	800b1ea <USBD_StdEPReq+0x2b2>
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1d8:	4613      	mov	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	3310      	adds	r3, #16
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	e00b      	b.n	800b202 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
 800b1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	4413      	add	r3, r2
 800b200:	3304      	adds	r3, #4
 800b202:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <USBD_StdEPReq+0x2d8>
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
 800b20c:	2b80      	cmp	r3, #128	; 0x80
 800b20e:	d103      	bne.n	800b218 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	e00e      	b.n	800b236 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b218:	7bbb      	ldrb	r3, [r7, #14]
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f001 f923 	bl	800c468 <USBD_LL_IsStallEP>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d003      	beq.n	800b230 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2201      	movs	r2, #1
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	e002      	b.n	800b236 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2202      	movs	r2, #2
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fbfb 	bl	800ba38 <USBD_CtlSendData>
              break;
 800b242:	e004      	b.n	800b24e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fb85 	bl	800b956 <USBD_CtlError>
              break;
 800b24c:	bf00      	nop
          }
          break;
 800b24e:	e004      	b.n	800b25a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fb7f 	bl	800b956 <USBD_CtlError>
          break;
 800b258:	bf00      	nop
      }
      break;
 800b25a:	e005      	b.n	800b268 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fb79 	bl	800b956 <USBD_CtlError>
      break;
 800b264:	e000      	b.n	800b268 <USBD_StdEPReq+0x330>
      break;
 800b266:	bf00      	nop
  }

  return ret;
 800b268:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b27e:	2300      	movs	r3, #0
 800b280:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b282:	2300      	movs	r3, #0
 800b284:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b286:	2300      	movs	r3, #0
 800b288:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	885b      	ldrh	r3, [r3, #2]
 800b28e:	0a1b      	lsrs	r3, r3, #8
 800b290:	b29b      	uxth	r3, r3
 800b292:	3b01      	subs	r3, #1
 800b294:	2b0e      	cmp	r3, #14
 800b296:	f200 8152 	bhi.w	800b53e <USBD_GetDescriptor+0x2ca>
 800b29a:	a201      	add	r2, pc, #4	; (adr r2, 800b2a0 <USBD_GetDescriptor+0x2c>)
 800b29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a0:	0800b311 	.word	0x0800b311
 800b2a4:	0800b329 	.word	0x0800b329
 800b2a8:	0800b369 	.word	0x0800b369
 800b2ac:	0800b53f 	.word	0x0800b53f
 800b2b0:	0800b53f 	.word	0x0800b53f
 800b2b4:	0800b4df 	.word	0x0800b4df
 800b2b8:	0800b50b 	.word	0x0800b50b
 800b2bc:	0800b53f 	.word	0x0800b53f
 800b2c0:	0800b53f 	.word	0x0800b53f
 800b2c4:	0800b53f 	.word	0x0800b53f
 800b2c8:	0800b53f 	.word	0x0800b53f
 800b2cc:	0800b53f 	.word	0x0800b53f
 800b2d0:	0800b53f 	.word	0x0800b53f
 800b2d4:	0800b53f 	.word	0x0800b53f
 800b2d8:	0800b2dd 	.word	0x0800b2dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ee:	69db      	ldr	r3, [r3, #28]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	7c12      	ldrb	r2, [r2, #16]
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
 800b2fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2fe:	e126      	b.n	800b54e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fb27 	bl	800b956 <USBD_CtlError>
        err++;
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	3301      	adds	r3, #1
 800b30c:	72fb      	strb	r3, [r7, #11]
      break;
 800b30e:	e11e      	b.n	800b54e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7c12      	ldrb	r2, [r2, #16]
 800b31c:	f107 0108 	add.w	r1, r7, #8
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
      break;
 800b326:	e112      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	7c1b      	ldrb	r3, [r3, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10d      	bne.n	800b34c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b338:	f107 0208 	add.w	r2, r7, #8
 800b33c:	4610      	mov	r0, r2
 800b33e:	4798      	blx	r3
 800b340:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3301      	adds	r3, #1
 800b346:	2202      	movs	r2, #2
 800b348:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b34a:	e100      	b.n	800b54e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b354:	f107 0208 	add.w	r2, r7, #8
 800b358:	4610      	mov	r0, r2
 800b35a:	4798      	blx	r3
 800b35c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3301      	adds	r3, #1
 800b362:	2202      	movs	r2, #2
 800b364:	701a      	strb	r2, [r3, #0]
      break;
 800b366:	e0f2      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	885b      	ldrh	r3, [r3, #2]
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b05      	cmp	r3, #5
 800b370:	f200 80ac 	bhi.w	800b4cc <USBD_GetDescriptor+0x258>
 800b374:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <USBD_GetDescriptor+0x108>)
 800b376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37a:	bf00      	nop
 800b37c:	0800b395 	.word	0x0800b395
 800b380:	0800b3c9 	.word	0x0800b3c9
 800b384:	0800b3fd 	.word	0x0800b3fd
 800b388:	0800b431 	.word	0x0800b431
 800b38c:	0800b465 	.word	0x0800b465
 800b390:	0800b499 	.word	0x0800b499
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00b      	beq.n	800b3b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	7c12      	ldrb	r2, [r2, #16]
 800b3ac:	f107 0108 	add.w	r1, r7, #8
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3b6:	e091      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 facb 	bl	800b956 <USBD_CtlError>
            err++;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3c6:	e089      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00b      	beq.n	800b3ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	7c12      	ldrb	r2, [r2, #16]
 800b3e0:	f107 0108 	add.w	r1, r7, #8
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ea:	e077      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fab1 	bl	800b956 <USBD_CtlError>
            err++;
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3fa:	e06f      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	7c12      	ldrb	r2, [r2, #16]
 800b414:	f107 0108 	add.w	r1, r7, #8
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b41e:	e05d      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa97 	bl	800b956 <USBD_CtlError>
            err++;
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	3301      	adds	r3, #1
 800b42c:	72fb      	strb	r3, [r7, #11]
          break;
 800b42e:	e055      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	7c12      	ldrb	r2, [r2, #16]
 800b448:	f107 0108 	add.w	r1, r7, #8
 800b44c:	4610      	mov	r0, r2
 800b44e:	4798      	blx	r3
 800b450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b452:	e043      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa7d 	bl	800b956 <USBD_CtlError>
            err++;
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	3301      	adds	r3, #1
 800b460:	72fb      	strb	r3, [r7, #11]
          break;
 800b462:	e03b      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	7c12      	ldrb	r2, [r2, #16]
 800b47c:	f107 0108 	add.w	r1, r7, #8
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
 800b484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b486:	e029      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fa63 	bl	800b956 <USBD_CtlError>
            err++;
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	3301      	adds	r3, #1
 800b494:	72fb      	strb	r3, [r7, #11]
          break;
 800b496:	e021      	b.n	800b4dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00b      	beq.n	800b4bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4aa:	699b      	ldr	r3, [r3, #24]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	7c12      	ldrb	r2, [r2, #16]
 800b4b0:	f107 0108 	add.w	r1, r7, #8
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4798      	blx	r3
 800b4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ba:	e00f      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fa49 	bl	800b956 <USBD_CtlError>
            err++;
 800b4c4:	7afb      	ldrb	r3, [r7, #11]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ca:	e007      	b.n	800b4dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa41 	bl	800b956 <USBD_CtlError>
          err++;
 800b4d4:	7afb      	ldrb	r3, [r7, #11]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b4da:	bf00      	nop
      }
      break;
 800b4dc:	e037      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	7c1b      	ldrb	r3, [r3, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d109      	bne.n	800b4fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ee:	f107 0208 	add.w	r2, r7, #8
 800b4f2:	4610      	mov	r0, r2
 800b4f4:	4798      	blx	r3
 800b4f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4f8:	e029      	b.n	800b54e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fa2a 	bl	800b956 <USBD_CtlError>
        err++;
 800b502:	7afb      	ldrb	r3, [r7, #11]
 800b504:	3301      	adds	r3, #1
 800b506:	72fb      	strb	r3, [r7, #11]
      break;
 800b508:	e021      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7c1b      	ldrb	r3, [r3, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10d      	bne.n	800b52e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51a:	f107 0208 	add.w	r2, r7, #8
 800b51e:	4610      	mov	r0, r2
 800b520:	4798      	blx	r3
 800b522:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	2207      	movs	r2, #7
 800b52a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b52c:	e00f      	b.n	800b54e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fa10 	bl	800b956 <USBD_CtlError>
        err++;
 800b536:	7afb      	ldrb	r3, [r7, #11]
 800b538:	3301      	adds	r3, #1
 800b53a:	72fb      	strb	r3, [r7, #11]
      break;
 800b53c:	e007      	b.n	800b54e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fa08 	bl	800b956 <USBD_CtlError>
      err++;
 800b546:	7afb      	ldrb	r3, [r7, #11]
 800b548:	3301      	adds	r3, #1
 800b54a:	72fb      	strb	r3, [r7, #11]
      break;
 800b54c:	bf00      	nop
  }

  if (err != 0U)
 800b54e:	7afb      	ldrb	r3, [r7, #11]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d11e      	bne.n	800b592 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	88db      	ldrh	r3, [r3, #6]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d016      	beq.n	800b58a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b55c:	893b      	ldrh	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00e      	beq.n	800b580 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	88da      	ldrh	r2, [r3, #6]
 800b566:	893b      	ldrh	r3, [r7, #8]
 800b568:	4293      	cmp	r3, r2
 800b56a:	bf28      	it	cs
 800b56c:	4613      	movcs	r3, r2
 800b56e:	b29b      	uxth	r3, r3
 800b570:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b572:	893b      	ldrh	r3, [r7, #8]
 800b574:	461a      	mov	r2, r3
 800b576:	68f9      	ldr	r1, [r7, #12]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fa5d 	bl	800ba38 <USBD_CtlSendData>
 800b57e:	e009      	b.n	800b594 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f9e7 	bl	800b956 <USBD_CtlError>
 800b588:	e004      	b.n	800b594 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 faae 	bl	800baec <USBD_CtlSendStatus>
 800b590:	e000      	b.n	800b594 <USBD_GetDescriptor+0x320>
    return;
 800b592:	bf00      	nop
  }
}
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop

0800b59c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	889b      	ldrh	r3, [r3, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d131      	bne.n	800b612 <USBD_SetAddress+0x76>
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	88db      	ldrh	r3, [r3, #6]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d12d      	bne.n	800b612 <USBD_SetAddress+0x76>
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	885b      	ldrh	r3, [r3, #2]
 800b5ba:	2b7f      	cmp	r3, #127	; 0x7f
 800b5bc:	d829      	bhi.n	800b612 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	885b      	ldrh	r3, [r3, #2]
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	d104      	bne.n	800b5e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f9bc 	bl	800b956 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5de:	e01d      	b.n	800b61c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	7bfa      	ldrb	r2, [r7, #15]
 800b5e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 ff69 	bl	800c4c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fa7a 	bl	800baec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d004      	beq.n	800b608 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2202      	movs	r2, #2
 800b602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b606:	e009      	b.n	800b61c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b610:	e004      	b.n	800b61c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f99e 	bl	800b956 <USBD_CtlError>
  }
}
 800b61a:	bf00      	nop
 800b61c:	bf00      	nop
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	885b      	ldrh	r3, [r3, #2]
 800b636:	b2da      	uxtb	r2, r3
 800b638:	4b4e      	ldr	r3, [pc, #312]	; (800b774 <USBD_SetConfig+0x150>)
 800b63a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b63c:	4b4d      	ldr	r3, [pc, #308]	; (800b774 <USBD_SetConfig+0x150>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d905      	bls.n	800b650 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b644:	6839      	ldr	r1, [r7, #0]
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f985 	bl	800b956 <USBD_CtlError>
    return USBD_FAIL;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e08c      	b.n	800b76a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d002      	beq.n	800b662 <USBD_SetConfig+0x3e>
 800b65c:	2b03      	cmp	r3, #3
 800b65e:	d029      	beq.n	800b6b4 <USBD_SetConfig+0x90>
 800b660:	e075      	b.n	800b74e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b662:	4b44      	ldr	r3, [pc, #272]	; (800b774 <USBD_SetConfig+0x150>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d020      	beq.n	800b6ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b66a:	4b42      	ldr	r3, [pc, #264]	; (800b774 <USBD_SetConfig+0x150>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b674:	4b3f      	ldr	r3, [pc, #252]	; (800b774 <USBD_SetConfig+0x150>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff f849 	bl	800a712 <USBD_SetClassConfig>
 800b680:	4603      	mov	r3, r0
 800b682:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d008      	beq.n	800b69c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f962 	bl	800b956 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2202      	movs	r2, #2
 800b696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b69a:	e065      	b.n	800b768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fa25 	bl	800baec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2203      	movs	r2, #3
 800b6a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b6aa:	e05d      	b.n	800b768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fa1d 	bl	800baec <USBD_CtlSendStatus>
      break;
 800b6b2:	e059      	b.n	800b768 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b6b4:	4b2f      	ldr	r3, [pc, #188]	; (800b774 <USBD_SetConfig+0x150>)
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d112      	bne.n	800b6e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2202      	movs	r2, #2
 800b6c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b6c4:	4b2b      	ldr	r3, [pc, #172]	; (800b774 <USBD_SetConfig+0x150>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6ce:	4b29      	ldr	r3, [pc, #164]	; (800b774 <USBD_SetConfig+0x150>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff f838 	bl	800a74a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fa06 	bl	800baec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6e0:	e042      	b.n	800b768 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b6e2:	4b24      	ldr	r3, [pc, #144]	; (800b774 <USBD_SetConfig+0x150>)
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d02a      	beq.n	800b746 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff f826 	bl	800a74a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6fe:	4b1d      	ldr	r3, [pc, #116]	; (800b774 <USBD_SetConfig+0x150>)
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b708:	4b1a      	ldr	r3, [pc, #104]	; (800b774 <USBD_SetConfig+0x150>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7fe ffff 	bl	800a712 <USBD_SetClassConfig>
 800b714:	4603      	mov	r3, r0
 800b716:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b718:	7bfb      	ldrb	r3, [r7, #15]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00f      	beq.n	800b73e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f918 	bl	800b956 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff f80b 	bl	800a74a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b73c:	e014      	b.n	800b768 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f9d4 	bl	800baec <USBD_CtlSendStatus>
      break;
 800b744:	e010      	b.n	800b768 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f9d0 	bl	800baec <USBD_CtlSendStatus>
      break;
 800b74c:	e00c      	b.n	800b768 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f900 	bl	800b956 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b756:	4b07      	ldr	r3, [pc, #28]	; (800b774 <USBD_SetConfig+0x150>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7fe fff4 	bl	800a74a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b762:	2303      	movs	r3, #3
 800b764:	73fb      	strb	r3, [r7, #15]
      break;
 800b766:	bf00      	nop
  }

  return ret;
 800b768:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	2000040c 	.word	0x2000040c

0800b778 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	88db      	ldrh	r3, [r3, #6]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d004      	beq.n	800b794 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f8e2 	bl	800b956 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b792:	e023      	b.n	800b7dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	dc02      	bgt.n	800b7a6 <USBD_GetConfig+0x2e>
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dc03      	bgt.n	800b7ac <USBD_GetConfig+0x34>
 800b7a4:	e015      	b.n	800b7d2 <USBD_GetConfig+0x5a>
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d00b      	beq.n	800b7c2 <USBD_GetConfig+0x4a>
 800b7aa:	e012      	b.n	800b7d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	3308      	adds	r3, #8
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f93c 	bl	800ba38 <USBD_CtlSendData>
        break;
 800b7c0:	e00c      	b.n	800b7dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f934 	bl	800ba38 <USBD_CtlSendData>
        break;
 800b7d0:	e004      	b.n	800b7dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f8be 	bl	800b956 <USBD_CtlError>
        break;
 800b7da:	bf00      	nop
}
 800b7dc:	bf00      	nop
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d81e      	bhi.n	800b83a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	88db      	ldrh	r3, [r3, #6]
 800b800:	2b02      	cmp	r3, #2
 800b802:	d004      	beq.n	800b80e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f8a5 	bl	800b956 <USBD_CtlError>
        break;
 800b80c:	e01a      	b.n	800b844 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f043 0202 	orr.w	r2, r3, #2
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	330c      	adds	r3, #12
 800b82e:	2202      	movs	r2, #2
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f900 	bl	800ba38 <USBD_CtlSendData>
      break;
 800b838:	e004      	b.n	800b844 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 f88a 	bl	800b956 <USBD_CtlError>
      break;
 800b842:	bf00      	nop
  }
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	885b      	ldrh	r3, [r3, #2]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d107      	bne.n	800b86e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2201      	movs	r2, #1
 800b862:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f940 	bl	800baec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b86c:	e013      	b.n	800b896 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	885b      	ldrh	r3, [r3, #2]
 800b872:	2b02      	cmp	r3, #2
 800b874:	d10b      	bne.n	800b88e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	889b      	ldrh	r3, [r3, #4]
 800b87a:	0a1b      	lsrs	r3, r3, #8
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f930 	bl	800baec <USBD_CtlSendStatus>
}
 800b88c:	e003      	b.n	800b896 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f860 	bl	800b956 <USBD_CtlError>
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d80b      	bhi.n	800b8ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	885b      	ldrh	r3, [r3, #2]
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d10c      	bne.n	800b8d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f910 	bl	800baec <USBD_CtlSendStatus>
      }
      break;
 800b8cc:	e004      	b.n	800b8d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f840 	bl	800b956 <USBD_CtlError>
      break;
 800b8d6:	e000      	b.n	800b8da <USBD_ClrFeature+0x3c>
      break;
 800b8d8:	bf00      	nop
  }
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	781a      	ldrb	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	781a      	ldrb	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	3301      	adds	r3, #1
 800b90a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f7ff fa17 	bl	800ad40 <SWAPBYTE>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3301      	adds	r3, #1
 800b91e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3301      	adds	r3, #1
 800b924:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f7ff fa0a 	bl	800ad40 <SWAPBYTE>
 800b92c:	4603      	mov	r3, r0
 800b92e:	461a      	mov	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3301      	adds	r3, #1
 800b938:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3301      	adds	r3, #1
 800b93e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f7ff f9fd 	bl	800ad40 <SWAPBYTE>
 800b946:	4603      	mov	r3, r0
 800b948:	461a      	mov	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	80da      	strh	r2, [r3, #6]
}
 800b94e:	bf00      	nop
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b960:	2180      	movs	r1, #128	; 0x80
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fd14 	bl	800c390 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b968:	2100      	movs	r1, #0
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fd10 	bl	800c390 <USBD_LL_StallEP>
}
 800b970:	bf00      	nop
 800b972:	3708      	adds	r7, #8
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b984:	2300      	movs	r3, #0
 800b986:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d036      	beq.n	800b9fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b992:	6938      	ldr	r0, [r7, #16]
 800b994:	f000 f836 	bl	800ba04 <USBD_GetLen>
 800b998:	4603      	mov	r3, r0
 800b99a:	3301      	adds	r3, #1
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	7812      	ldrb	r2, [r2, #0]
 800b9b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	4413      	add	r3, r2
 800b9be:	2203      	movs	r2, #3
 800b9c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b9c8:	e013      	b.n	800b9f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	7812      	ldrb	r2, [r2, #0]
 800b9d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	613b      	str	r3, [r7, #16]
    idx++;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e7      	bne.n	800b9ca <USBD_GetString+0x52>
 800b9fa:	e000      	b.n	800b9fe <USBD_GetString+0x86>
    return;
 800b9fc:	bf00      	nop
  }
}
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba14:	e005      	b.n	800ba22 <USBD_GetLen+0x1e>
  {
    len++;
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f5      	bne.n	800ba16 <USBD_GetLen+0x12>
  }

  return len;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2202      	movs	r2, #2
 800ba48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f000 fd66 	bl	800c530 <USBD_LL_Transmit>

  return USBD_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	60f8      	str	r0, [r7, #12]
 800ba76:	60b9      	str	r1, [r7, #8]
 800ba78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	2100      	movs	r1, #0
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f000 fd55 	bl	800c530 <USBD_LL_Transmit>

  return USBD_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2203      	movs	r2, #3
 800baa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	2100      	movs	r1, #0
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f000 fd70 	bl	800c5a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	2100      	movs	r1, #0
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 fd5f 	bl	800c5a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2204      	movs	r2, #4
 800baf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bafc:	2300      	movs	r3, #0
 800bafe:	2200      	movs	r2, #0
 800bb00:	2100      	movs	r1, #0
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fd14 	bl	800c530 <USBD_LL_Transmit>

  return USBD_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2205      	movs	r2, #5
 800bb1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb22:	2300      	movs	r3, #0
 800bb24:	2200      	movs	r2, #0
 800bb26:	2100      	movs	r1, #0
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 fd39 	bl	800c5a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	4912      	ldr	r1, [pc, #72]	; (800bb88 <MX_USB_DEVICE_Init+0x50>)
 800bb40:	4812      	ldr	r0, [pc, #72]	; (800bb8c <MX_USB_DEVICE_Init+0x54>)
 800bb42:	f7fe fd69 	bl	800a618 <USBD_Init>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb4c:	f7f6 fa94 	bl	8002078 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb50:	490f      	ldr	r1, [pc, #60]	; (800bb90 <MX_USB_DEVICE_Init+0x58>)
 800bb52:	480e      	ldr	r0, [pc, #56]	; (800bb8c <MX_USB_DEVICE_Init+0x54>)
 800bb54:	f7fe fd90 	bl	800a678 <USBD_RegisterClass>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb5e:	f7f6 fa8b 	bl	8002078 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb62:	490c      	ldr	r1, [pc, #48]	; (800bb94 <MX_USB_DEVICE_Init+0x5c>)
 800bb64:	4809      	ldr	r0, [pc, #36]	; (800bb8c <MX_USB_DEVICE_Init+0x54>)
 800bb66:	f7fe fc87 	bl	800a478 <USBD_CDC_RegisterInterface>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb70:	f7f6 fa82 	bl	8002078 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb74:	4805      	ldr	r0, [pc, #20]	; (800bb8c <MX_USB_DEVICE_Init+0x54>)
 800bb76:	f7fe fdb5 	bl	800a6e4 <USBD_Start>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb80:	f7f6 fa7a 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb84:	bf00      	nop
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	200000ac 	.word	0x200000ac
 800bb8c:	20000410 	.word	0x20000410
 800bb90:	20000018 	.word	0x20000018
 800bb94:	20000098 	.word	0x20000098

0800bb98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	4905      	ldr	r1, [pc, #20]	; (800bbb4 <CDC_Init_FS+0x1c>)
 800bba0:	4805      	ldr	r0, [pc, #20]	; (800bbb8 <CDC_Init_FS+0x20>)
 800bba2:	f7fe fc83 	bl	800a4ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bba6:	4905      	ldr	r1, [pc, #20]	; (800bbbc <CDC_Init_FS+0x24>)
 800bba8:	4803      	ldr	r0, [pc, #12]	; (800bbb8 <CDC_Init_FS+0x20>)
 800bbaa:	f7fe fca1 	bl	800a4f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	20000aec 	.word	0x20000aec
 800bbb8:	20000410 	.word	0x20000410
 800bbbc:	200006ec 	.word	0x200006ec

0800bbc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bbc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	6039      	str	r1, [r7, #0]
 800bbda:	71fb      	strb	r3, [r7, #7]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	2b23      	cmp	r3, #35	; 0x23
 800bbe4:	d84a      	bhi.n	800bc7c <CDC_Control_FS+0xac>
 800bbe6:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <CDC_Control_FS+0x1c>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc7d 	.word	0x0800bc7d
 800bbf0:	0800bc7d 	.word	0x0800bc7d
 800bbf4:	0800bc7d 	.word	0x0800bc7d
 800bbf8:	0800bc7d 	.word	0x0800bc7d
 800bbfc:	0800bc7d 	.word	0x0800bc7d
 800bc00:	0800bc7d 	.word	0x0800bc7d
 800bc04:	0800bc7d 	.word	0x0800bc7d
 800bc08:	0800bc7d 	.word	0x0800bc7d
 800bc0c:	0800bc7d 	.word	0x0800bc7d
 800bc10:	0800bc7d 	.word	0x0800bc7d
 800bc14:	0800bc7d 	.word	0x0800bc7d
 800bc18:	0800bc7d 	.word	0x0800bc7d
 800bc1c:	0800bc7d 	.word	0x0800bc7d
 800bc20:	0800bc7d 	.word	0x0800bc7d
 800bc24:	0800bc7d 	.word	0x0800bc7d
 800bc28:	0800bc7d 	.word	0x0800bc7d
 800bc2c:	0800bc7d 	.word	0x0800bc7d
 800bc30:	0800bc7d 	.word	0x0800bc7d
 800bc34:	0800bc7d 	.word	0x0800bc7d
 800bc38:	0800bc7d 	.word	0x0800bc7d
 800bc3c:	0800bc7d 	.word	0x0800bc7d
 800bc40:	0800bc7d 	.word	0x0800bc7d
 800bc44:	0800bc7d 	.word	0x0800bc7d
 800bc48:	0800bc7d 	.word	0x0800bc7d
 800bc4c:	0800bc7d 	.word	0x0800bc7d
 800bc50:	0800bc7d 	.word	0x0800bc7d
 800bc54:	0800bc7d 	.word	0x0800bc7d
 800bc58:	0800bc7d 	.word	0x0800bc7d
 800bc5c:	0800bc7d 	.word	0x0800bc7d
 800bc60:	0800bc7d 	.word	0x0800bc7d
 800bc64:	0800bc7d 	.word	0x0800bc7d
 800bc68:	0800bc7d 	.word	0x0800bc7d
 800bc6c:	0800bc7d 	.word	0x0800bc7d
 800bc70:	0800bc7d 	.word	0x0800bc7d
 800bc74:	0800bc7d 	.word	0x0800bc7d
 800bc78:	0800bc7d 	.word	0x0800bc7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc7c:	bf00      	nop
  }

  return (USBD_OK);
 800bc7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc96:	6879      	ldr	r1, [r7, #4]
 800bc98:	4805      	ldr	r0, [pc, #20]	; (800bcb0 <CDC_Receive_FS+0x24>)
 800bc9a:	f7fe fc29 	bl	800a4f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc9e:	4804      	ldr	r0, [pc, #16]	; (800bcb0 <CDC_Receive_FS+0x24>)
 800bca0:	f7fe fc84 	bl	800a5ac <USBD_CDC_ReceivePacket>
//  usbd_ch = Buf[0];
//  Flag = 1; //receive sth, Flag=1

  return (USBD_OK);
 800bca4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	20000410 	.word	0x20000410

0800bcb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bcc4:	4b0d      	ldr	r3, [pc, #52]	; (800bcfc <CDC_Transmit_FS+0x48>)
 800bcc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e00b      	b.n	800bcf2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bcda:	887b      	ldrh	r3, [r7, #2]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	6879      	ldr	r1, [r7, #4]
 800bce0:	4806      	ldr	r0, [pc, #24]	; (800bcfc <CDC_Transmit_FS+0x48>)
 800bce2:	f7fe fbe3 	bl	800a4ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bce6:	4805      	ldr	r0, [pc, #20]	; (800bcfc <CDC_Transmit_FS+0x48>)
 800bce8:	f7fe fc20 	bl	800a52c <USBD_CDC_TransmitPacket>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000410 	.word	0x20000410

0800bd00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b087      	sub	sp, #28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	371c      	adds	r7, #28
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
	...

0800bd24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	6039      	str	r1, [r7, #0]
 800bd2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2212      	movs	r2, #18
 800bd34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd36:	4b03      	ldr	r3, [pc, #12]	; (800bd44 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	200000cc 	.word	0x200000cc

0800bd48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	6039      	str	r1, [r7, #0]
 800bd52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2204      	movs	r2, #4
 800bd58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd5a:	4b03      	ldr	r3, [pc, #12]	; (800bd68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	200000ec 	.word	0x200000ec

0800bd6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	6039      	str	r1, [r7, #0]
 800bd76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d105      	bne.n	800bd8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	4907      	ldr	r1, [pc, #28]	; (800bda0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd82:	4808      	ldr	r0, [pc, #32]	; (800bda4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd84:	f7ff fdf8 	bl	800b978 <USBD_GetString>
 800bd88:	e004      	b.n	800bd94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	4904      	ldr	r1, [pc, #16]	; (800bda0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd8e:	4805      	ldr	r0, [pc, #20]	; (800bda4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bd90:	f7ff fdf2 	bl	800b978 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd94:	4b02      	ldr	r3, [pc, #8]	; (800bda0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20000eec 	.word	0x20000eec
 800bda4:	0800f83c 	.word	0x0800f83c

0800bda8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	6039      	str	r1, [r7, #0]
 800bdb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	4904      	ldr	r1, [pc, #16]	; (800bdc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bdb8:	4804      	ldr	r0, [pc, #16]	; (800bdcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bdba:	f7ff fddd 	bl	800b978 <USBD_GetString>
  return USBD_StrDesc;
 800bdbe:	4b02      	ldr	r3, [pc, #8]	; (800bdc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	20000eec 	.word	0x20000eec
 800bdcc:	0800f854 	.word	0x0800f854

0800bdd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	6039      	str	r1, [r7, #0]
 800bdda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	221a      	movs	r2, #26
 800bde0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bde2:	f000 f855 	bl	800be90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bde6:	4b02      	ldr	r3, [pc, #8]	; (800bdf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	200000f0 	.word	0x200000f0

0800bdf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	6039      	str	r1, [r7, #0]
 800bdfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d105      	bne.n	800be12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	4907      	ldr	r1, [pc, #28]	; (800be28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be0a:	4808      	ldr	r0, [pc, #32]	; (800be2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800be0c:	f7ff fdb4 	bl	800b978 <USBD_GetString>
 800be10:	e004      	b.n	800be1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	4904      	ldr	r1, [pc, #16]	; (800be28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be16:	4805      	ldr	r0, [pc, #20]	; (800be2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800be18:	f7ff fdae 	bl	800b978 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be1c:	4b02      	ldr	r3, [pc, #8]	; (800be28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	20000eec 	.word	0x20000eec
 800be2c:	0800f868 	.word	0x0800f868

0800be30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	4603      	mov	r3, r0
 800be38:	6039      	str	r1, [r7, #0]
 800be3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be3c:	79fb      	ldrb	r3, [r7, #7]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d105      	bne.n	800be4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	4907      	ldr	r1, [pc, #28]	; (800be64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be46:	4808      	ldr	r0, [pc, #32]	; (800be68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be48:	f7ff fd96 	bl	800b978 <USBD_GetString>
 800be4c:	e004      	b.n	800be58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	4904      	ldr	r1, [pc, #16]	; (800be64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be52:	4805      	ldr	r0, [pc, #20]	; (800be68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be54:	f7ff fd90 	bl	800b978 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be58:	4b02      	ldr	r3, [pc, #8]	; (800be64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	20000eec 	.word	0x20000eec
 800be68:	0800f874 	.word	0x0800f874

0800be6c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	6039      	str	r1, [r7, #0]
 800be76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	220c      	movs	r2, #12
 800be7c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800be7e:	4b03      	ldr	r3, [pc, #12]	; (800be8c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800be80:	4618      	mov	r0, r3
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	200000e0 	.word	0x200000e0

0800be90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be96:	4b0f      	ldr	r3, [pc, #60]	; (800bed4 <Get_SerialNum+0x44>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be9c:	4b0e      	ldr	r3, [pc, #56]	; (800bed8 <Get_SerialNum+0x48>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bea2:	4b0e      	ldr	r3, [pc, #56]	; (800bedc <Get_SerialNum+0x4c>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4413      	add	r3, r2
 800beae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d009      	beq.n	800beca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800beb6:	2208      	movs	r2, #8
 800beb8:	4909      	ldr	r1, [pc, #36]	; (800bee0 <Get_SerialNum+0x50>)
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f000 f814 	bl	800bee8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bec0:	2204      	movs	r2, #4
 800bec2:	4908      	ldr	r1, [pc, #32]	; (800bee4 <Get_SerialNum+0x54>)
 800bec4:	68b8      	ldr	r0, [r7, #8]
 800bec6:	f000 f80f 	bl	800bee8 <IntToUnicode>
  }
}
 800beca:	bf00      	nop
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	1fff7590 	.word	0x1fff7590
 800bed8:	1fff7594 	.word	0x1fff7594
 800bedc:	1fff7598 	.word	0x1fff7598
 800bee0:	200000f2 	.word	0x200000f2
 800bee4:	20000102 	.word	0x20000102

0800bee8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	4613      	mov	r3, r2
 800bef4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800befa:	2300      	movs	r3, #0
 800befc:	75fb      	strb	r3, [r7, #23]
 800befe:	e027      	b.n	800bf50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	0f1b      	lsrs	r3, r3, #28
 800bf04:	2b09      	cmp	r3, #9
 800bf06:	d80b      	bhi.n	800bf20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	0f1b      	lsrs	r3, r3, #28
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	4619      	mov	r1, r3
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	440b      	add	r3, r1
 800bf18:	3230      	adds	r2, #48	; 0x30
 800bf1a:	b2d2      	uxtb	r2, r2
 800bf1c:	701a      	strb	r2, [r3, #0]
 800bf1e:	e00a      	b.n	800bf36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	0f1b      	lsrs	r3, r3, #28
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	440b      	add	r3, r1
 800bf30:	3237      	adds	r2, #55	; 0x37
 800bf32:	b2d2      	uxtb	r2, r2
 800bf34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	011b      	lsls	r3, r3, #4
 800bf3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf3c:	7dfb      	ldrb	r3, [r7, #23]
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	3301      	adds	r3, #1
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	4413      	add	r3, r2
 800bf46:	2200      	movs	r2, #0
 800bf48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	75fb      	strb	r3, [r7, #23]
 800bf50:	7dfa      	ldrb	r2, [r7, #23]
 800bf52:	79fb      	ldrb	r3, [r7, #7]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d3d3      	bcc.n	800bf00 <IntToUnicode+0x18>
  }
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
	...

0800bf68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b096      	sub	sp, #88	; 0x58
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bf74:	2200      	movs	r2, #0
 800bf76:	601a      	str	r2, [r3, #0]
 800bf78:	605a      	str	r2, [r3, #4]
 800bf7a:	609a      	str	r2, [r3, #8]
 800bf7c:	60da      	str	r2, [r3, #12]
 800bf7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bf80:	f107 0310 	add.w	r3, r7, #16
 800bf84:	2234      	movs	r2, #52	; 0x34
 800bf86:	2100      	movs	r1, #0
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f001 fa25 	bl	800d3d8 <memset>
  if(pcdHandle->Instance==USB)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a24      	ldr	r2, [pc, #144]	; (800c024 <HAL_PCD_MspInit+0xbc>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d141      	bne.n	800c01c <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bf98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800bf9e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800bfa2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bfa4:	f107 0310 	add.w	r3, r7, #16
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7f9 feb3 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800bfb4:	f7f6 f860 	bl	8002078 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfb8:	4b1b      	ldr	r3, [pc, #108]	; (800c028 <HAL_PCD_MspInit+0xc0>)
 800bfba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfbc:	4a1a      	ldr	r2, [pc, #104]	; (800c028 <HAL_PCD_MspInit+0xc0>)
 800bfbe:	f043 0301 	orr.w	r3, r3, #1
 800bfc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfc4:	4b18      	ldr	r3, [pc, #96]	; (800c028 <HAL_PCD_MspInit+0xc0>)
 800bfc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	60fb      	str	r3, [r7, #12]
 800bfce:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bfd0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bfd4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800bfe2:	230a      	movs	r3, #10
 800bfe4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bfea:	4619      	mov	r1, r3
 800bfec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bff0:	f7f6 ff84 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bff4:	4b0c      	ldr	r3, [pc, #48]	; (800c028 <HAL_PCD_MspInit+0xc0>)
 800bff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bff8:	4a0b      	ldr	r2, [pc, #44]	; (800c028 <HAL_PCD_MspInit+0xc0>)
 800bffa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bffe:	6593      	str	r3, [r2, #88]	; 0x58
 800c000:	4b09      	ldr	r3, [pc, #36]	; (800c028 <HAL_PCD_MspInit+0xc0>)
 800c002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c008:	60bb      	str	r3, [r7, #8]
 800c00a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c00c:	2200      	movs	r2, #0
 800c00e:	2100      	movs	r1, #0
 800c010:	2043      	movs	r0, #67	; 0x43
 800c012:	f7f6 ff3c 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c016:	2043      	movs	r0, #67	; 0x43
 800c018:	f7f6 ff55 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c01c:	bf00      	nop
 800c01e:	3758      	adds	r7, #88	; 0x58
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	40006800 	.word	0x40006800
 800c028:	40021000 	.word	0x40021000

0800c02c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	f7fe fb9b 	bl	800a77e <USBD_LL_SetupStage>
}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	460b      	mov	r3, r1
 800c05a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c062:	78fa      	ldrb	r2, [r7, #3]
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	4613      	mov	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4413      	add	r3, r2
 800c06c:	00db      	lsls	r3, r3, #3
 800c06e:	440b      	add	r3, r1
 800c070:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	78fb      	ldrb	r3, [r7, #3]
 800c078:	4619      	mov	r1, r3
 800c07a:	f7fe fbd5 	bl	800a828 <USBD_LL_DataOutStage>
}
 800c07e:	bf00      	nop
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800c098:	78fa      	ldrb	r2, [r7, #3]
 800c09a:	6879      	ldr	r1, [r7, #4]
 800c09c:	4613      	mov	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	00db      	lsls	r3, r3, #3
 800c0a4:	440b      	add	r3, r1
 800c0a6:	333c      	adds	r3, #60	; 0x3c
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	f7fe fc6e 	bl	800a98e <USBD_LL_DataInStage>
}
 800c0b2:	bf00      	nop
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fe fda8 	bl	800ac1e <USBD_LL_SOF>
}
 800c0ce:	bf00      	nop
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d001      	beq.n	800c0ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c0ea:	f7f5 ffc5 	bl	8002078 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c0f4:	7bfa      	ldrb	r2, [r7, #15]
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fe fd4c 	bl	800ab96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c104:	4618      	mov	r0, r3
 800c106:	f7fe fcf4 	bl	800aaf2 <USBD_LL_Reset>
}
 800c10a:	bf00      	nop
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe fd47 	bl	800abb6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d005      	beq.n	800c13c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c130:	4b04      	ldr	r3, [pc, #16]	; (800c144 <HAL_PCD_SuspendCallback+0x30>)
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	4a03      	ldr	r2, [pc, #12]	; (800c144 <HAL_PCD_SuspendCallback+0x30>)
 800c136:	f043 0306 	orr.w	r3, r3, #6
 800c13a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	e000ed00 	.word	0xe000ed00

0800c148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d007      	beq.n	800c168 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c158:	4b08      	ldr	r3, [pc, #32]	; (800c17c <HAL_PCD_ResumeCallback+0x34>)
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	4a07      	ldr	r2, [pc, #28]	; (800c17c <HAL_PCD_ResumeCallback+0x34>)
 800c15e:	f023 0306 	bic.w	r3, r3, #6
 800c162:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c164:	f000 fab6 	bl	800c6d4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fd3d 	bl	800abee <USBD_LL_Resume>
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	e000ed00 	.word	0xe000ed00

0800c180 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c188:	f7f8 ff66 	bl	8005058 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c18c:	4a2b      	ldr	r2, [pc, #172]	; (800c23c <USBD_LL_Init+0xbc>)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a29      	ldr	r2, [pc, #164]	; (800c23c <USBD_LL_Init+0xbc>)
 800c198:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800c19c:	4b27      	ldr	r3, [pc, #156]	; (800c23c <USBD_LL_Init+0xbc>)
 800c19e:	4a28      	ldr	r2, [pc, #160]	; (800c240 <USBD_LL_Init+0xc0>)
 800c1a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1a2:	4b26      	ldr	r3, [pc, #152]	; (800c23c <USBD_LL_Init+0xbc>)
 800c1a4:	2208      	movs	r2, #8
 800c1a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1a8:	4b24      	ldr	r3, [pc, #144]	; (800c23c <USBD_LL_Init+0xbc>)
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1ae:	4b23      	ldr	r3, [pc, #140]	; (800c23c <USBD_LL_Init+0xbc>)
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c1b4:	4b21      	ldr	r3, [pc, #132]	; (800c23c <USBD_LL_Init+0xbc>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c1ba:	4b20      	ldr	r3, [pc, #128]	; (800c23c <USBD_LL_Init+0xbc>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c1c0:	4b1e      	ldr	r3, [pc, #120]	; (800c23c <USBD_LL_Init+0xbc>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c1c6:	4b1d      	ldr	r3, [pc, #116]	; (800c23c <USBD_LL_Init+0xbc>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c1cc:	481b      	ldr	r0, [pc, #108]	; (800c23c <USBD_LL_Init+0xbc>)
 800c1ce:	f7f7 f951 	bl	8003474 <HAL_PCD_Init>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d001      	beq.n	800c1dc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c1d8:	f7f5 ff4e 	bl	8002078 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1e2:	2318      	movs	r3, #24
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	f7f8 fe55 	bl	8004e96 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1f2:	2358      	movs	r3, #88	; 0x58
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2180      	movs	r1, #128	; 0x80
 800c1f8:	f7f8 fe4d 	bl	8004e96 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c202:	23c0      	movs	r3, #192	; 0xc0
 800c204:	2200      	movs	r2, #0
 800c206:	2181      	movs	r1, #129	; 0x81
 800c208:	f7f8 fe45 	bl	8004e96 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c212:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c216:	2200      	movs	r2, #0
 800c218:	2101      	movs	r1, #1
 800c21a:	f7f8 fe3c 	bl	8004e96 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c224:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c228:	2200      	movs	r2, #0
 800c22a:	2182      	movs	r1, #130	; 0x82
 800c22c:	f7f8 fe33 	bl	8004e96 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	200010ec 	.word	0x200010ec
 800c240:	40006800 	.word	0x40006800

0800c244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7f7 fa10 	bl	8003680 <HAL_PCD_Start>
 800c260:	4603      	mov	r3, r0
 800c262:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c264:	7bbb      	ldrb	r3, [r7, #14]
 800c266:	2b03      	cmp	r3, #3
 800c268:	d816      	bhi.n	800c298 <USBD_LL_Start+0x54>
 800c26a:	a201      	add	r2, pc, #4	; (adr r2, 800c270 <USBD_LL_Start+0x2c>)
 800c26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c270:	0800c281 	.word	0x0800c281
 800c274:	0800c287 	.word	0x0800c287
 800c278:	0800c28d 	.word	0x0800c28d
 800c27c:	0800c293 	.word	0x0800c293
    case HAL_OK :
      usb_status = USBD_OK;
 800c280:	2300      	movs	r3, #0
 800c282:	73fb      	strb	r3, [r7, #15]
    break;
 800c284:	e00b      	b.n	800c29e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c286:	2303      	movs	r3, #3
 800c288:	73fb      	strb	r3, [r7, #15]
    break;
 800c28a:	e008      	b.n	800c29e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c28c:	2301      	movs	r3, #1
 800c28e:	73fb      	strb	r3, [r7, #15]
    break;
 800c290:	e005      	b.n	800c29e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	73fb      	strb	r3, [r7, #15]
    break;
 800c296:	e002      	b.n	800c29e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c298:	2303      	movs	r3, #3
 800c29a:	73fb      	strb	r3, [r7, #15]
    break;
 800c29c:	bf00      	nop
  }
  return usb_status;
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	70fb      	strb	r3, [r7, #3]
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	70bb      	strb	r3, [r7, #2]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c2d0:	78bb      	ldrb	r3, [r7, #2]
 800c2d2:	883a      	ldrh	r2, [r7, #0]
 800c2d4:	78f9      	ldrb	r1, [r7, #3]
 800c2d6:	f7f7 fb41 	bl	800395c <HAL_PCD_EP_Open>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	d817      	bhi.n	800c314 <USBD_LL_OpenEP+0x6c>
 800c2e4:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <USBD_LL_OpenEP+0x44>)
 800c2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ea:	bf00      	nop
 800c2ec:	0800c2fd 	.word	0x0800c2fd
 800c2f0:	0800c303 	.word	0x0800c303
 800c2f4:	0800c309 	.word	0x0800c309
 800c2f8:	0800c30f 	.word	0x0800c30f
    case HAL_OK :
      usb_status = USBD_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c300:	e00b      	b.n	800c31a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c302:	2303      	movs	r3, #3
 800c304:	73fb      	strb	r3, [r7, #15]
    break;
 800c306:	e008      	b.n	800c31a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c308:	2301      	movs	r3, #1
 800c30a:	73fb      	strb	r3, [r7, #15]
    break;
 800c30c:	e005      	b.n	800c31a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c30e:	2303      	movs	r3, #3
 800c310:	73fb      	strb	r3, [r7, #15]
    break;
 800c312:	e002      	b.n	800c31a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c314:	2303      	movs	r3, #3
 800c316:	73fb      	strb	r3, [r7, #15]
    break;
 800c318:	bf00      	nop
  }
  return usb_status;
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c33e:	78fa      	ldrb	r2, [r7, #3]
 800c340:	4611      	mov	r1, r2
 800c342:	4618      	mov	r0, r3
 800c344:	f7f7 fb67 	bl	8003a16 <HAL_PCD_EP_Close>
 800c348:	4603      	mov	r3, r0
 800c34a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	2b03      	cmp	r3, #3
 800c350:	d816      	bhi.n	800c380 <USBD_LL_CloseEP+0x5c>
 800c352:	a201      	add	r2, pc, #4	; (adr r2, 800c358 <USBD_LL_CloseEP+0x34>)
 800c354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c358:	0800c369 	.word	0x0800c369
 800c35c:	0800c36f 	.word	0x0800c36f
 800c360:	0800c375 	.word	0x0800c375
 800c364:	0800c37b 	.word	0x0800c37b
    case HAL_OK :
      usb_status = USBD_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	73fb      	strb	r3, [r7, #15]
    break;
 800c36c:	e00b      	b.n	800c386 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c36e:	2303      	movs	r3, #3
 800c370:	73fb      	strb	r3, [r7, #15]
    break;
 800c372:	e008      	b.n	800c386 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c374:	2301      	movs	r3, #1
 800c376:	73fb      	strb	r3, [r7, #15]
    break;
 800c378:	e005      	b.n	800c386 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c37a:	2303      	movs	r3, #3
 800c37c:	73fb      	strb	r3, [r7, #15]
    break;
 800c37e:	e002      	b.n	800c386 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c380:	2303      	movs	r3, #3
 800c382:	73fb      	strb	r3, [r7, #15]
    break;
 800c384:	bf00      	nop
  }
  return usb_status;
 800c386:	7bfb      	ldrb	r3, [r7, #15]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3aa:	78fa      	ldrb	r2, [r7, #3]
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f7 fbf9 	bl	8003ba6 <HAL_PCD_EP_SetStall>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d816      	bhi.n	800c3ec <USBD_LL_StallEP+0x5c>
 800c3be:	a201      	add	r2, pc, #4	; (adr r2, 800c3c4 <USBD_LL_StallEP+0x34>)
 800c3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c4:	0800c3d5 	.word	0x0800c3d5
 800c3c8:	0800c3db 	.word	0x0800c3db
 800c3cc:	0800c3e1 	.word	0x0800c3e1
 800c3d0:	0800c3e7 	.word	0x0800c3e7
    case HAL_OK :
      usb_status = USBD_OK;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c3d8:	e00b      	b.n	800c3f2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c3de:	e008      	b.n	800c3f2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c3e4:	e005      	b.n	800c3f2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c3ea:	e002      	b.n	800c3f2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c3f0:	bf00      	nop
  }
  return usb_status;
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	460b      	mov	r3, r1
 800c406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c416:	78fa      	ldrb	r2, [r7, #3]
 800c418:	4611      	mov	r1, r2
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7f7 fc23 	bl	8003c66 <HAL_PCD_EP_ClrStall>
 800c420:	4603      	mov	r3, r0
 800c422:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	2b03      	cmp	r3, #3
 800c428:	d816      	bhi.n	800c458 <USBD_LL_ClearStallEP+0x5c>
 800c42a:	a201      	add	r2, pc, #4	; (adr r2, 800c430 <USBD_LL_ClearStallEP+0x34>)
 800c42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c430:	0800c441 	.word	0x0800c441
 800c434:	0800c447 	.word	0x0800c447
 800c438:	0800c44d 	.word	0x0800c44d
 800c43c:	0800c453 	.word	0x0800c453
    case HAL_OK :
      usb_status = USBD_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	73fb      	strb	r3, [r7, #15]
    break;
 800c444:	e00b      	b.n	800c45e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c446:	2303      	movs	r3, #3
 800c448:	73fb      	strb	r3, [r7, #15]
    break;
 800c44a:	e008      	b.n	800c45e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c44c:	2301      	movs	r3, #1
 800c44e:	73fb      	strb	r3, [r7, #15]
    break;
 800c450:	e005      	b.n	800c45e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c452:	2303      	movs	r3, #3
 800c454:	73fb      	strb	r3, [r7, #15]
    break;
 800c456:	e002      	b.n	800c45e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c458:	2303      	movs	r3, #3
 800c45a:	73fb      	strb	r3, [r7, #15]
    break;
 800c45c:	bf00      	nop
  }
  return usb_status;
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c47a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c47c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c480:	2b00      	cmp	r3, #0
 800c482:	da0c      	bge.n	800c49e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c48a:	68f9      	ldr	r1, [r7, #12]
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	4613      	mov	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	440b      	add	r3, r1
 800c498:	3302      	adds	r3, #2
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	e00b      	b.n	800c4b6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c49e:	78fb      	ldrb	r3, [r7, #3]
 800c4a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4a4:	68f9      	ldr	r1, [r7, #12]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4413      	add	r3, r2
 800c4ac:	00db      	lsls	r3, r3, #3
 800c4ae:	440b      	add	r3, r1
 800c4b0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c4b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4de:	78fa      	ldrb	r2, [r7, #3]
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7f7 fa15 	bl	8003912 <HAL_PCD_SetAddress>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c4ec:	7bbb      	ldrb	r3, [r7, #14]
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d816      	bhi.n	800c520 <USBD_LL_SetUSBAddress+0x5c>
 800c4f2:	a201      	add	r2, pc, #4	; (adr r2, 800c4f8 <USBD_LL_SetUSBAddress+0x34>)
 800c4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f8:	0800c509 	.word	0x0800c509
 800c4fc:	0800c50f 	.word	0x0800c50f
 800c500:	0800c515 	.word	0x0800c515
 800c504:	0800c51b 	.word	0x0800c51b
    case HAL_OK :
      usb_status = USBD_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	73fb      	strb	r3, [r7, #15]
    break;
 800c50c:	e00b      	b.n	800c526 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c50e:	2303      	movs	r3, #3
 800c510:	73fb      	strb	r3, [r7, #15]
    break;
 800c512:	e008      	b.n	800c526 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c514:	2301      	movs	r3, #1
 800c516:	73fb      	strb	r3, [r7, #15]
    break;
 800c518:	e005      	b.n	800c526 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c51a:	2303      	movs	r3, #3
 800c51c:	73fb      	strb	r3, [r7, #15]
    break;
 800c51e:	e002      	b.n	800c526 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c520:	2303      	movs	r3, #3
 800c522:	73fb      	strb	r3, [r7, #15]
    break;
 800c524:	bf00      	nop
  }
  return usb_status;
 800c526:	7bfb      	ldrb	r3, [r7, #15]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	607a      	str	r2, [r7, #4]
 800c53a:	603b      	str	r3, [r7, #0]
 800c53c:	460b      	mov	r3, r1
 800c53e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c54e:	7af9      	ldrb	r1, [r7, #11]
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	f7f7 faf0 	bl	8003b38 <HAL_PCD_EP_Transmit>
 800c558:	4603      	mov	r3, r0
 800c55a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c55c:	7dbb      	ldrb	r3, [r7, #22]
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d816      	bhi.n	800c590 <USBD_LL_Transmit+0x60>
 800c562:	a201      	add	r2, pc, #4	; (adr r2, 800c568 <USBD_LL_Transmit+0x38>)
 800c564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c568:	0800c579 	.word	0x0800c579
 800c56c:	0800c57f 	.word	0x0800c57f
 800c570:	0800c585 	.word	0x0800c585
 800c574:	0800c58b 	.word	0x0800c58b
    case HAL_OK :
      usb_status = USBD_OK;
 800c578:	2300      	movs	r3, #0
 800c57a:	75fb      	strb	r3, [r7, #23]
    break;
 800c57c:	e00b      	b.n	800c596 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c57e:	2303      	movs	r3, #3
 800c580:	75fb      	strb	r3, [r7, #23]
    break;
 800c582:	e008      	b.n	800c596 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c584:	2301      	movs	r3, #1
 800c586:	75fb      	strb	r3, [r7, #23]
    break;
 800c588:	e005      	b.n	800c596 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c58a:	2303      	movs	r3, #3
 800c58c:	75fb      	strb	r3, [r7, #23]
    break;
 800c58e:	e002      	b.n	800c596 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c590:	2303      	movs	r3, #3
 800c592:	75fb      	strb	r3, [r7, #23]
    break;
 800c594:	bf00      	nop
  }
  return usb_status;
 800c596:	7dfb      	ldrb	r3, [r7, #23]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3718      	adds	r7, #24
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	607a      	str	r2, [r7, #4]
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c5be:	7af9      	ldrb	r1, [r7, #11]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	f7f7 fa6f 	bl	8003aa6 <HAL_PCD_EP_Receive>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c5cc:	7dbb      	ldrb	r3, [r7, #22]
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	d816      	bhi.n	800c600 <USBD_LL_PrepareReceive+0x60>
 800c5d2:	a201      	add	r2, pc, #4	; (adr r2, 800c5d8 <USBD_LL_PrepareReceive+0x38>)
 800c5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d8:	0800c5e9 	.word	0x0800c5e9
 800c5dc:	0800c5ef 	.word	0x0800c5ef
 800c5e0:	0800c5f5 	.word	0x0800c5f5
 800c5e4:	0800c5fb 	.word	0x0800c5fb
    case HAL_OK :
      usb_status = USBD_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	75fb      	strb	r3, [r7, #23]
    break;
 800c5ec:	e00b      	b.n	800c606 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	75fb      	strb	r3, [r7, #23]
    break;
 800c5f2:	e008      	b.n	800c606 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	75fb      	strb	r3, [r7, #23]
    break;
 800c5f8:	e005      	b.n	800c606 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	75fb      	strb	r3, [r7, #23]
    break;
 800c5fe:	e002      	b.n	800c606 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c600:	2303      	movs	r3, #3
 800c602:	75fb      	strb	r3, [r7, #23]
    break;
 800c604:	bf00      	nop
  }
  return usb_status;
 800c606:	7dfb      	ldrb	r3, [r7, #23]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c622:	78fa      	ldrb	r2, [r7, #3]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f7f7 fa6e 	bl	8003b08 <HAL_PCD_EP_GetRxCount>
 800c62c:	4603      	mov	r3, r0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
	...

0800c638 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c644:	78fb      	ldrb	r3, [r7, #3]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d002      	beq.n	800c650 <HAL_PCDEx_LPM_Callback+0x18>
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d013      	beq.n	800c676 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c64e:	e023      	b.n	800c698 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d007      	beq.n	800c668 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c658:	f000 f83c 	bl	800c6d4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c65c:	4b10      	ldr	r3, [pc, #64]	; (800c6a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	4a0f      	ldr	r2, [pc, #60]	; (800c6a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c662:	f023 0306 	bic.w	r3, r3, #6
 800c666:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fe fabd 	bl	800abee <USBD_LL_Resume>
    break;
 800c674:	e010      	b.n	800c698 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fe fa9a 	bl	800abb6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	699b      	ldr	r3, [r3, #24]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d005      	beq.n	800c696 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c68a:	4b05      	ldr	r3, [pc, #20]	; (800c6a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	4a04      	ldr	r2, [pc, #16]	; (800c6a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c690:	f043 0306 	orr.w	r3, r3, #6
 800c694:	6113      	str	r3, [r2, #16]
    break;
 800c696:	bf00      	nop
}
 800c698:	bf00      	nop
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	e000ed00 	.word	0xe000ed00

0800c6a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c6ac:	4b03      	ldr	r3, [pc, #12]	; (800c6bc <USBD_static_malloc+0x18>)
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	200013e4 	.word	0x200013e4

0800c6c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]

}
 800c6c8:	bf00      	nop
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c6d8:	f7f5 fc4a 	bl	8001f70 <SystemClock_Config>
}
 800c6dc:	bf00      	nop
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <__cvt>:
 800c6e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e4:	ec55 4b10 	vmov	r4, r5, d0
 800c6e8:	2d00      	cmp	r5, #0
 800c6ea:	460e      	mov	r6, r1
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	462b      	mov	r3, r5
 800c6f0:	bfbb      	ittet	lt
 800c6f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c6f6:	461d      	movlt	r5, r3
 800c6f8:	2300      	movge	r3, #0
 800c6fa:	232d      	movlt	r3, #45	; 0x2d
 800c6fc:	700b      	strb	r3, [r1, #0]
 800c6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c700:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c704:	4691      	mov	r9, r2
 800c706:	f023 0820 	bic.w	r8, r3, #32
 800c70a:	bfbc      	itt	lt
 800c70c:	4622      	movlt	r2, r4
 800c70e:	4614      	movlt	r4, r2
 800c710:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c714:	d005      	beq.n	800c722 <__cvt+0x42>
 800c716:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c71a:	d100      	bne.n	800c71e <__cvt+0x3e>
 800c71c:	3601      	adds	r6, #1
 800c71e:	2102      	movs	r1, #2
 800c720:	e000      	b.n	800c724 <__cvt+0x44>
 800c722:	2103      	movs	r1, #3
 800c724:	ab03      	add	r3, sp, #12
 800c726:	9301      	str	r3, [sp, #4]
 800c728:	ab02      	add	r3, sp, #8
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	ec45 4b10 	vmov	d0, r4, r5
 800c730:	4653      	mov	r3, sl
 800c732:	4632      	mov	r2, r6
 800c734:	f000 ff64 	bl	800d600 <_dtoa_r>
 800c738:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c73c:	4607      	mov	r7, r0
 800c73e:	d102      	bne.n	800c746 <__cvt+0x66>
 800c740:	f019 0f01 	tst.w	r9, #1
 800c744:	d022      	beq.n	800c78c <__cvt+0xac>
 800c746:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c74a:	eb07 0906 	add.w	r9, r7, r6
 800c74e:	d110      	bne.n	800c772 <__cvt+0x92>
 800c750:	783b      	ldrb	r3, [r7, #0]
 800c752:	2b30      	cmp	r3, #48	; 0x30
 800c754:	d10a      	bne.n	800c76c <__cvt+0x8c>
 800c756:	2200      	movs	r2, #0
 800c758:	2300      	movs	r3, #0
 800c75a:	4620      	mov	r0, r4
 800c75c:	4629      	mov	r1, r5
 800c75e:	f7f4 f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c762:	b918      	cbnz	r0, 800c76c <__cvt+0x8c>
 800c764:	f1c6 0601 	rsb	r6, r6, #1
 800c768:	f8ca 6000 	str.w	r6, [sl]
 800c76c:	f8da 3000 	ldr.w	r3, [sl]
 800c770:	4499      	add	r9, r3
 800c772:	2200      	movs	r2, #0
 800c774:	2300      	movs	r3, #0
 800c776:	4620      	mov	r0, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	f7f4 f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c77e:	b108      	cbz	r0, 800c784 <__cvt+0xa4>
 800c780:	f8cd 900c 	str.w	r9, [sp, #12]
 800c784:	2230      	movs	r2, #48	; 0x30
 800c786:	9b03      	ldr	r3, [sp, #12]
 800c788:	454b      	cmp	r3, r9
 800c78a:	d307      	bcc.n	800c79c <__cvt+0xbc>
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c790:	1bdb      	subs	r3, r3, r7
 800c792:	4638      	mov	r0, r7
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	b004      	add	sp, #16
 800c798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c79c:	1c59      	adds	r1, r3, #1
 800c79e:	9103      	str	r1, [sp, #12]
 800c7a0:	701a      	strb	r2, [r3, #0]
 800c7a2:	e7f0      	b.n	800c786 <__cvt+0xa6>

0800c7a4 <__exponent>:
 800c7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	2900      	cmp	r1, #0
 800c7aa:	bfb8      	it	lt
 800c7ac:	4249      	neglt	r1, r1
 800c7ae:	f803 2b02 	strb.w	r2, [r3], #2
 800c7b2:	bfb4      	ite	lt
 800c7b4:	222d      	movlt	r2, #45	; 0x2d
 800c7b6:	222b      	movge	r2, #43	; 0x2b
 800c7b8:	2909      	cmp	r1, #9
 800c7ba:	7042      	strb	r2, [r0, #1]
 800c7bc:	dd2a      	ble.n	800c814 <__exponent+0x70>
 800c7be:	f10d 0207 	add.w	r2, sp, #7
 800c7c2:	4617      	mov	r7, r2
 800c7c4:	260a      	movs	r6, #10
 800c7c6:	4694      	mov	ip, r2
 800c7c8:	fb91 f5f6 	sdiv	r5, r1, r6
 800c7cc:	fb06 1415 	mls	r4, r6, r5, r1
 800c7d0:	3430      	adds	r4, #48	; 0x30
 800c7d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	2c63      	cmp	r4, #99	; 0x63
 800c7da:	f102 32ff 	add.w	r2, r2, #4294967295
 800c7de:	4629      	mov	r1, r5
 800c7e0:	dcf1      	bgt.n	800c7c6 <__exponent+0x22>
 800c7e2:	3130      	adds	r1, #48	; 0x30
 800c7e4:	f1ac 0402 	sub.w	r4, ip, #2
 800c7e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c7ec:	1c41      	adds	r1, r0, #1
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	42ba      	cmp	r2, r7
 800c7f2:	d30a      	bcc.n	800c80a <__exponent+0x66>
 800c7f4:	f10d 0209 	add.w	r2, sp, #9
 800c7f8:	eba2 020c 	sub.w	r2, r2, ip
 800c7fc:	42bc      	cmp	r4, r7
 800c7fe:	bf88      	it	hi
 800c800:	2200      	movhi	r2, #0
 800c802:	4413      	add	r3, r2
 800c804:	1a18      	subs	r0, r3, r0
 800c806:	b003      	add	sp, #12
 800c808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c80a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c80e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c812:	e7ed      	b.n	800c7f0 <__exponent+0x4c>
 800c814:	2330      	movs	r3, #48	; 0x30
 800c816:	3130      	adds	r1, #48	; 0x30
 800c818:	7083      	strb	r3, [r0, #2]
 800c81a:	70c1      	strb	r1, [r0, #3]
 800c81c:	1d03      	adds	r3, r0, #4
 800c81e:	e7f1      	b.n	800c804 <__exponent+0x60>

0800c820 <_printf_float>:
 800c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	ed2d 8b02 	vpush	{d8}
 800c828:	b08d      	sub	sp, #52	; 0x34
 800c82a:	460c      	mov	r4, r1
 800c82c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c830:	4616      	mov	r6, r2
 800c832:	461f      	mov	r7, r3
 800c834:	4605      	mov	r5, r0
 800c836:	f000 fdd7 	bl	800d3e8 <_localeconv_r>
 800c83a:	f8d0 a000 	ldr.w	sl, [r0]
 800c83e:	4650      	mov	r0, sl
 800c840:	f7f3 fd16 	bl	8000270 <strlen>
 800c844:	2300      	movs	r3, #0
 800c846:	930a      	str	r3, [sp, #40]	; 0x28
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	9305      	str	r3, [sp, #20]
 800c84c:	f8d8 3000 	ldr.w	r3, [r8]
 800c850:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c854:	3307      	adds	r3, #7
 800c856:	f023 0307 	bic.w	r3, r3, #7
 800c85a:	f103 0208 	add.w	r2, r3, #8
 800c85e:	f8c8 2000 	str.w	r2, [r8]
 800c862:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c866:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c86a:	9307      	str	r3, [sp, #28]
 800c86c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c870:	ee08 0a10 	vmov	s16, r0
 800c874:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c87c:	4b9e      	ldr	r3, [pc, #632]	; (800caf8 <_printf_float+0x2d8>)
 800c87e:	f04f 32ff 	mov.w	r2, #4294967295
 800c882:	f7f4 f953 	bl	8000b2c <__aeabi_dcmpun>
 800c886:	bb88      	cbnz	r0, 800c8ec <_printf_float+0xcc>
 800c888:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c88c:	4b9a      	ldr	r3, [pc, #616]	; (800caf8 <_printf_float+0x2d8>)
 800c88e:	f04f 32ff 	mov.w	r2, #4294967295
 800c892:	f7f4 f92d 	bl	8000af0 <__aeabi_dcmple>
 800c896:	bb48      	cbnz	r0, 800c8ec <_printf_float+0xcc>
 800c898:	2200      	movs	r2, #0
 800c89a:	2300      	movs	r3, #0
 800c89c:	4640      	mov	r0, r8
 800c89e:	4649      	mov	r1, r9
 800c8a0:	f7f4 f91c 	bl	8000adc <__aeabi_dcmplt>
 800c8a4:	b110      	cbz	r0, 800c8ac <_printf_float+0x8c>
 800c8a6:	232d      	movs	r3, #45	; 0x2d
 800c8a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8ac:	4a93      	ldr	r2, [pc, #588]	; (800cafc <_printf_float+0x2dc>)
 800c8ae:	4b94      	ldr	r3, [pc, #592]	; (800cb00 <_printf_float+0x2e0>)
 800c8b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8b4:	bf94      	ite	ls
 800c8b6:	4690      	movls	r8, r2
 800c8b8:	4698      	movhi	r8, r3
 800c8ba:	2303      	movs	r3, #3
 800c8bc:	6123      	str	r3, [r4, #16]
 800c8be:	9b05      	ldr	r3, [sp, #20]
 800c8c0:	f023 0304 	bic.w	r3, r3, #4
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	f04f 0900 	mov.w	r9, #0
 800c8ca:	9700      	str	r7, [sp, #0]
 800c8cc:	4633      	mov	r3, r6
 800c8ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f000 f9da 	bl	800cc8c <_printf_common>
 800c8d8:	3001      	adds	r0, #1
 800c8da:	f040 8090 	bne.w	800c9fe <_printf_float+0x1de>
 800c8de:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e2:	b00d      	add	sp, #52	; 0x34
 800c8e4:	ecbd 8b02 	vpop	{d8}
 800c8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ec:	4642      	mov	r2, r8
 800c8ee:	464b      	mov	r3, r9
 800c8f0:	4640      	mov	r0, r8
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	f7f4 f91a 	bl	8000b2c <__aeabi_dcmpun>
 800c8f8:	b140      	cbz	r0, 800c90c <_printf_float+0xec>
 800c8fa:	464b      	mov	r3, r9
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	bfbc      	itt	lt
 800c900:	232d      	movlt	r3, #45	; 0x2d
 800c902:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c906:	4a7f      	ldr	r2, [pc, #508]	; (800cb04 <_printf_float+0x2e4>)
 800c908:	4b7f      	ldr	r3, [pc, #508]	; (800cb08 <_printf_float+0x2e8>)
 800c90a:	e7d1      	b.n	800c8b0 <_printf_float+0x90>
 800c90c:	6863      	ldr	r3, [r4, #4]
 800c90e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c912:	9206      	str	r2, [sp, #24]
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	d13f      	bne.n	800c998 <_printf_float+0x178>
 800c918:	2306      	movs	r3, #6
 800c91a:	6063      	str	r3, [r4, #4]
 800c91c:	9b05      	ldr	r3, [sp, #20]
 800c91e:	6861      	ldr	r1, [r4, #4]
 800c920:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c924:	2300      	movs	r3, #0
 800c926:	9303      	str	r3, [sp, #12]
 800c928:	ab0a      	add	r3, sp, #40	; 0x28
 800c92a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c92e:	ab09      	add	r3, sp, #36	; 0x24
 800c930:	ec49 8b10 	vmov	d0, r8, r9
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	6022      	str	r2, [r4, #0]
 800c938:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c93c:	4628      	mov	r0, r5
 800c93e:	f7ff fecf 	bl	800c6e0 <__cvt>
 800c942:	9b06      	ldr	r3, [sp, #24]
 800c944:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c946:	2b47      	cmp	r3, #71	; 0x47
 800c948:	4680      	mov	r8, r0
 800c94a:	d108      	bne.n	800c95e <_printf_float+0x13e>
 800c94c:	1cc8      	adds	r0, r1, #3
 800c94e:	db02      	blt.n	800c956 <_printf_float+0x136>
 800c950:	6863      	ldr	r3, [r4, #4]
 800c952:	4299      	cmp	r1, r3
 800c954:	dd41      	ble.n	800c9da <_printf_float+0x1ba>
 800c956:	f1ab 0302 	sub.w	r3, fp, #2
 800c95a:	fa5f fb83 	uxtb.w	fp, r3
 800c95e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c962:	d820      	bhi.n	800c9a6 <_printf_float+0x186>
 800c964:	3901      	subs	r1, #1
 800c966:	465a      	mov	r2, fp
 800c968:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c96c:	9109      	str	r1, [sp, #36]	; 0x24
 800c96e:	f7ff ff19 	bl	800c7a4 <__exponent>
 800c972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c974:	1813      	adds	r3, r2, r0
 800c976:	2a01      	cmp	r2, #1
 800c978:	4681      	mov	r9, r0
 800c97a:	6123      	str	r3, [r4, #16]
 800c97c:	dc02      	bgt.n	800c984 <_printf_float+0x164>
 800c97e:	6822      	ldr	r2, [r4, #0]
 800c980:	07d2      	lsls	r2, r2, #31
 800c982:	d501      	bpl.n	800c988 <_printf_float+0x168>
 800c984:	3301      	adds	r3, #1
 800c986:	6123      	str	r3, [r4, #16]
 800c988:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d09c      	beq.n	800c8ca <_printf_float+0xaa>
 800c990:	232d      	movs	r3, #45	; 0x2d
 800c992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c996:	e798      	b.n	800c8ca <_printf_float+0xaa>
 800c998:	9a06      	ldr	r2, [sp, #24]
 800c99a:	2a47      	cmp	r2, #71	; 0x47
 800c99c:	d1be      	bne.n	800c91c <_printf_float+0xfc>
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1bc      	bne.n	800c91c <_printf_float+0xfc>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e7b9      	b.n	800c91a <_printf_float+0xfa>
 800c9a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c9aa:	d118      	bne.n	800c9de <_printf_float+0x1be>
 800c9ac:	2900      	cmp	r1, #0
 800c9ae:	6863      	ldr	r3, [r4, #4]
 800c9b0:	dd0b      	ble.n	800c9ca <_printf_float+0x1aa>
 800c9b2:	6121      	str	r1, [r4, #16]
 800c9b4:	b913      	cbnz	r3, 800c9bc <_printf_float+0x19c>
 800c9b6:	6822      	ldr	r2, [r4, #0]
 800c9b8:	07d0      	lsls	r0, r2, #31
 800c9ba:	d502      	bpl.n	800c9c2 <_printf_float+0x1a2>
 800c9bc:	3301      	adds	r3, #1
 800c9be:	440b      	add	r3, r1
 800c9c0:	6123      	str	r3, [r4, #16]
 800c9c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9c4:	f04f 0900 	mov.w	r9, #0
 800c9c8:	e7de      	b.n	800c988 <_printf_float+0x168>
 800c9ca:	b913      	cbnz	r3, 800c9d2 <_printf_float+0x1b2>
 800c9cc:	6822      	ldr	r2, [r4, #0]
 800c9ce:	07d2      	lsls	r2, r2, #31
 800c9d0:	d501      	bpl.n	800c9d6 <_printf_float+0x1b6>
 800c9d2:	3302      	adds	r3, #2
 800c9d4:	e7f4      	b.n	800c9c0 <_printf_float+0x1a0>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e7f2      	b.n	800c9c0 <_printf_float+0x1a0>
 800c9da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e0:	4299      	cmp	r1, r3
 800c9e2:	db05      	blt.n	800c9f0 <_printf_float+0x1d0>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	6121      	str	r1, [r4, #16]
 800c9e8:	07d8      	lsls	r0, r3, #31
 800c9ea:	d5ea      	bpl.n	800c9c2 <_printf_float+0x1a2>
 800c9ec:	1c4b      	adds	r3, r1, #1
 800c9ee:	e7e7      	b.n	800c9c0 <_printf_float+0x1a0>
 800c9f0:	2900      	cmp	r1, #0
 800c9f2:	bfd4      	ite	le
 800c9f4:	f1c1 0202 	rsble	r2, r1, #2
 800c9f8:	2201      	movgt	r2, #1
 800c9fa:	4413      	add	r3, r2
 800c9fc:	e7e0      	b.n	800c9c0 <_printf_float+0x1a0>
 800c9fe:	6823      	ldr	r3, [r4, #0]
 800ca00:	055a      	lsls	r2, r3, #21
 800ca02:	d407      	bmi.n	800ca14 <_printf_float+0x1f4>
 800ca04:	6923      	ldr	r3, [r4, #16]
 800ca06:	4642      	mov	r2, r8
 800ca08:	4631      	mov	r1, r6
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	47b8      	blx	r7
 800ca0e:	3001      	adds	r0, #1
 800ca10:	d12c      	bne.n	800ca6c <_printf_float+0x24c>
 800ca12:	e764      	b.n	800c8de <_printf_float+0xbe>
 800ca14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca18:	f240 80e0 	bls.w	800cbdc <_printf_float+0x3bc>
 800ca1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca20:	2200      	movs	r2, #0
 800ca22:	2300      	movs	r3, #0
 800ca24:	f7f4 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d034      	beq.n	800ca96 <_printf_float+0x276>
 800ca2c:	4a37      	ldr	r2, [pc, #220]	; (800cb0c <_printf_float+0x2ec>)
 800ca2e:	2301      	movs	r3, #1
 800ca30:	4631      	mov	r1, r6
 800ca32:	4628      	mov	r0, r5
 800ca34:	47b8      	blx	r7
 800ca36:	3001      	adds	r0, #1
 800ca38:	f43f af51 	beq.w	800c8de <_printf_float+0xbe>
 800ca3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca40:	429a      	cmp	r2, r3
 800ca42:	db02      	blt.n	800ca4a <_printf_float+0x22a>
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	07d8      	lsls	r0, r3, #31
 800ca48:	d510      	bpl.n	800ca6c <_printf_float+0x24c>
 800ca4a:	ee18 3a10 	vmov	r3, s16
 800ca4e:	4652      	mov	r2, sl
 800ca50:	4631      	mov	r1, r6
 800ca52:	4628      	mov	r0, r5
 800ca54:	47b8      	blx	r7
 800ca56:	3001      	adds	r0, #1
 800ca58:	f43f af41 	beq.w	800c8de <_printf_float+0xbe>
 800ca5c:	f04f 0800 	mov.w	r8, #0
 800ca60:	f104 091a 	add.w	r9, r4, #26
 800ca64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca66:	3b01      	subs	r3, #1
 800ca68:	4543      	cmp	r3, r8
 800ca6a:	dc09      	bgt.n	800ca80 <_printf_float+0x260>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	079b      	lsls	r3, r3, #30
 800ca70:	f100 8107 	bmi.w	800cc82 <_printf_float+0x462>
 800ca74:	68e0      	ldr	r0, [r4, #12]
 800ca76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca78:	4298      	cmp	r0, r3
 800ca7a:	bfb8      	it	lt
 800ca7c:	4618      	movlt	r0, r3
 800ca7e:	e730      	b.n	800c8e2 <_printf_float+0xc2>
 800ca80:	2301      	movs	r3, #1
 800ca82:	464a      	mov	r2, r9
 800ca84:	4631      	mov	r1, r6
 800ca86:	4628      	mov	r0, r5
 800ca88:	47b8      	blx	r7
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	f43f af27 	beq.w	800c8de <_printf_float+0xbe>
 800ca90:	f108 0801 	add.w	r8, r8, #1
 800ca94:	e7e6      	b.n	800ca64 <_printf_float+0x244>
 800ca96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	dc39      	bgt.n	800cb10 <_printf_float+0x2f0>
 800ca9c:	4a1b      	ldr	r2, [pc, #108]	; (800cb0c <_printf_float+0x2ec>)
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4631      	mov	r1, r6
 800caa2:	4628      	mov	r0, r5
 800caa4:	47b8      	blx	r7
 800caa6:	3001      	adds	r0, #1
 800caa8:	f43f af19 	beq.w	800c8de <_printf_float+0xbe>
 800caac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cab0:	4313      	orrs	r3, r2
 800cab2:	d102      	bne.n	800caba <_printf_float+0x29a>
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	07d9      	lsls	r1, r3, #31
 800cab8:	d5d8      	bpl.n	800ca6c <_printf_float+0x24c>
 800caba:	ee18 3a10 	vmov	r3, s16
 800cabe:	4652      	mov	r2, sl
 800cac0:	4631      	mov	r1, r6
 800cac2:	4628      	mov	r0, r5
 800cac4:	47b8      	blx	r7
 800cac6:	3001      	adds	r0, #1
 800cac8:	f43f af09 	beq.w	800c8de <_printf_float+0xbe>
 800cacc:	f04f 0900 	mov.w	r9, #0
 800cad0:	f104 0a1a 	add.w	sl, r4, #26
 800cad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad6:	425b      	negs	r3, r3
 800cad8:	454b      	cmp	r3, r9
 800cada:	dc01      	bgt.n	800cae0 <_printf_float+0x2c0>
 800cadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cade:	e792      	b.n	800ca06 <_printf_float+0x1e6>
 800cae0:	2301      	movs	r3, #1
 800cae2:	4652      	mov	r2, sl
 800cae4:	4631      	mov	r1, r6
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b8      	blx	r7
 800caea:	3001      	adds	r0, #1
 800caec:	f43f aef7 	beq.w	800c8de <_printf_float+0xbe>
 800caf0:	f109 0901 	add.w	r9, r9, #1
 800caf4:	e7ee      	b.n	800cad4 <_printf_float+0x2b4>
 800caf6:	bf00      	nop
 800caf8:	7fefffff 	.word	0x7fefffff
 800cafc:	0800f8dc 	.word	0x0800f8dc
 800cb00:	0800f8e0 	.word	0x0800f8e0
 800cb04:	0800f8e4 	.word	0x0800f8e4
 800cb08:	0800f8e8 	.word	0x0800f8e8
 800cb0c:	0800f8ec 	.word	0x0800f8ec
 800cb10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb14:	429a      	cmp	r2, r3
 800cb16:	bfa8      	it	ge
 800cb18:	461a      	movge	r2, r3
 800cb1a:	2a00      	cmp	r2, #0
 800cb1c:	4691      	mov	r9, r2
 800cb1e:	dc37      	bgt.n	800cb90 <_printf_float+0x370>
 800cb20:	f04f 0b00 	mov.w	fp, #0
 800cb24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb28:	f104 021a 	add.w	r2, r4, #26
 800cb2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb2e:	9305      	str	r3, [sp, #20]
 800cb30:	eba3 0309 	sub.w	r3, r3, r9
 800cb34:	455b      	cmp	r3, fp
 800cb36:	dc33      	bgt.n	800cba0 <_printf_float+0x380>
 800cb38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	db3b      	blt.n	800cbb8 <_printf_float+0x398>
 800cb40:	6823      	ldr	r3, [r4, #0]
 800cb42:	07da      	lsls	r2, r3, #31
 800cb44:	d438      	bmi.n	800cbb8 <_printf_float+0x398>
 800cb46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cb4a:	eba2 0903 	sub.w	r9, r2, r3
 800cb4e:	9b05      	ldr	r3, [sp, #20]
 800cb50:	1ad2      	subs	r2, r2, r3
 800cb52:	4591      	cmp	r9, r2
 800cb54:	bfa8      	it	ge
 800cb56:	4691      	movge	r9, r2
 800cb58:	f1b9 0f00 	cmp.w	r9, #0
 800cb5c:	dc35      	bgt.n	800cbca <_printf_float+0x3aa>
 800cb5e:	f04f 0800 	mov.w	r8, #0
 800cb62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb66:	f104 0a1a 	add.w	sl, r4, #26
 800cb6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	eba3 0309 	sub.w	r3, r3, r9
 800cb74:	4543      	cmp	r3, r8
 800cb76:	f77f af79 	ble.w	800ca6c <_printf_float+0x24c>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	4652      	mov	r2, sl
 800cb7e:	4631      	mov	r1, r6
 800cb80:	4628      	mov	r0, r5
 800cb82:	47b8      	blx	r7
 800cb84:	3001      	adds	r0, #1
 800cb86:	f43f aeaa 	beq.w	800c8de <_printf_float+0xbe>
 800cb8a:	f108 0801 	add.w	r8, r8, #1
 800cb8e:	e7ec      	b.n	800cb6a <_printf_float+0x34a>
 800cb90:	4613      	mov	r3, r2
 800cb92:	4631      	mov	r1, r6
 800cb94:	4642      	mov	r2, r8
 800cb96:	4628      	mov	r0, r5
 800cb98:	47b8      	blx	r7
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	d1c0      	bne.n	800cb20 <_printf_float+0x300>
 800cb9e:	e69e      	b.n	800c8de <_printf_float+0xbe>
 800cba0:	2301      	movs	r3, #1
 800cba2:	4631      	mov	r1, r6
 800cba4:	4628      	mov	r0, r5
 800cba6:	9205      	str	r2, [sp, #20]
 800cba8:	47b8      	blx	r7
 800cbaa:	3001      	adds	r0, #1
 800cbac:	f43f ae97 	beq.w	800c8de <_printf_float+0xbe>
 800cbb0:	9a05      	ldr	r2, [sp, #20]
 800cbb2:	f10b 0b01 	add.w	fp, fp, #1
 800cbb6:	e7b9      	b.n	800cb2c <_printf_float+0x30c>
 800cbb8:	ee18 3a10 	vmov	r3, s16
 800cbbc:	4652      	mov	r2, sl
 800cbbe:	4631      	mov	r1, r6
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	47b8      	blx	r7
 800cbc4:	3001      	adds	r0, #1
 800cbc6:	d1be      	bne.n	800cb46 <_printf_float+0x326>
 800cbc8:	e689      	b.n	800c8de <_printf_float+0xbe>
 800cbca:	9a05      	ldr	r2, [sp, #20]
 800cbcc:	464b      	mov	r3, r9
 800cbce:	4442      	add	r2, r8
 800cbd0:	4631      	mov	r1, r6
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	47b8      	blx	r7
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	d1c1      	bne.n	800cb5e <_printf_float+0x33e>
 800cbda:	e680      	b.n	800c8de <_printf_float+0xbe>
 800cbdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbde:	2a01      	cmp	r2, #1
 800cbe0:	dc01      	bgt.n	800cbe6 <_printf_float+0x3c6>
 800cbe2:	07db      	lsls	r3, r3, #31
 800cbe4:	d53a      	bpl.n	800cc5c <_printf_float+0x43c>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	4642      	mov	r2, r8
 800cbea:	4631      	mov	r1, r6
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b8      	blx	r7
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	f43f ae74 	beq.w	800c8de <_printf_float+0xbe>
 800cbf6:	ee18 3a10 	vmov	r3, s16
 800cbfa:	4652      	mov	r2, sl
 800cbfc:	4631      	mov	r1, r6
 800cbfe:	4628      	mov	r0, r5
 800cc00:	47b8      	blx	r7
 800cc02:	3001      	adds	r0, #1
 800cc04:	f43f ae6b 	beq.w	800c8de <_printf_float+0xbe>
 800cc08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cc14:	f7f3 ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc18:	b9d8      	cbnz	r0, 800cc52 <_printf_float+0x432>
 800cc1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cc1e:	f108 0201 	add.w	r2, r8, #1
 800cc22:	4631      	mov	r1, r6
 800cc24:	4628      	mov	r0, r5
 800cc26:	47b8      	blx	r7
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d10e      	bne.n	800cc4a <_printf_float+0x42a>
 800cc2c:	e657      	b.n	800c8de <_printf_float+0xbe>
 800cc2e:	2301      	movs	r3, #1
 800cc30:	4652      	mov	r2, sl
 800cc32:	4631      	mov	r1, r6
 800cc34:	4628      	mov	r0, r5
 800cc36:	47b8      	blx	r7
 800cc38:	3001      	adds	r0, #1
 800cc3a:	f43f ae50 	beq.w	800c8de <_printf_float+0xbe>
 800cc3e:	f108 0801 	add.w	r8, r8, #1
 800cc42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc44:	3b01      	subs	r3, #1
 800cc46:	4543      	cmp	r3, r8
 800cc48:	dcf1      	bgt.n	800cc2e <_printf_float+0x40e>
 800cc4a:	464b      	mov	r3, r9
 800cc4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc50:	e6da      	b.n	800ca08 <_printf_float+0x1e8>
 800cc52:	f04f 0800 	mov.w	r8, #0
 800cc56:	f104 0a1a 	add.w	sl, r4, #26
 800cc5a:	e7f2      	b.n	800cc42 <_printf_float+0x422>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	4642      	mov	r2, r8
 800cc60:	e7df      	b.n	800cc22 <_printf_float+0x402>
 800cc62:	2301      	movs	r3, #1
 800cc64:	464a      	mov	r2, r9
 800cc66:	4631      	mov	r1, r6
 800cc68:	4628      	mov	r0, r5
 800cc6a:	47b8      	blx	r7
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	f43f ae36 	beq.w	800c8de <_printf_float+0xbe>
 800cc72:	f108 0801 	add.w	r8, r8, #1
 800cc76:	68e3      	ldr	r3, [r4, #12]
 800cc78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc7a:	1a5b      	subs	r3, r3, r1
 800cc7c:	4543      	cmp	r3, r8
 800cc7e:	dcf0      	bgt.n	800cc62 <_printf_float+0x442>
 800cc80:	e6f8      	b.n	800ca74 <_printf_float+0x254>
 800cc82:	f04f 0800 	mov.w	r8, #0
 800cc86:	f104 0919 	add.w	r9, r4, #25
 800cc8a:	e7f4      	b.n	800cc76 <_printf_float+0x456>

0800cc8c <_printf_common>:
 800cc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc90:	4616      	mov	r6, r2
 800cc92:	4699      	mov	r9, r3
 800cc94:	688a      	ldr	r2, [r1, #8]
 800cc96:	690b      	ldr	r3, [r1, #16]
 800cc98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	bfb8      	it	lt
 800cca0:	4613      	movlt	r3, r2
 800cca2:	6033      	str	r3, [r6, #0]
 800cca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cca8:	4607      	mov	r7, r0
 800ccaa:	460c      	mov	r4, r1
 800ccac:	b10a      	cbz	r2, 800ccb2 <_printf_common+0x26>
 800ccae:	3301      	adds	r3, #1
 800ccb0:	6033      	str	r3, [r6, #0]
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	0699      	lsls	r1, r3, #26
 800ccb6:	bf42      	ittt	mi
 800ccb8:	6833      	ldrmi	r3, [r6, #0]
 800ccba:	3302      	addmi	r3, #2
 800ccbc:	6033      	strmi	r3, [r6, #0]
 800ccbe:	6825      	ldr	r5, [r4, #0]
 800ccc0:	f015 0506 	ands.w	r5, r5, #6
 800ccc4:	d106      	bne.n	800ccd4 <_printf_common+0x48>
 800ccc6:	f104 0a19 	add.w	sl, r4, #25
 800ccca:	68e3      	ldr	r3, [r4, #12]
 800cccc:	6832      	ldr	r2, [r6, #0]
 800ccce:	1a9b      	subs	r3, r3, r2
 800ccd0:	42ab      	cmp	r3, r5
 800ccd2:	dc26      	bgt.n	800cd22 <_printf_common+0x96>
 800ccd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccd8:	1e13      	subs	r3, r2, #0
 800ccda:	6822      	ldr	r2, [r4, #0]
 800ccdc:	bf18      	it	ne
 800ccde:	2301      	movne	r3, #1
 800cce0:	0692      	lsls	r2, r2, #26
 800cce2:	d42b      	bmi.n	800cd3c <_printf_common+0xb0>
 800cce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cce8:	4649      	mov	r1, r9
 800ccea:	4638      	mov	r0, r7
 800ccec:	47c0      	blx	r8
 800ccee:	3001      	adds	r0, #1
 800ccf0:	d01e      	beq.n	800cd30 <_printf_common+0xa4>
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	6922      	ldr	r2, [r4, #16]
 800ccf6:	f003 0306 	and.w	r3, r3, #6
 800ccfa:	2b04      	cmp	r3, #4
 800ccfc:	bf02      	ittt	eq
 800ccfe:	68e5      	ldreq	r5, [r4, #12]
 800cd00:	6833      	ldreq	r3, [r6, #0]
 800cd02:	1aed      	subeq	r5, r5, r3
 800cd04:	68a3      	ldr	r3, [r4, #8]
 800cd06:	bf0c      	ite	eq
 800cd08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd0c:	2500      	movne	r5, #0
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	bfc4      	itt	gt
 800cd12:	1a9b      	subgt	r3, r3, r2
 800cd14:	18ed      	addgt	r5, r5, r3
 800cd16:	2600      	movs	r6, #0
 800cd18:	341a      	adds	r4, #26
 800cd1a:	42b5      	cmp	r5, r6
 800cd1c:	d11a      	bne.n	800cd54 <_printf_common+0xc8>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	e008      	b.n	800cd34 <_printf_common+0xa8>
 800cd22:	2301      	movs	r3, #1
 800cd24:	4652      	mov	r2, sl
 800cd26:	4649      	mov	r1, r9
 800cd28:	4638      	mov	r0, r7
 800cd2a:	47c0      	blx	r8
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	d103      	bne.n	800cd38 <_printf_common+0xac>
 800cd30:	f04f 30ff 	mov.w	r0, #4294967295
 800cd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd38:	3501      	adds	r5, #1
 800cd3a:	e7c6      	b.n	800ccca <_printf_common+0x3e>
 800cd3c:	18e1      	adds	r1, r4, r3
 800cd3e:	1c5a      	adds	r2, r3, #1
 800cd40:	2030      	movs	r0, #48	; 0x30
 800cd42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd46:	4422      	add	r2, r4
 800cd48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd50:	3302      	adds	r3, #2
 800cd52:	e7c7      	b.n	800cce4 <_printf_common+0x58>
 800cd54:	2301      	movs	r3, #1
 800cd56:	4622      	mov	r2, r4
 800cd58:	4649      	mov	r1, r9
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	47c0      	blx	r8
 800cd5e:	3001      	adds	r0, #1
 800cd60:	d0e6      	beq.n	800cd30 <_printf_common+0xa4>
 800cd62:	3601      	adds	r6, #1
 800cd64:	e7d9      	b.n	800cd1a <_printf_common+0x8e>
	...

0800cd68 <_printf_i>:
 800cd68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd6c:	7e0f      	ldrb	r7, [r1, #24]
 800cd6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd70:	2f78      	cmp	r7, #120	; 0x78
 800cd72:	4691      	mov	r9, r2
 800cd74:	4680      	mov	r8, r0
 800cd76:	460c      	mov	r4, r1
 800cd78:	469a      	mov	sl, r3
 800cd7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd7e:	d807      	bhi.n	800cd90 <_printf_i+0x28>
 800cd80:	2f62      	cmp	r7, #98	; 0x62
 800cd82:	d80a      	bhi.n	800cd9a <_printf_i+0x32>
 800cd84:	2f00      	cmp	r7, #0
 800cd86:	f000 80d4 	beq.w	800cf32 <_printf_i+0x1ca>
 800cd8a:	2f58      	cmp	r7, #88	; 0x58
 800cd8c:	f000 80c0 	beq.w	800cf10 <_printf_i+0x1a8>
 800cd90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd98:	e03a      	b.n	800ce10 <_printf_i+0xa8>
 800cd9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd9e:	2b15      	cmp	r3, #21
 800cda0:	d8f6      	bhi.n	800cd90 <_printf_i+0x28>
 800cda2:	a101      	add	r1, pc, #4	; (adr r1, 800cda8 <_printf_i+0x40>)
 800cda4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cda8:	0800ce01 	.word	0x0800ce01
 800cdac:	0800ce15 	.word	0x0800ce15
 800cdb0:	0800cd91 	.word	0x0800cd91
 800cdb4:	0800cd91 	.word	0x0800cd91
 800cdb8:	0800cd91 	.word	0x0800cd91
 800cdbc:	0800cd91 	.word	0x0800cd91
 800cdc0:	0800ce15 	.word	0x0800ce15
 800cdc4:	0800cd91 	.word	0x0800cd91
 800cdc8:	0800cd91 	.word	0x0800cd91
 800cdcc:	0800cd91 	.word	0x0800cd91
 800cdd0:	0800cd91 	.word	0x0800cd91
 800cdd4:	0800cf19 	.word	0x0800cf19
 800cdd8:	0800ce41 	.word	0x0800ce41
 800cddc:	0800ced3 	.word	0x0800ced3
 800cde0:	0800cd91 	.word	0x0800cd91
 800cde4:	0800cd91 	.word	0x0800cd91
 800cde8:	0800cf3b 	.word	0x0800cf3b
 800cdec:	0800cd91 	.word	0x0800cd91
 800cdf0:	0800ce41 	.word	0x0800ce41
 800cdf4:	0800cd91 	.word	0x0800cd91
 800cdf8:	0800cd91 	.word	0x0800cd91
 800cdfc:	0800cedb 	.word	0x0800cedb
 800ce00:	682b      	ldr	r3, [r5, #0]
 800ce02:	1d1a      	adds	r2, r3, #4
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	602a      	str	r2, [r5, #0]
 800ce08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce10:	2301      	movs	r3, #1
 800ce12:	e09f      	b.n	800cf54 <_printf_i+0x1ec>
 800ce14:	6820      	ldr	r0, [r4, #0]
 800ce16:	682b      	ldr	r3, [r5, #0]
 800ce18:	0607      	lsls	r7, r0, #24
 800ce1a:	f103 0104 	add.w	r1, r3, #4
 800ce1e:	6029      	str	r1, [r5, #0]
 800ce20:	d501      	bpl.n	800ce26 <_printf_i+0xbe>
 800ce22:	681e      	ldr	r6, [r3, #0]
 800ce24:	e003      	b.n	800ce2e <_printf_i+0xc6>
 800ce26:	0646      	lsls	r6, r0, #25
 800ce28:	d5fb      	bpl.n	800ce22 <_printf_i+0xba>
 800ce2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ce2e:	2e00      	cmp	r6, #0
 800ce30:	da03      	bge.n	800ce3a <_printf_i+0xd2>
 800ce32:	232d      	movs	r3, #45	; 0x2d
 800ce34:	4276      	negs	r6, r6
 800ce36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce3a:	485a      	ldr	r0, [pc, #360]	; (800cfa4 <_printf_i+0x23c>)
 800ce3c:	230a      	movs	r3, #10
 800ce3e:	e012      	b.n	800ce66 <_printf_i+0xfe>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	6820      	ldr	r0, [r4, #0]
 800ce44:	1d19      	adds	r1, r3, #4
 800ce46:	6029      	str	r1, [r5, #0]
 800ce48:	0605      	lsls	r5, r0, #24
 800ce4a:	d501      	bpl.n	800ce50 <_printf_i+0xe8>
 800ce4c:	681e      	ldr	r6, [r3, #0]
 800ce4e:	e002      	b.n	800ce56 <_printf_i+0xee>
 800ce50:	0641      	lsls	r1, r0, #25
 800ce52:	d5fb      	bpl.n	800ce4c <_printf_i+0xe4>
 800ce54:	881e      	ldrh	r6, [r3, #0]
 800ce56:	4853      	ldr	r0, [pc, #332]	; (800cfa4 <_printf_i+0x23c>)
 800ce58:	2f6f      	cmp	r7, #111	; 0x6f
 800ce5a:	bf0c      	ite	eq
 800ce5c:	2308      	moveq	r3, #8
 800ce5e:	230a      	movne	r3, #10
 800ce60:	2100      	movs	r1, #0
 800ce62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce66:	6865      	ldr	r5, [r4, #4]
 800ce68:	60a5      	str	r5, [r4, #8]
 800ce6a:	2d00      	cmp	r5, #0
 800ce6c:	bfa2      	ittt	ge
 800ce6e:	6821      	ldrge	r1, [r4, #0]
 800ce70:	f021 0104 	bicge.w	r1, r1, #4
 800ce74:	6021      	strge	r1, [r4, #0]
 800ce76:	b90e      	cbnz	r6, 800ce7c <_printf_i+0x114>
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	d04b      	beq.n	800cf14 <_printf_i+0x1ac>
 800ce7c:	4615      	mov	r5, r2
 800ce7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce82:	fb03 6711 	mls	r7, r3, r1, r6
 800ce86:	5dc7      	ldrb	r7, [r0, r7]
 800ce88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce8c:	4637      	mov	r7, r6
 800ce8e:	42bb      	cmp	r3, r7
 800ce90:	460e      	mov	r6, r1
 800ce92:	d9f4      	bls.n	800ce7e <_printf_i+0x116>
 800ce94:	2b08      	cmp	r3, #8
 800ce96:	d10b      	bne.n	800ceb0 <_printf_i+0x148>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	07de      	lsls	r6, r3, #31
 800ce9c:	d508      	bpl.n	800ceb0 <_printf_i+0x148>
 800ce9e:	6923      	ldr	r3, [r4, #16]
 800cea0:	6861      	ldr	r1, [r4, #4]
 800cea2:	4299      	cmp	r1, r3
 800cea4:	bfde      	ittt	le
 800cea6:	2330      	movle	r3, #48	; 0x30
 800cea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ceac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ceb0:	1b52      	subs	r2, r2, r5
 800ceb2:	6122      	str	r2, [r4, #16]
 800ceb4:	f8cd a000 	str.w	sl, [sp]
 800ceb8:	464b      	mov	r3, r9
 800ceba:	aa03      	add	r2, sp, #12
 800cebc:	4621      	mov	r1, r4
 800cebe:	4640      	mov	r0, r8
 800cec0:	f7ff fee4 	bl	800cc8c <_printf_common>
 800cec4:	3001      	adds	r0, #1
 800cec6:	d14a      	bne.n	800cf5e <_printf_i+0x1f6>
 800cec8:	f04f 30ff 	mov.w	r0, #4294967295
 800cecc:	b004      	add	sp, #16
 800cece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	f043 0320 	orr.w	r3, r3, #32
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	4833      	ldr	r0, [pc, #204]	; (800cfa8 <_printf_i+0x240>)
 800cedc:	2778      	movs	r7, #120	; 0x78
 800cede:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	6829      	ldr	r1, [r5, #0]
 800cee6:	061f      	lsls	r7, r3, #24
 800cee8:	f851 6b04 	ldr.w	r6, [r1], #4
 800ceec:	d402      	bmi.n	800cef4 <_printf_i+0x18c>
 800ceee:	065f      	lsls	r7, r3, #25
 800cef0:	bf48      	it	mi
 800cef2:	b2b6      	uxthmi	r6, r6
 800cef4:	07df      	lsls	r7, r3, #31
 800cef6:	bf48      	it	mi
 800cef8:	f043 0320 	orrmi.w	r3, r3, #32
 800cefc:	6029      	str	r1, [r5, #0]
 800cefe:	bf48      	it	mi
 800cf00:	6023      	strmi	r3, [r4, #0]
 800cf02:	b91e      	cbnz	r6, 800cf0c <_printf_i+0x1a4>
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	f023 0320 	bic.w	r3, r3, #32
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	2310      	movs	r3, #16
 800cf0e:	e7a7      	b.n	800ce60 <_printf_i+0xf8>
 800cf10:	4824      	ldr	r0, [pc, #144]	; (800cfa4 <_printf_i+0x23c>)
 800cf12:	e7e4      	b.n	800cede <_printf_i+0x176>
 800cf14:	4615      	mov	r5, r2
 800cf16:	e7bd      	b.n	800ce94 <_printf_i+0x12c>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	6826      	ldr	r6, [r4, #0]
 800cf1c:	6961      	ldr	r1, [r4, #20]
 800cf1e:	1d18      	adds	r0, r3, #4
 800cf20:	6028      	str	r0, [r5, #0]
 800cf22:	0635      	lsls	r5, r6, #24
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	d501      	bpl.n	800cf2c <_printf_i+0x1c4>
 800cf28:	6019      	str	r1, [r3, #0]
 800cf2a:	e002      	b.n	800cf32 <_printf_i+0x1ca>
 800cf2c:	0670      	lsls	r0, r6, #25
 800cf2e:	d5fb      	bpl.n	800cf28 <_printf_i+0x1c0>
 800cf30:	8019      	strh	r1, [r3, #0]
 800cf32:	2300      	movs	r3, #0
 800cf34:	6123      	str	r3, [r4, #16]
 800cf36:	4615      	mov	r5, r2
 800cf38:	e7bc      	b.n	800ceb4 <_printf_i+0x14c>
 800cf3a:	682b      	ldr	r3, [r5, #0]
 800cf3c:	1d1a      	adds	r2, r3, #4
 800cf3e:	602a      	str	r2, [r5, #0]
 800cf40:	681d      	ldr	r5, [r3, #0]
 800cf42:	6862      	ldr	r2, [r4, #4]
 800cf44:	2100      	movs	r1, #0
 800cf46:	4628      	mov	r0, r5
 800cf48:	f7f3 f942 	bl	80001d0 <memchr>
 800cf4c:	b108      	cbz	r0, 800cf52 <_printf_i+0x1ea>
 800cf4e:	1b40      	subs	r0, r0, r5
 800cf50:	6060      	str	r0, [r4, #4]
 800cf52:	6863      	ldr	r3, [r4, #4]
 800cf54:	6123      	str	r3, [r4, #16]
 800cf56:	2300      	movs	r3, #0
 800cf58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf5c:	e7aa      	b.n	800ceb4 <_printf_i+0x14c>
 800cf5e:	6923      	ldr	r3, [r4, #16]
 800cf60:	462a      	mov	r2, r5
 800cf62:	4649      	mov	r1, r9
 800cf64:	4640      	mov	r0, r8
 800cf66:	47d0      	blx	sl
 800cf68:	3001      	adds	r0, #1
 800cf6a:	d0ad      	beq.n	800cec8 <_printf_i+0x160>
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	079b      	lsls	r3, r3, #30
 800cf70:	d413      	bmi.n	800cf9a <_printf_i+0x232>
 800cf72:	68e0      	ldr	r0, [r4, #12]
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	4298      	cmp	r0, r3
 800cf78:	bfb8      	it	lt
 800cf7a:	4618      	movlt	r0, r3
 800cf7c:	e7a6      	b.n	800cecc <_printf_i+0x164>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	4632      	mov	r2, r6
 800cf82:	4649      	mov	r1, r9
 800cf84:	4640      	mov	r0, r8
 800cf86:	47d0      	blx	sl
 800cf88:	3001      	adds	r0, #1
 800cf8a:	d09d      	beq.n	800cec8 <_printf_i+0x160>
 800cf8c:	3501      	adds	r5, #1
 800cf8e:	68e3      	ldr	r3, [r4, #12]
 800cf90:	9903      	ldr	r1, [sp, #12]
 800cf92:	1a5b      	subs	r3, r3, r1
 800cf94:	42ab      	cmp	r3, r5
 800cf96:	dcf2      	bgt.n	800cf7e <_printf_i+0x216>
 800cf98:	e7eb      	b.n	800cf72 <_printf_i+0x20a>
 800cf9a:	2500      	movs	r5, #0
 800cf9c:	f104 0619 	add.w	r6, r4, #25
 800cfa0:	e7f5      	b.n	800cf8e <_printf_i+0x226>
 800cfa2:	bf00      	nop
 800cfa4:	0800f8ee 	.word	0x0800f8ee
 800cfa8:	0800f8ff 	.word	0x0800f8ff

0800cfac <std>:
 800cfac:	2300      	movs	r3, #0
 800cfae:	b510      	push	{r4, lr}
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	e9c0 3300 	strd	r3, r3, [r0]
 800cfb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfba:	6083      	str	r3, [r0, #8]
 800cfbc:	8181      	strh	r1, [r0, #12]
 800cfbe:	6643      	str	r3, [r0, #100]	; 0x64
 800cfc0:	81c2      	strh	r2, [r0, #14]
 800cfc2:	6183      	str	r3, [r0, #24]
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	2208      	movs	r2, #8
 800cfc8:	305c      	adds	r0, #92	; 0x5c
 800cfca:	f000 fa05 	bl	800d3d8 <memset>
 800cfce:	4b05      	ldr	r3, [pc, #20]	; (800cfe4 <std+0x38>)
 800cfd0:	6263      	str	r3, [r4, #36]	; 0x24
 800cfd2:	4b05      	ldr	r3, [pc, #20]	; (800cfe8 <std+0x3c>)
 800cfd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfd6:	4b05      	ldr	r3, [pc, #20]	; (800cfec <std+0x40>)
 800cfd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfda:	4b05      	ldr	r3, [pc, #20]	; (800cff0 <std+0x44>)
 800cfdc:	6224      	str	r4, [r4, #32]
 800cfde:	6323      	str	r3, [r4, #48]	; 0x30
 800cfe0:	bd10      	pop	{r4, pc}
 800cfe2:	bf00      	nop
 800cfe4:	0800d229 	.word	0x0800d229
 800cfe8:	0800d24b 	.word	0x0800d24b
 800cfec:	0800d283 	.word	0x0800d283
 800cff0:	0800d2a7 	.word	0x0800d2a7

0800cff4 <stdio_exit_handler>:
 800cff4:	4a02      	ldr	r2, [pc, #8]	; (800d000 <stdio_exit_handler+0xc>)
 800cff6:	4903      	ldr	r1, [pc, #12]	; (800d004 <stdio_exit_handler+0x10>)
 800cff8:	4803      	ldr	r0, [pc, #12]	; (800d008 <stdio_exit_handler+0x14>)
 800cffa:	f000 b869 	b.w	800d0d0 <_fwalk_sglue>
 800cffe:	bf00      	nop
 800d000:	2000010c 	.word	0x2000010c
 800d004:	0800f121 	.word	0x0800f121
 800d008:	20000118 	.word	0x20000118

0800d00c <cleanup_stdio>:
 800d00c:	6841      	ldr	r1, [r0, #4]
 800d00e:	4b0c      	ldr	r3, [pc, #48]	; (800d040 <cleanup_stdio+0x34>)
 800d010:	4299      	cmp	r1, r3
 800d012:	b510      	push	{r4, lr}
 800d014:	4604      	mov	r4, r0
 800d016:	d001      	beq.n	800d01c <cleanup_stdio+0x10>
 800d018:	f002 f882 	bl	800f120 <_fflush_r>
 800d01c:	68a1      	ldr	r1, [r4, #8]
 800d01e:	4b09      	ldr	r3, [pc, #36]	; (800d044 <cleanup_stdio+0x38>)
 800d020:	4299      	cmp	r1, r3
 800d022:	d002      	beq.n	800d02a <cleanup_stdio+0x1e>
 800d024:	4620      	mov	r0, r4
 800d026:	f002 f87b 	bl	800f120 <_fflush_r>
 800d02a:	68e1      	ldr	r1, [r4, #12]
 800d02c:	4b06      	ldr	r3, [pc, #24]	; (800d048 <cleanup_stdio+0x3c>)
 800d02e:	4299      	cmp	r1, r3
 800d030:	d004      	beq.n	800d03c <cleanup_stdio+0x30>
 800d032:	4620      	mov	r0, r4
 800d034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d038:	f002 b872 	b.w	800f120 <_fflush_r>
 800d03c:	bd10      	pop	{r4, pc}
 800d03e:	bf00      	nop
 800d040:	20001604 	.word	0x20001604
 800d044:	2000166c 	.word	0x2000166c
 800d048:	200016d4 	.word	0x200016d4

0800d04c <global_stdio_init.part.0>:
 800d04c:	b510      	push	{r4, lr}
 800d04e:	4b0b      	ldr	r3, [pc, #44]	; (800d07c <global_stdio_init.part.0+0x30>)
 800d050:	4c0b      	ldr	r4, [pc, #44]	; (800d080 <global_stdio_init.part.0+0x34>)
 800d052:	4a0c      	ldr	r2, [pc, #48]	; (800d084 <global_stdio_init.part.0+0x38>)
 800d054:	601a      	str	r2, [r3, #0]
 800d056:	4620      	mov	r0, r4
 800d058:	2200      	movs	r2, #0
 800d05a:	2104      	movs	r1, #4
 800d05c:	f7ff ffa6 	bl	800cfac <std>
 800d060:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d064:	2201      	movs	r2, #1
 800d066:	2109      	movs	r1, #9
 800d068:	f7ff ffa0 	bl	800cfac <std>
 800d06c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d070:	2202      	movs	r2, #2
 800d072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d076:	2112      	movs	r1, #18
 800d078:	f7ff bf98 	b.w	800cfac <std>
 800d07c:	2000173c 	.word	0x2000173c
 800d080:	20001604 	.word	0x20001604
 800d084:	0800cff5 	.word	0x0800cff5

0800d088 <__sfp_lock_acquire>:
 800d088:	4801      	ldr	r0, [pc, #4]	; (800d090 <__sfp_lock_acquire+0x8>)
 800d08a:	f000 ba21 	b.w	800d4d0 <__retarget_lock_acquire_recursive>
 800d08e:	bf00      	nop
 800d090:	20001745 	.word	0x20001745

0800d094 <__sfp_lock_release>:
 800d094:	4801      	ldr	r0, [pc, #4]	; (800d09c <__sfp_lock_release+0x8>)
 800d096:	f000 ba1c 	b.w	800d4d2 <__retarget_lock_release_recursive>
 800d09a:	bf00      	nop
 800d09c:	20001745 	.word	0x20001745

0800d0a0 <__sinit>:
 800d0a0:	b510      	push	{r4, lr}
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	f7ff fff0 	bl	800d088 <__sfp_lock_acquire>
 800d0a8:	6a23      	ldr	r3, [r4, #32]
 800d0aa:	b11b      	cbz	r3, 800d0b4 <__sinit+0x14>
 800d0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0b0:	f7ff bff0 	b.w	800d094 <__sfp_lock_release>
 800d0b4:	4b04      	ldr	r3, [pc, #16]	; (800d0c8 <__sinit+0x28>)
 800d0b6:	6223      	str	r3, [r4, #32]
 800d0b8:	4b04      	ldr	r3, [pc, #16]	; (800d0cc <__sinit+0x2c>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d1f5      	bne.n	800d0ac <__sinit+0xc>
 800d0c0:	f7ff ffc4 	bl	800d04c <global_stdio_init.part.0>
 800d0c4:	e7f2      	b.n	800d0ac <__sinit+0xc>
 800d0c6:	bf00      	nop
 800d0c8:	0800d00d 	.word	0x0800d00d
 800d0cc:	2000173c 	.word	0x2000173c

0800d0d0 <_fwalk_sglue>:
 800d0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0d4:	4607      	mov	r7, r0
 800d0d6:	4688      	mov	r8, r1
 800d0d8:	4614      	mov	r4, r2
 800d0da:	2600      	movs	r6, #0
 800d0dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0e0:	f1b9 0901 	subs.w	r9, r9, #1
 800d0e4:	d505      	bpl.n	800d0f2 <_fwalk_sglue+0x22>
 800d0e6:	6824      	ldr	r4, [r4, #0]
 800d0e8:	2c00      	cmp	r4, #0
 800d0ea:	d1f7      	bne.n	800d0dc <_fwalk_sglue+0xc>
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0f2:	89ab      	ldrh	r3, [r5, #12]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d907      	bls.n	800d108 <_fwalk_sglue+0x38>
 800d0f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	d003      	beq.n	800d108 <_fwalk_sglue+0x38>
 800d100:	4629      	mov	r1, r5
 800d102:	4638      	mov	r0, r7
 800d104:	47c0      	blx	r8
 800d106:	4306      	orrs	r6, r0
 800d108:	3568      	adds	r5, #104	; 0x68
 800d10a:	e7e9      	b.n	800d0e0 <_fwalk_sglue+0x10>

0800d10c <iprintf>:
 800d10c:	b40f      	push	{r0, r1, r2, r3}
 800d10e:	b507      	push	{r0, r1, r2, lr}
 800d110:	4906      	ldr	r1, [pc, #24]	; (800d12c <iprintf+0x20>)
 800d112:	ab04      	add	r3, sp, #16
 800d114:	6808      	ldr	r0, [r1, #0]
 800d116:	f853 2b04 	ldr.w	r2, [r3], #4
 800d11a:	6881      	ldr	r1, [r0, #8]
 800d11c:	9301      	str	r3, [sp, #4]
 800d11e:	f001 fe5f 	bl	800ede0 <_vfiprintf_r>
 800d122:	b003      	add	sp, #12
 800d124:	f85d eb04 	ldr.w	lr, [sp], #4
 800d128:	b004      	add	sp, #16
 800d12a:	4770      	bx	lr
 800d12c:	20000164 	.word	0x20000164

0800d130 <_puts_r>:
 800d130:	6a03      	ldr	r3, [r0, #32]
 800d132:	b570      	push	{r4, r5, r6, lr}
 800d134:	6884      	ldr	r4, [r0, #8]
 800d136:	4605      	mov	r5, r0
 800d138:	460e      	mov	r6, r1
 800d13a:	b90b      	cbnz	r3, 800d140 <_puts_r+0x10>
 800d13c:	f7ff ffb0 	bl	800d0a0 <__sinit>
 800d140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d142:	07db      	lsls	r3, r3, #31
 800d144:	d405      	bmi.n	800d152 <_puts_r+0x22>
 800d146:	89a3      	ldrh	r3, [r4, #12]
 800d148:	0598      	lsls	r0, r3, #22
 800d14a:	d402      	bmi.n	800d152 <_puts_r+0x22>
 800d14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d14e:	f000 f9bf 	bl	800d4d0 <__retarget_lock_acquire_recursive>
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	0719      	lsls	r1, r3, #28
 800d156:	d513      	bpl.n	800d180 <_puts_r+0x50>
 800d158:	6923      	ldr	r3, [r4, #16]
 800d15a:	b18b      	cbz	r3, 800d180 <_puts_r+0x50>
 800d15c:	3e01      	subs	r6, #1
 800d15e:	68a3      	ldr	r3, [r4, #8]
 800d160:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d164:	3b01      	subs	r3, #1
 800d166:	60a3      	str	r3, [r4, #8]
 800d168:	b9e9      	cbnz	r1, 800d1a6 <_puts_r+0x76>
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	da2e      	bge.n	800d1cc <_puts_r+0x9c>
 800d16e:	4622      	mov	r2, r4
 800d170:	210a      	movs	r1, #10
 800d172:	4628      	mov	r0, r5
 800d174:	f000 f89b 	bl	800d2ae <__swbuf_r>
 800d178:	3001      	adds	r0, #1
 800d17a:	d007      	beq.n	800d18c <_puts_r+0x5c>
 800d17c:	250a      	movs	r5, #10
 800d17e:	e007      	b.n	800d190 <_puts_r+0x60>
 800d180:	4621      	mov	r1, r4
 800d182:	4628      	mov	r0, r5
 800d184:	f000 f8d0 	bl	800d328 <__swsetup_r>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d0e7      	beq.n	800d15c <_puts_r+0x2c>
 800d18c:	f04f 35ff 	mov.w	r5, #4294967295
 800d190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d192:	07da      	lsls	r2, r3, #31
 800d194:	d405      	bmi.n	800d1a2 <_puts_r+0x72>
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	059b      	lsls	r3, r3, #22
 800d19a:	d402      	bmi.n	800d1a2 <_puts_r+0x72>
 800d19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d19e:	f000 f998 	bl	800d4d2 <__retarget_lock_release_recursive>
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	bd70      	pop	{r4, r5, r6, pc}
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	da04      	bge.n	800d1b4 <_puts_r+0x84>
 800d1aa:	69a2      	ldr	r2, [r4, #24]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	dc06      	bgt.n	800d1be <_puts_r+0x8e>
 800d1b0:	290a      	cmp	r1, #10
 800d1b2:	d004      	beq.n	800d1be <_puts_r+0x8e>
 800d1b4:	6823      	ldr	r3, [r4, #0]
 800d1b6:	1c5a      	adds	r2, r3, #1
 800d1b8:	6022      	str	r2, [r4, #0]
 800d1ba:	7019      	strb	r1, [r3, #0]
 800d1bc:	e7cf      	b.n	800d15e <_puts_r+0x2e>
 800d1be:	4622      	mov	r2, r4
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	f000 f874 	bl	800d2ae <__swbuf_r>
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	d1c9      	bne.n	800d15e <_puts_r+0x2e>
 800d1ca:	e7df      	b.n	800d18c <_puts_r+0x5c>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	250a      	movs	r5, #10
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	6022      	str	r2, [r4, #0]
 800d1d4:	701d      	strb	r5, [r3, #0]
 800d1d6:	e7db      	b.n	800d190 <_puts_r+0x60>

0800d1d8 <puts>:
 800d1d8:	4b02      	ldr	r3, [pc, #8]	; (800d1e4 <puts+0xc>)
 800d1da:	4601      	mov	r1, r0
 800d1dc:	6818      	ldr	r0, [r3, #0]
 800d1de:	f7ff bfa7 	b.w	800d130 <_puts_r>
 800d1e2:	bf00      	nop
 800d1e4:	20000164 	.word	0x20000164

0800d1e8 <siprintf>:
 800d1e8:	b40e      	push	{r1, r2, r3}
 800d1ea:	b500      	push	{lr}
 800d1ec:	b09c      	sub	sp, #112	; 0x70
 800d1ee:	ab1d      	add	r3, sp, #116	; 0x74
 800d1f0:	9002      	str	r0, [sp, #8]
 800d1f2:	9006      	str	r0, [sp, #24]
 800d1f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1f8:	4809      	ldr	r0, [pc, #36]	; (800d220 <siprintf+0x38>)
 800d1fa:	9107      	str	r1, [sp, #28]
 800d1fc:	9104      	str	r1, [sp, #16]
 800d1fe:	4909      	ldr	r1, [pc, #36]	; (800d224 <siprintf+0x3c>)
 800d200:	f853 2b04 	ldr.w	r2, [r3], #4
 800d204:	9105      	str	r1, [sp, #20]
 800d206:	6800      	ldr	r0, [r0, #0]
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	a902      	add	r1, sp, #8
 800d20c:	f001 fcc0 	bl	800eb90 <_svfiprintf_r>
 800d210:	9b02      	ldr	r3, [sp, #8]
 800d212:	2200      	movs	r2, #0
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	b01c      	add	sp, #112	; 0x70
 800d218:	f85d eb04 	ldr.w	lr, [sp], #4
 800d21c:	b003      	add	sp, #12
 800d21e:	4770      	bx	lr
 800d220:	20000164 	.word	0x20000164
 800d224:	ffff0208 	.word	0xffff0208

0800d228 <__sread>:
 800d228:	b510      	push	{r4, lr}
 800d22a:	460c      	mov	r4, r1
 800d22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d230:	f000 f900 	bl	800d434 <_read_r>
 800d234:	2800      	cmp	r0, #0
 800d236:	bfab      	itete	ge
 800d238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d23a:	89a3      	ldrhlt	r3, [r4, #12]
 800d23c:	181b      	addge	r3, r3, r0
 800d23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d242:	bfac      	ite	ge
 800d244:	6563      	strge	r3, [r4, #84]	; 0x54
 800d246:	81a3      	strhlt	r3, [r4, #12]
 800d248:	bd10      	pop	{r4, pc}

0800d24a <__swrite>:
 800d24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24e:	461f      	mov	r7, r3
 800d250:	898b      	ldrh	r3, [r1, #12]
 800d252:	05db      	lsls	r3, r3, #23
 800d254:	4605      	mov	r5, r0
 800d256:	460c      	mov	r4, r1
 800d258:	4616      	mov	r6, r2
 800d25a:	d505      	bpl.n	800d268 <__swrite+0x1e>
 800d25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d260:	2302      	movs	r3, #2
 800d262:	2200      	movs	r2, #0
 800d264:	f000 f8d4 	bl	800d410 <_lseek_r>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	4632      	mov	r2, r6
 800d276:	463b      	mov	r3, r7
 800d278:	4628      	mov	r0, r5
 800d27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27e:	f000 b8eb 	b.w	800d458 <_write_r>

0800d282 <__sseek>:
 800d282:	b510      	push	{r4, lr}
 800d284:	460c      	mov	r4, r1
 800d286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28a:	f000 f8c1 	bl	800d410 <_lseek_r>
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	bf15      	itete	ne
 800d294:	6560      	strne	r0, [r4, #84]	; 0x54
 800d296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d29e:	81a3      	strheq	r3, [r4, #12]
 800d2a0:	bf18      	it	ne
 800d2a2:	81a3      	strhne	r3, [r4, #12]
 800d2a4:	bd10      	pop	{r4, pc}

0800d2a6 <__sclose>:
 800d2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2aa:	f000 b8a1 	b.w	800d3f0 <_close_r>

0800d2ae <__swbuf_r>:
 800d2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b0:	460e      	mov	r6, r1
 800d2b2:	4614      	mov	r4, r2
 800d2b4:	4605      	mov	r5, r0
 800d2b6:	b118      	cbz	r0, 800d2c0 <__swbuf_r+0x12>
 800d2b8:	6a03      	ldr	r3, [r0, #32]
 800d2ba:	b90b      	cbnz	r3, 800d2c0 <__swbuf_r+0x12>
 800d2bc:	f7ff fef0 	bl	800d0a0 <__sinit>
 800d2c0:	69a3      	ldr	r3, [r4, #24]
 800d2c2:	60a3      	str	r3, [r4, #8]
 800d2c4:	89a3      	ldrh	r3, [r4, #12]
 800d2c6:	071a      	lsls	r2, r3, #28
 800d2c8:	d525      	bpl.n	800d316 <__swbuf_r+0x68>
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	b31b      	cbz	r3, 800d316 <__swbuf_r+0x68>
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	6922      	ldr	r2, [r4, #16]
 800d2d2:	1a98      	subs	r0, r3, r2
 800d2d4:	6963      	ldr	r3, [r4, #20]
 800d2d6:	b2f6      	uxtb	r6, r6
 800d2d8:	4283      	cmp	r3, r0
 800d2da:	4637      	mov	r7, r6
 800d2dc:	dc04      	bgt.n	800d2e8 <__swbuf_r+0x3a>
 800d2de:	4621      	mov	r1, r4
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	f001 ff1d 	bl	800f120 <_fflush_r>
 800d2e6:	b9e0      	cbnz	r0, 800d322 <__swbuf_r+0x74>
 800d2e8:	68a3      	ldr	r3, [r4, #8]
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	60a3      	str	r3, [r4, #8]
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	1c5a      	adds	r2, r3, #1
 800d2f2:	6022      	str	r2, [r4, #0]
 800d2f4:	701e      	strb	r6, [r3, #0]
 800d2f6:	6962      	ldr	r2, [r4, #20]
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d004      	beq.n	800d308 <__swbuf_r+0x5a>
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	07db      	lsls	r3, r3, #31
 800d302:	d506      	bpl.n	800d312 <__swbuf_r+0x64>
 800d304:	2e0a      	cmp	r6, #10
 800d306:	d104      	bne.n	800d312 <__swbuf_r+0x64>
 800d308:	4621      	mov	r1, r4
 800d30a:	4628      	mov	r0, r5
 800d30c:	f001 ff08 	bl	800f120 <_fflush_r>
 800d310:	b938      	cbnz	r0, 800d322 <__swbuf_r+0x74>
 800d312:	4638      	mov	r0, r7
 800d314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d316:	4621      	mov	r1, r4
 800d318:	4628      	mov	r0, r5
 800d31a:	f000 f805 	bl	800d328 <__swsetup_r>
 800d31e:	2800      	cmp	r0, #0
 800d320:	d0d5      	beq.n	800d2ce <__swbuf_r+0x20>
 800d322:	f04f 37ff 	mov.w	r7, #4294967295
 800d326:	e7f4      	b.n	800d312 <__swbuf_r+0x64>

0800d328 <__swsetup_r>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	4b2a      	ldr	r3, [pc, #168]	; (800d3d4 <__swsetup_r+0xac>)
 800d32c:	4605      	mov	r5, r0
 800d32e:	6818      	ldr	r0, [r3, #0]
 800d330:	460c      	mov	r4, r1
 800d332:	b118      	cbz	r0, 800d33c <__swsetup_r+0x14>
 800d334:	6a03      	ldr	r3, [r0, #32]
 800d336:	b90b      	cbnz	r3, 800d33c <__swsetup_r+0x14>
 800d338:	f7ff feb2 	bl	800d0a0 <__sinit>
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d342:	0718      	lsls	r0, r3, #28
 800d344:	d422      	bmi.n	800d38c <__swsetup_r+0x64>
 800d346:	06d9      	lsls	r1, r3, #27
 800d348:	d407      	bmi.n	800d35a <__swsetup_r+0x32>
 800d34a:	2309      	movs	r3, #9
 800d34c:	602b      	str	r3, [r5, #0]
 800d34e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d352:	81a3      	strh	r3, [r4, #12]
 800d354:	f04f 30ff 	mov.w	r0, #4294967295
 800d358:	e034      	b.n	800d3c4 <__swsetup_r+0x9c>
 800d35a:	0758      	lsls	r0, r3, #29
 800d35c:	d512      	bpl.n	800d384 <__swsetup_r+0x5c>
 800d35e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d360:	b141      	cbz	r1, 800d374 <__swsetup_r+0x4c>
 800d362:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d366:	4299      	cmp	r1, r3
 800d368:	d002      	beq.n	800d370 <__swsetup_r+0x48>
 800d36a:	4628      	mov	r0, r5
 800d36c:	f000 ff3a 	bl	800e1e4 <_free_r>
 800d370:	2300      	movs	r3, #0
 800d372:	6363      	str	r3, [r4, #52]	; 0x34
 800d374:	89a3      	ldrh	r3, [r4, #12]
 800d376:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d37a:	81a3      	strh	r3, [r4, #12]
 800d37c:	2300      	movs	r3, #0
 800d37e:	6063      	str	r3, [r4, #4]
 800d380:	6923      	ldr	r3, [r4, #16]
 800d382:	6023      	str	r3, [r4, #0]
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	f043 0308 	orr.w	r3, r3, #8
 800d38a:	81a3      	strh	r3, [r4, #12]
 800d38c:	6923      	ldr	r3, [r4, #16]
 800d38e:	b94b      	cbnz	r3, 800d3a4 <__swsetup_r+0x7c>
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d39a:	d003      	beq.n	800d3a4 <__swsetup_r+0x7c>
 800d39c:	4621      	mov	r1, r4
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f001 ff0c 	bl	800f1bc <__smakebuf_r>
 800d3a4:	89a0      	ldrh	r0, [r4, #12]
 800d3a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3aa:	f010 0301 	ands.w	r3, r0, #1
 800d3ae:	d00a      	beq.n	800d3c6 <__swsetup_r+0x9e>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	60a3      	str	r3, [r4, #8]
 800d3b4:	6963      	ldr	r3, [r4, #20]
 800d3b6:	425b      	negs	r3, r3
 800d3b8:	61a3      	str	r3, [r4, #24]
 800d3ba:	6923      	ldr	r3, [r4, #16]
 800d3bc:	b943      	cbnz	r3, 800d3d0 <__swsetup_r+0xa8>
 800d3be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3c2:	d1c4      	bne.n	800d34e <__swsetup_r+0x26>
 800d3c4:	bd38      	pop	{r3, r4, r5, pc}
 800d3c6:	0781      	lsls	r1, r0, #30
 800d3c8:	bf58      	it	pl
 800d3ca:	6963      	ldrpl	r3, [r4, #20]
 800d3cc:	60a3      	str	r3, [r4, #8]
 800d3ce:	e7f4      	b.n	800d3ba <__swsetup_r+0x92>
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	e7f7      	b.n	800d3c4 <__swsetup_r+0x9c>
 800d3d4:	20000164 	.word	0x20000164

0800d3d8 <memset>:
 800d3d8:	4402      	add	r2, r0
 800d3da:	4603      	mov	r3, r0
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d100      	bne.n	800d3e2 <memset+0xa>
 800d3e0:	4770      	bx	lr
 800d3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800d3e6:	e7f9      	b.n	800d3dc <memset+0x4>

0800d3e8 <_localeconv_r>:
 800d3e8:	4800      	ldr	r0, [pc, #0]	; (800d3ec <_localeconv_r+0x4>)
 800d3ea:	4770      	bx	lr
 800d3ec:	20000258 	.word	0x20000258

0800d3f0 <_close_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	4d06      	ldr	r5, [pc, #24]	; (800d40c <_close_r+0x1c>)
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	4608      	mov	r0, r1
 800d3fa:	602b      	str	r3, [r5, #0]
 800d3fc:	f7f5 f807 	bl	800240e <_close>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d102      	bne.n	800d40a <_close_r+0x1a>
 800d404:	682b      	ldr	r3, [r5, #0]
 800d406:	b103      	cbz	r3, 800d40a <_close_r+0x1a>
 800d408:	6023      	str	r3, [r4, #0]
 800d40a:	bd38      	pop	{r3, r4, r5, pc}
 800d40c:	20001740 	.word	0x20001740

0800d410 <_lseek_r>:
 800d410:	b538      	push	{r3, r4, r5, lr}
 800d412:	4d07      	ldr	r5, [pc, #28]	; (800d430 <_lseek_r+0x20>)
 800d414:	4604      	mov	r4, r0
 800d416:	4608      	mov	r0, r1
 800d418:	4611      	mov	r1, r2
 800d41a:	2200      	movs	r2, #0
 800d41c:	602a      	str	r2, [r5, #0]
 800d41e:	461a      	mov	r2, r3
 800d420:	f7f5 f81c 	bl	800245c <_lseek>
 800d424:	1c43      	adds	r3, r0, #1
 800d426:	d102      	bne.n	800d42e <_lseek_r+0x1e>
 800d428:	682b      	ldr	r3, [r5, #0]
 800d42a:	b103      	cbz	r3, 800d42e <_lseek_r+0x1e>
 800d42c:	6023      	str	r3, [r4, #0]
 800d42e:	bd38      	pop	{r3, r4, r5, pc}
 800d430:	20001740 	.word	0x20001740

0800d434 <_read_r>:
 800d434:	b538      	push	{r3, r4, r5, lr}
 800d436:	4d07      	ldr	r5, [pc, #28]	; (800d454 <_read_r+0x20>)
 800d438:	4604      	mov	r4, r0
 800d43a:	4608      	mov	r0, r1
 800d43c:	4611      	mov	r1, r2
 800d43e:	2200      	movs	r2, #0
 800d440:	602a      	str	r2, [r5, #0]
 800d442:	461a      	mov	r2, r3
 800d444:	f7f4 ffc6 	bl	80023d4 <_read>
 800d448:	1c43      	adds	r3, r0, #1
 800d44a:	d102      	bne.n	800d452 <_read_r+0x1e>
 800d44c:	682b      	ldr	r3, [r5, #0]
 800d44e:	b103      	cbz	r3, 800d452 <_read_r+0x1e>
 800d450:	6023      	str	r3, [r4, #0]
 800d452:	bd38      	pop	{r3, r4, r5, pc}
 800d454:	20001740 	.word	0x20001740

0800d458 <_write_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	4d07      	ldr	r5, [pc, #28]	; (800d478 <_write_r+0x20>)
 800d45c:	4604      	mov	r4, r0
 800d45e:	4608      	mov	r0, r1
 800d460:	4611      	mov	r1, r2
 800d462:	2200      	movs	r2, #0
 800d464:	602a      	str	r2, [r5, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	f7f4 fdea 	bl	8002040 <_write>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d102      	bne.n	800d476 <_write_r+0x1e>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	b103      	cbz	r3, 800d476 <_write_r+0x1e>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	20001740 	.word	0x20001740

0800d47c <__errno>:
 800d47c:	4b01      	ldr	r3, [pc, #4]	; (800d484 <__errno+0x8>)
 800d47e:	6818      	ldr	r0, [r3, #0]
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	20000164 	.word	0x20000164

0800d488 <__libc_init_array>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	4d0d      	ldr	r5, [pc, #52]	; (800d4c0 <__libc_init_array+0x38>)
 800d48c:	4c0d      	ldr	r4, [pc, #52]	; (800d4c4 <__libc_init_array+0x3c>)
 800d48e:	1b64      	subs	r4, r4, r5
 800d490:	10a4      	asrs	r4, r4, #2
 800d492:	2600      	movs	r6, #0
 800d494:	42a6      	cmp	r6, r4
 800d496:	d109      	bne.n	800d4ac <__libc_init_array+0x24>
 800d498:	4d0b      	ldr	r5, [pc, #44]	; (800d4c8 <__libc_init_array+0x40>)
 800d49a:	4c0c      	ldr	r4, [pc, #48]	; (800d4cc <__libc_init_array+0x44>)
 800d49c:	f001 fffe 	bl	800f49c <_init>
 800d4a0:	1b64      	subs	r4, r4, r5
 800d4a2:	10a4      	asrs	r4, r4, #2
 800d4a4:	2600      	movs	r6, #0
 800d4a6:	42a6      	cmp	r6, r4
 800d4a8:	d105      	bne.n	800d4b6 <__libc_init_array+0x2e>
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
 800d4ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4b0:	4798      	blx	r3
 800d4b2:	3601      	adds	r6, #1
 800d4b4:	e7ee      	b.n	800d494 <__libc_init_array+0xc>
 800d4b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4ba:	4798      	blx	r3
 800d4bc:	3601      	adds	r6, #1
 800d4be:	e7f2      	b.n	800d4a6 <__libc_init_array+0x1e>
 800d4c0:	0800fc4c 	.word	0x0800fc4c
 800d4c4:	0800fc4c 	.word	0x0800fc4c
 800d4c8:	0800fc4c 	.word	0x0800fc4c
 800d4cc:	0800fc50 	.word	0x0800fc50

0800d4d0 <__retarget_lock_acquire_recursive>:
 800d4d0:	4770      	bx	lr

0800d4d2 <__retarget_lock_release_recursive>:
 800d4d2:	4770      	bx	lr

0800d4d4 <memcpy>:
 800d4d4:	440a      	add	r2, r1
 800d4d6:	4291      	cmp	r1, r2
 800d4d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4dc:	d100      	bne.n	800d4e0 <memcpy+0xc>
 800d4de:	4770      	bx	lr
 800d4e0:	b510      	push	{r4, lr}
 800d4e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4ea:	4291      	cmp	r1, r2
 800d4ec:	d1f9      	bne.n	800d4e2 <memcpy+0xe>
 800d4ee:	bd10      	pop	{r4, pc}

0800d4f0 <quorem>:
 800d4f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	6903      	ldr	r3, [r0, #16]
 800d4f6:	690c      	ldr	r4, [r1, #16]
 800d4f8:	42a3      	cmp	r3, r4
 800d4fa:	4607      	mov	r7, r0
 800d4fc:	db7e      	blt.n	800d5fc <quorem+0x10c>
 800d4fe:	3c01      	subs	r4, #1
 800d500:	f101 0814 	add.w	r8, r1, #20
 800d504:	f100 0514 	add.w	r5, r0, #20
 800d508:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d50c:	9301      	str	r3, [sp, #4]
 800d50e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d516:	3301      	adds	r3, #1
 800d518:	429a      	cmp	r2, r3
 800d51a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d51e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d522:	fbb2 f6f3 	udiv	r6, r2, r3
 800d526:	d331      	bcc.n	800d58c <quorem+0x9c>
 800d528:	f04f 0e00 	mov.w	lr, #0
 800d52c:	4640      	mov	r0, r8
 800d52e:	46ac      	mov	ip, r5
 800d530:	46f2      	mov	sl, lr
 800d532:	f850 2b04 	ldr.w	r2, [r0], #4
 800d536:	b293      	uxth	r3, r2
 800d538:	fb06 e303 	mla	r3, r6, r3, lr
 800d53c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d540:	0c1a      	lsrs	r2, r3, #16
 800d542:	b29b      	uxth	r3, r3
 800d544:	ebaa 0303 	sub.w	r3, sl, r3
 800d548:	f8dc a000 	ldr.w	sl, [ip]
 800d54c:	fa13 f38a 	uxtah	r3, r3, sl
 800d550:	fb06 220e 	mla	r2, r6, lr, r2
 800d554:	9300      	str	r3, [sp, #0]
 800d556:	9b00      	ldr	r3, [sp, #0]
 800d558:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d55c:	b292      	uxth	r2, r2
 800d55e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d562:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d566:	f8bd 3000 	ldrh.w	r3, [sp]
 800d56a:	4581      	cmp	r9, r0
 800d56c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d570:	f84c 3b04 	str.w	r3, [ip], #4
 800d574:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d578:	d2db      	bcs.n	800d532 <quorem+0x42>
 800d57a:	f855 300b 	ldr.w	r3, [r5, fp]
 800d57e:	b92b      	cbnz	r3, 800d58c <quorem+0x9c>
 800d580:	9b01      	ldr	r3, [sp, #4]
 800d582:	3b04      	subs	r3, #4
 800d584:	429d      	cmp	r5, r3
 800d586:	461a      	mov	r2, r3
 800d588:	d32c      	bcc.n	800d5e4 <quorem+0xf4>
 800d58a:	613c      	str	r4, [r7, #16]
 800d58c:	4638      	mov	r0, r7
 800d58e:	f001 f9a5 	bl	800e8dc <__mcmp>
 800d592:	2800      	cmp	r0, #0
 800d594:	db22      	blt.n	800d5dc <quorem+0xec>
 800d596:	3601      	adds	r6, #1
 800d598:	4629      	mov	r1, r5
 800d59a:	2000      	movs	r0, #0
 800d59c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5a0:	f8d1 c000 	ldr.w	ip, [r1]
 800d5a4:	b293      	uxth	r3, r2
 800d5a6:	1ac3      	subs	r3, r0, r3
 800d5a8:	0c12      	lsrs	r2, r2, #16
 800d5aa:	fa13 f38c 	uxtah	r3, r3, ip
 800d5ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d5b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5bc:	45c1      	cmp	r9, r8
 800d5be:	f841 3b04 	str.w	r3, [r1], #4
 800d5c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d5c6:	d2e9      	bcs.n	800d59c <quorem+0xac>
 800d5c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5d0:	b922      	cbnz	r2, 800d5dc <quorem+0xec>
 800d5d2:	3b04      	subs	r3, #4
 800d5d4:	429d      	cmp	r5, r3
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	d30a      	bcc.n	800d5f0 <quorem+0x100>
 800d5da:	613c      	str	r4, [r7, #16]
 800d5dc:	4630      	mov	r0, r6
 800d5de:	b003      	add	sp, #12
 800d5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e4:	6812      	ldr	r2, [r2, #0]
 800d5e6:	3b04      	subs	r3, #4
 800d5e8:	2a00      	cmp	r2, #0
 800d5ea:	d1ce      	bne.n	800d58a <quorem+0x9a>
 800d5ec:	3c01      	subs	r4, #1
 800d5ee:	e7c9      	b.n	800d584 <quorem+0x94>
 800d5f0:	6812      	ldr	r2, [r2, #0]
 800d5f2:	3b04      	subs	r3, #4
 800d5f4:	2a00      	cmp	r2, #0
 800d5f6:	d1f0      	bne.n	800d5da <quorem+0xea>
 800d5f8:	3c01      	subs	r4, #1
 800d5fa:	e7eb      	b.n	800d5d4 <quorem+0xe4>
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	e7ee      	b.n	800d5de <quorem+0xee>

0800d600 <_dtoa_r>:
 800d600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d604:	ed2d 8b04 	vpush	{d8-d9}
 800d608:	69c5      	ldr	r5, [r0, #28]
 800d60a:	b093      	sub	sp, #76	; 0x4c
 800d60c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d610:	ec57 6b10 	vmov	r6, r7, d0
 800d614:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d618:	9107      	str	r1, [sp, #28]
 800d61a:	4604      	mov	r4, r0
 800d61c:	920a      	str	r2, [sp, #40]	; 0x28
 800d61e:	930d      	str	r3, [sp, #52]	; 0x34
 800d620:	b975      	cbnz	r5, 800d640 <_dtoa_r+0x40>
 800d622:	2010      	movs	r0, #16
 800d624:	f000 fe2a 	bl	800e27c <malloc>
 800d628:	4602      	mov	r2, r0
 800d62a:	61e0      	str	r0, [r4, #28]
 800d62c:	b920      	cbnz	r0, 800d638 <_dtoa_r+0x38>
 800d62e:	4bae      	ldr	r3, [pc, #696]	; (800d8e8 <_dtoa_r+0x2e8>)
 800d630:	21ef      	movs	r1, #239	; 0xef
 800d632:	48ae      	ldr	r0, [pc, #696]	; (800d8ec <_dtoa_r+0x2ec>)
 800d634:	f001 fe4a 	bl	800f2cc <__assert_func>
 800d638:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d63c:	6005      	str	r5, [r0, #0]
 800d63e:	60c5      	str	r5, [r0, #12]
 800d640:	69e3      	ldr	r3, [r4, #28]
 800d642:	6819      	ldr	r1, [r3, #0]
 800d644:	b151      	cbz	r1, 800d65c <_dtoa_r+0x5c>
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	604a      	str	r2, [r1, #4]
 800d64a:	2301      	movs	r3, #1
 800d64c:	4093      	lsls	r3, r2
 800d64e:	608b      	str	r3, [r1, #8]
 800d650:	4620      	mov	r0, r4
 800d652:	f000 ff07 	bl	800e464 <_Bfree>
 800d656:	69e3      	ldr	r3, [r4, #28]
 800d658:	2200      	movs	r2, #0
 800d65a:	601a      	str	r2, [r3, #0]
 800d65c:	1e3b      	subs	r3, r7, #0
 800d65e:	bfbb      	ittet	lt
 800d660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d664:	9303      	strlt	r3, [sp, #12]
 800d666:	2300      	movge	r3, #0
 800d668:	2201      	movlt	r2, #1
 800d66a:	bfac      	ite	ge
 800d66c:	f8c8 3000 	strge.w	r3, [r8]
 800d670:	f8c8 2000 	strlt.w	r2, [r8]
 800d674:	4b9e      	ldr	r3, [pc, #632]	; (800d8f0 <_dtoa_r+0x2f0>)
 800d676:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d67a:	ea33 0308 	bics.w	r3, r3, r8
 800d67e:	d11b      	bne.n	800d6b8 <_dtoa_r+0xb8>
 800d680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d682:	f242 730f 	movw	r3, #9999	; 0x270f
 800d686:	6013      	str	r3, [r2, #0]
 800d688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d68c:	4333      	orrs	r3, r6
 800d68e:	f000 8593 	beq.w	800e1b8 <_dtoa_r+0xbb8>
 800d692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d694:	b963      	cbnz	r3, 800d6b0 <_dtoa_r+0xb0>
 800d696:	4b97      	ldr	r3, [pc, #604]	; (800d8f4 <_dtoa_r+0x2f4>)
 800d698:	e027      	b.n	800d6ea <_dtoa_r+0xea>
 800d69a:	4b97      	ldr	r3, [pc, #604]	; (800d8f8 <_dtoa_r+0x2f8>)
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	3308      	adds	r3, #8
 800d6a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	9800      	ldr	r0, [sp, #0]
 800d6a6:	b013      	add	sp, #76	; 0x4c
 800d6a8:	ecbd 8b04 	vpop	{d8-d9}
 800d6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b0:	4b90      	ldr	r3, [pc, #576]	; (800d8f4 <_dtoa_r+0x2f4>)
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	3303      	adds	r3, #3
 800d6b6:	e7f3      	b.n	800d6a0 <_dtoa_r+0xa0>
 800d6b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	ec51 0b17 	vmov	r0, r1, d7
 800d6c2:	eeb0 8a47 	vmov.f32	s16, s14
 800d6c6:	eef0 8a67 	vmov.f32	s17, s15
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f7f3 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6d0:	4681      	mov	r9, r0
 800d6d2:	b160      	cbz	r0, 800d6ee <_dtoa_r+0xee>
 800d6d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	6013      	str	r3, [r2, #0]
 800d6da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f000 8568 	beq.w	800e1b2 <_dtoa_r+0xbb2>
 800d6e2:	4b86      	ldr	r3, [pc, #536]	; (800d8fc <_dtoa_r+0x2fc>)
 800d6e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6e6:	6013      	str	r3, [r2, #0]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	9300      	str	r3, [sp, #0]
 800d6ec:	e7da      	b.n	800d6a4 <_dtoa_r+0xa4>
 800d6ee:	aa10      	add	r2, sp, #64	; 0x40
 800d6f0:	a911      	add	r1, sp, #68	; 0x44
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d6f8:	eef0 0a68 	vmov.f32	s1, s17
 800d6fc:	f001 f994 	bl	800ea28 <__d2b>
 800d700:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d704:	4682      	mov	sl, r0
 800d706:	2d00      	cmp	r5, #0
 800d708:	d07f      	beq.n	800d80a <_dtoa_r+0x20a>
 800d70a:	ee18 3a90 	vmov	r3, s17
 800d70e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d712:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d716:	ec51 0b18 	vmov	r0, r1, d8
 800d71a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d71e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d722:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d726:	4619      	mov	r1, r3
 800d728:	2200      	movs	r2, #0
 800d72a:	4b75      	ldr	r3, [pc, #468]	; (800d900 <_dtoa_r+0x300>)
 800d72c:	f7f2 fdac 	bl	8000288 <__aeabi_dsub>
 800d730:	a367      	add	r3, pc, #412	; (adr r3, 800d8d0 <_dtoa_r+0x2d0>)
 800d732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d736:	f7f2 ff5f 	bl	80005f8 <__aeabi_dmul>
 800d73a:	a367      	add	r3, pc, #412	; (adr r3, 800d8d8 <_dtoa_r+0x2d8>)
 800d73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d740:	f7f2 fda4 	bl	800028c <__adddf3>
 800d744:	4606      	mov	r6, r0
 800d746:	4628      	mov	r0, r5
 800d748:	460f      	mov	r7, r1
 800d74a:	f7f2 feeb 	bl	8000524 <__aeabi_i2d>
 800d74e:	a364      	add	r3, pc, #400	; (adr r3, 800d8e0 <_dtoa_r+0x2e0>)
 800d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d754:	f7f2 ff50 	bl	80005f8 <__aeabi_dmul>
 800d758:	4602      	mov	r2, r0
 800d75a:	460b      	mov	r3, r1
 800d75c:	4630      	mov	r0, r6
 800d75e:	4639      	mov	r1, r7
 800d760:	f7f2 fd94 	bl	800028c <__adddf3>
 800d764:	4606      	mov	r6, r0
 800d766:	460f      	mov	r7, r1
 800d768:	f7f3 f9f6 	bl	8000b58 <__aeabi_d2iz>
 800d76c:	2200      	movs	r2, #0
 800d76e:	4683      	mov	fp, r0
 800d770:	2300      	movs	r3, #0
 800d772:	4630      	mov	r0, r6
 800d774:	4639      	mov	r1, r7
 800d776:	f7f3 f9b1 	bl	8000adc <__aeabi_dcmplt>
 800d77a:	b148      	cbz	r0, 800d790 <_dtoa_r+0x190>
 800d77c:	4658      	mov	r0, fp
 800d77e:	f7f2 fed1 	bl	8000524 <__aeabi_i2d>
 800d782:	4632      	mov	r2, r6
 800d784:	463b      	mov	r3, r7
 800d786:	f7f3 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d78a:	b908      	cbnz	r0, 800d790 <_dtoa_r+0x190>
 800d78c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d790:	f1bb 0f16 	cmp.w	fp, #22
 800d794:	d857      	bhi.n	800d846 <_dtoa_r+0x246>
 800d796:	4b5b      	ldr	r3, [pc, #364]	; (800d904 <_dtoa_r+0x304>)
 800d798:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	ec51 0b18 	vmov	r0, r1, d8
 800d7a4:	f7f3 f99a 	bl	8000adc <__aeabi_dcmplt>
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d04e      	beq.n	800d84a <_dtoa_r+0x24a>
 800d7ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	930c      	str	r3, [sp, #48]	; 0x30
 800d7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7b6:	1b5b      	subs	r3, r3, r5
 800d7b8:	1e5a      	subs	r2, r3, #1
 800d7ba:	bf45      	ittet	mi
 800d7bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800d7c0:	9305      	strmi	r3, [sp, #20]
 800d7c2:	2300      	movpl	r3, #0
 800d7c4:	2300      	movmi	r3, #0
 800d7c6:	9206      	str	r2, [sp, #24]
 800d7c8:	bf54      	ite	pl
 800d7ca:	9305      	strpl	r3, [sp, #20]
 800d7cc:	9306      	strmi	r3, [sp, #24]
 800d7ce:	f1bb 0f00 	cmp.w	fp, #0
 800d7d2:	db3c      	blt.n	800d84e <_dtoa_r+0x24e>
 800d7d4:	9b06      	ldr	r3, [sp, #24]
 800d7d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d7da:	445b      	add	r3, fp
 800d7dc:	9306      	str	r3, [sp, #24]
 800d7de:	2300      	movs	r3, #0
 800d7e0:	9308      	str	r3, [sp, #32]
 800d7e2:	9b07      	ldr	r3, [sp, #28]
 800d7e4:	2b09      	cmp	r3, #9
 800d7e6:	d868      	bhi.n	800d8ba <_dtoa_r+0x2ba>
 800d7e8:	2b05      	cmp	r3, #5
 800d7ea:	bfc4      	itt	gt
 800d7ec:	3b04      	subgt	r3, #4
 800d7ee:	9307      	strgt	r3, [sp, #28]
 800d7f0:	9b07      	ldr	r3, [sp, #28]
 800d7f2:	f1a3 0302 	sub.w	r3, r3, #2
 800d7f6:	bfcc      	ite	gt
 800d7f8:	2500      	movgt	r5, #0
 800d7fa:	2501      	movle	r5, #1
 800d7fc:	2b03      	cmp	r3, #3
 800d7fe:	f200 8085 	bhi.w	800d90c <_dtoa_r+0x30c>
 800d802:	e8df f003 	tbb	[pc, r3]
 800d806:	3b2e      	.short	0x3b2e
 800d808:	5839      	.short	0x5839
 800d80a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d80e:	441d      	add	r5, r3
 800d810:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d814:	2b20      	cmp	r3, #32
 800d816:	bfc1      	itttt	gt
 800d818:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d81c:	fa08 f803 	lslgt.w	r8, r8, r3
 800d820:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d824:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d828:	bfd6      	itet	le
 800d82a:	f1c3 0320 	rsble	r3, r3, #32
 800d82e:	ea48 0003 	orrgt.w	r0, r8, r3
 800d832:	fa06 f003 	lslle.w	r0, r6, r3
 800d836:	f7f2 fe65 	bl	8000504 <__aeabi_ui2d>
 800d83a:	2201      	movs	r2, #1
 800d83c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d840:	3d01      	subs	r5, #1
 800d842:	920e      	str	r2, [sp, #56]	; 0x38
 800d844:	e76f      	b.n	800d726 <_dtoa_r+0x126>
 800d846:	2301      	movs	r3, #1
 800d848:	e7b3      	b.n	800d7b2 <_dtoa_r+0x1b2>
 800d84a:	900c      	str	r0, [sp, #48]	; 0x30
 800d84c:	e7b2      	b.n	800d7b4 <_dtoa_r+0x1b4>
 800d84e:	9b05      	ldr	r3, [sp, #20]
 800d850:	eba3 030b 	sub.w	r3, r3, fp
 800d854:	9305      	str	r3, [sp, #20]
 800d856:	f1cb 0300 	rsb	r3, fp, #0
 800d85a:	9308      	str	r3, [sp, #32]
 800d85c:	2300      	movs	r3, #0
 800d85e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d860:	e7bf      	b.n	800d7e2 <_dtoa_r+0x1e2>
 800d862:	2300      	movs	r3, #0
 800d864:	9309      	str	r3, [sp, #36]	; 0x24
 800d866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d868:	2b00      	cmp	r3, #0
 800d86a:	dc52      	bgt.n	800d912 <_dtoa_r+0x312>
 800d86c:	2301      	movs	r3, #1
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	9304      	str	r3, [sp, #16]
 800d872:	461a      	mov	r2, r3
 800d874:	920a      	str	r2, [sp, #40]	; 0x28
 800d876:	e00b      	b.n	800d890 <_dtoa_r+0x290>
 800d878:	2301      	movs	r3, #1
 800d87a:	e7f3      	b.n	800d864 <_dtoa_r+0x264>
 800d87c:	2300      	movs	r3, #0
 800d87e:	9309      	str	r3, [sp, #36]	; 0x24
 800d880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d882:	445b      	add	r3, fp
 800d884:	9301      	str	r3, [sp, #4]
 800d886:	3301      	adds	r3, #1
 800d888:	2b01      	cmp	r3, #1
 800d88a:	9304      	str	r3, [sp, #16]
 800d88c:	bfb8      	it	lt
 800d88e:	2301      	movlt	r3, #1
 800d890:	69e0      	ldr	r0, [r4, #28]
 800d892:	2100      	movs	r1, #0
 800d894:	2204      	movs	r2, #4
 800d896:	f102 0614 	add.w	r6, r2, #20
 800d89a:	429e      	cmp	r6, r3
 800d89c:	d93d      	bls.n	800d91a <_dtoa_r+0x31a>
 800d89e:	6041      	str	r1, [r0, #4]
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f000 fd9f 	bl	800e3e4 <_Balloc>
 800d8a6:	9000      	str	r0, [sp, #0]
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d139      	bne.n	800d920 <_dtoa_r+0x320>
 800d8ac:	4b16      	ldr	r3, [pc, #88]	; (800d908 <_dtoa_r+0x308>)
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	f240 11af 	movw	r1, #431	; 0x1af
 800d8b4:	e6bd      	b.n	800d632 <_dtoa_r+0x32>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e7e1      	b.n	800d87e <_dtoa_r+0x27e>
 800d8ba:	2501      	movs	r5, #1
 800d8bc:	2300      	movs	r3, #0
 800d8be:	9307      	str	r3, [sp, #28]
 800d8c0:	9509      	str	r5, [sp, #36]	; 0x24
 800d8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c6:	9301      	str	r3, [sp, #4]
 800d8c8:	9304      	str	r3, [sp, #16]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	2312      	movs	r3, #18
 800d8ce:	e7d1      	b.n	800d874 <_dtoa_r+0x274>
 800d8d0:	636f4361 	.word	0x636f4361
 800d8d4:	3fd287a7 	.word	0x3fd287a7
 800d8d8:	8b60c8b3 	.word	0x8b60c8b3
 800d8dc:	3fc68a28 	.word	0x3fc68a28
 800d8e0:	509f79fb 	.word	0x509f79fb
 800d8e4:	3fd34413 	.word	0x3fd34413
 800d8e8:	0800f91d 	.word	0x0800f91d
 800d8ec:	0800f934 	.word	0x0800f934
 800d8f0:	7ff00000 	.word	0x7ff00000
 800d8f4:	0800f919 	.word	0x0800f919
 800d8f8:	0800f910 	.word	0x0800f910
 800d8fc:	0800f8ed 	.word	0x0800f8ed
 800d900:	3ff80000 	.word	0x3ff80000
 800d904:	0800fa20 	.word	0x0800fa20
 800d908:	0800f98c 	.word	0x0800f98c
 800d90c:	2301      	movs	r3, #1
 800d90e:	9309      	str	r3, [sp, #36]	; 0x24
 800d910:	e7d7      	b.n	800d8c2 <_dtoa_r+0x2c2>
 800d912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d914:	9301      	str	r3, [sp, #4]
 800d916:	9304      	str	r3, [sp, #16]
 800d918:	e7ba      	b.n	800d890 <_dtoa_r+0x290>
 800d91a:	3101      	adds	r1, #1
 800d91c:	0052      	lsls	r2, r2, #1
 800d91e:	e7ba      	b.n	800d896 <_dtoa_r+0x296>
 800d920:	69e3      	ldr	r3, [r4, #28]
 800d922:	9a00      	ldr	r2, [sp, #0]
 800d924:	601a      	str	r2, [r3, #0]
 800d926:	9b04      	ldr	r3, [sp, #16]
 800d928:	2b0e      	cmp	r3, #14
 800d92a:	f200 80a8 	bhi.w	800da7e <_dtoa_r+0x47e>
 800d92e:	2d00      	cmp	r5, #0
 800d930:	f000 80a5 	beq.w	800da7e <_dtoa_r+0x47e>
 800d934:	f1bb 0f00 	cmp.w	fp, #0
 800d938:	dd38      	ble.n	800d9ac <_dtoa_r+0x3ac>
 800d93a:	4bc0      	ldr	r3, [pc, #768]	; (800dc3c <_dtoa_r+0x63c>)
 800d93c:	f00b 020f 	and.w	r2, fp, #15
 800d940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d944:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d948:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d94c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d950:	d019      	beq.n	800d986 <_dtoa_r+0x386>
 800d952:	4bbb      	ldr	r3, [pc, #748]	; (800dc40 <_dtoa_r+0x640>)
 800d954:	ec51 0b18 	vmov	r0, r1, d8
 800d958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d95c:	f7f2 ff76 	bl	800084c <__aeabi_ddiv>
 800d960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d964:	f008 080f 	and.w	r8, r8, #15
 800d968:	2503      	movs	r5, #3
 800d96a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dc40 <_dtoa_r+0x640>
 800d96e:	f1b8 0f00 	cmp.w	r8, #0
 800d972:	d10a      	bne.n	800d98a <_dtoa_r+0x38a>
 800d974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d978:	4632      	mov	r2, r6
 800d97a:	463b      	mov	r3, r7
 800d97c:	f7f2 ff66 	bl	800084c <__aeabi_ddiv>
 800d980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d984:	e02b      	b.n	800d9de <_dtoa_r+0x3de>
 800d986:	2502      	movs	r5, #2
 800d988:	e7ef      	b.n	800d96a <_dtoa_r+0x36a>
 800d98a:	f018 0f01 	tst.w	r8, #1
 800d98e:	d008      	beq.n	800d9a2 <_dtoa_r+0x3a2>
 800d990:	4630      	mov	r0, r6
 800d992:	4639      	mov	r1, r7
 800d994:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d998:	f7f2 fe2e 	bl	80005f8 <__aeabi_dmul>
 800d99c:	3501      	adds	r5, #1
 800d99e:	4606      	mov	r6, r0
 800d9a0:	460f      	mov	r7, r1
 800d9a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9a6:	f109 0908 	add.w	r9, r9, #8
 800d9aa:	e7e0      	b.n	800d96e <_dtoa_r+0x36e>
 800d9ac:	f000 809f 	beq.w	800daee <_dtoa_r+0x4ee>
 800d9b0:	f1cb 0600 	rsb	r6, fp, #0
 800d9b4:	4ba1      	ldr	r3, [pc, #644]	; (800dc3c <_dtoa_r+0x63c>)
 800d9b6:	4fa2      	ldr	r7, [pc, #648]	; (800dc40 <_dtoa_r+0x640>)
 800d9b8:	f006 020f 	and.w	r2, r6, #15
 800d9bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	ec51 0b18 	vmov	r0, r1, d8
 800d9c8:	f7f2 fe16 	bl	80005f8 <__aeabi_dmul>
 800d9cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9d0:	1136      	asrs	r6, r6, #4
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2502      	movs	r5, #2
 800d9d6:	2e00      	cmp	r6, #0
 800d9d8:	d17e      	bne.n	800dad8 <_dtoa_r+0x4d8>
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d1d0      	bne.n	800d980 <_dtoa_r+0x380>
 800d9de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 8084 	beq.w	800daf2 <_dtoa_r+0x4f2>
 800d9ea:	4b96      	ldr	r3, [pc, #600]	; (800dc44 <_dtoa_r+0x644>)
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	4640      	mov	r0, r8
 800d9f0:	4649      	mov	r1, r9
 800d9f2:	f7f3 f873 	bl	8000adc <__aeabi_dcmplt>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d07b      	beq.n	800daf2 <_dtoa_r+0x4f2>
 800d9fa:	9b04      	ldr	r3, [sp, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d078      	beq.n	800daf2 <_dtoa_r+0x4f2>
 800da00:	9b01      	ldr	r3, [sp, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	dd39      	ble.n	800da7a <_dtoa_r+0x47a>
 800da06:	4b90      	ldr	r3, [pc, #576]	; (800dc48 <_dtoa_r+0x648>)
 800da08:	2200      	movs	r2, #0
 800da0a:	4640      	mov	r0, r8
 800da0c:	4649      	mov	r1, r9
 800da0e:	f7f2 fdf3 	bl	80005f8 <__aeabi_dmul>
 800da12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da16:	9e01      	ldr	r6, [sp, #4]
 800da18:	f10b 37ff 	add.w	r7, fp, #4294967295
 800da1c:	3501      	adds	r5, #1
 800da1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da22:	4628      	mov	r0, r5
 800da24:	f7f2 fd7e 	bl	8000524 <__aeabi_i2d>
 800da28:	4642      	mov	r2, r8
 800da2a:	464b      	mov	r3, r9
 800da2c:	f7f2 fde4 	bl	80005f8 <__aeabi_dmul>
 800da30:	4b86      	ldr	r3, [pc, #536]	; (800dc4c <_dtoa_r+0x64c>)
 800da32:	2200      	movs	r2, #0
 800da34:	f7f2 fc2a 	bl	800028c <__adddf3>
 800da38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800da3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da40:	9303      	str	r3, [sp, #12]
 800da42:	2e00      	cmp	r6, #0
 800da44:	d158      	bne.n	800daf8 <_dtoa_r+0x4f8>
 800da46:	4b82      	ldr	r3, [pc, #520]	; (800dc50 <_dtoa_r+0x650>)
 800da48:	2200      	movs	r2, #0
 800da4a:	4640      	mov	r0, r8
 800da4c:	4649      	mov	r1, r9
 800da4e:	f7f2 fc1b 	bl	8000288 <__aeabi_dsub>
 800da52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da56:	4680      	mov	r8, r0
 800da58:	4689      	mov	r9, r1
 800da5a:	f7f3 f85d 	bl	8000b18 <__aeabi_dcmpgt>
 800da5e:	2800      	cmp	r0, #0
 800da60:	f040 8296 	bne.w	800df90 <_dtoa_r+0x990>
 800da64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da68:	4640      	mov	r0, r8
 800da6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da6e:	4649      	mov	r1, r9
 800da70:	f7f3 f834 	bl	8000adc <__aeabi_dcmplt>
 800da74:	2800      	cmp	r0, #0
 800da76:	f040 8289 	bne.w	800df8c <_dtoa_r+0x98c>
 800da7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800da7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da80:	2b00      	cmp	r3, #0
 800da82:	f2c0 814e 	blt.w	800dd22 <_dtoa_r+0x722>
 800da86:	f1bb 0f0e 	cmp.w	fp, #14
 800da8a:	f300 814a 	bgt.w	800dd22 <_dtoa_r+0x722>
 800da8e:	4b6b      	ldr	r3, [pc, #428]	; (800dc3c <_dtoa_r+0x63c>)
 800da90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f280 80dc 	bge.w	800dc58 <_dtoa_r+0x658>
 800daa0:	9b04      	ldr	r3, [sp, #16]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f300 80d8 	bgt.w	800dc58 <_dtoa_r+0x658>
 800daa8:	f040 826f 	bne.w	800df8a <_dtoa_r+0x98a>
 800daac:	4b68      	ldr	r3, [pc, #416]	; (800dc50 <_dtoa_r+0x650>)
 800daae:	2200      	movs	r2, #0
 800dab0:	4640      	mov	r0, r8
 800dab2:	4649      	mov	r1, r9
 800dab4:	f7f2 fda0 	bl	80005f8 <__aeabi_dmul>
 800dab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dabc:	f7f3 f822 	bl	8000b04 <__aeabi_dcmpge>
 800dac0:	9e04      	ldr	r6, [sp, #16]
 800dac2:	4637      	mov	r7, r6
 800dac4:	2800      	cmp	r0, #0
 800dac6:	f040 8245 	bne.w	800df54 <_dtoa_r+0x954>
 800daca:	9d00      	ldr	r5, [sp, #0]
 800dacc:	2331      	movs	r3, #49	; 0x31
 800dace:	f805 3b01 	strb.w	r3, [r5], #1
 800dad2:	f10b 0b01 	add.w	fp, fp, #1
 800dad6:	e241      	b.n	800df5c <_dtoa_r+0x95c>
 800dad8:	07f2      	lsls	r2, r6, #31
 800dada:	d505      	bpl.n	800dae8 <_dtoa_r+0x4e8>
 800dadc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dae0:	f7f2 fd8a 	bl	80005f8 <__aeabi_dmul>
 800dae4:	3501      	adds	r5, #1
 800dae6:	2301      	movs	r3, #1
 800dae8:	1076      	asrs	r6, r6, #1
 800daea:	3708      	adds	r7, #8
 800daec:	e773      	b.n	800d9d6 <_dtoa_r+0x3d6>
 800daee:	2502      	movs	r5, #2
 800daf0:	e775      	b.n	800d9de <_dtoa_r+0x3de>
 800daf2:	9e04      	ldr	r6, [sp, #16]
 800daf4:	465f      	mov	r7, fp
 800daf6:	e792      	b.n	800da1e <_dtoa_r+0x41e>
 800daf8:	9900      	ldr	r1, [sp, #0]
 800dafa:	4b50      	ldr	r3, [pc, #320]	; (800dc3c <_dtoa_r+0x63c>)
 800dafc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db00:	4431      	add	r1, r6
 800db02:	9102      	str	r1, [sp, #8]
 800db04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db06:	eeb0 9a47 	vmov.f32	s18, s14
 800db0a:	eef0 9a67 	vmov.f32	s19, s15
 800db0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db16:	2900      	cmp	r1, #0
 800db18:	d044      	beq.n	800dba4 <_dtoa_r+0x5a4>
 800db1a:	494e      	ldr	r1, [pc, #312]	; (800dc54 <_dtoa_r+0x654>)
 800db1c:	2000      	movs	r0, #0
 800db1e:	f7f2 fe95 	bl	800084c <__aeabi_ddiv>
 800db22:	ec53 2b19 	vmov	r2, r3, d9
 800db26:	f7f2 fbaf 	bl	8000288 <__aeabi_dsub>
 800db2a:	9d00      	ldr	r5, [sp, #0]
 800db2c:	ec41 0b19 	vmov	d9, r0, r1
 800db30:	4649      	mov	r1, r9
 800db32:	4640      	mov	r0, r8
 800db34:	f7f3 f810 	bl	8000b58 <__aeabi_d2iz>
 800db38:	4606      	mov	r6, r0
 800db3a:	f7f2 fcf3 	bl	8000524 <__aeabi_i2d>
 800db3e:	4602      	mov	r2, r0
 800db40:	460b      	mov	r3, r1
 800db42:	4640      	mov	r0, r8
 800db44:	4649      	mov	r1, r9
 800db46:	f7f2 fb9f 	bl	8000288 <__aeabi_dsub>
 800db4a:	3630      	adds	r6, #48	; 0x30
 800db4c:	f805 6b01 	strb.w	r6, [r5], #1
 800db50:	ec53 2b19 	vmov	r2, r3, d9
 800db54:	4680      	mov	r8, r0
 800db56:	4689      	mov	r9, r1
 800db58:	f7f2 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d164      	bne.n	800dc2a <_dtoa_r+0x62a>
 800db60:	4642      	mov	r2, r8
 800db62:	464b      	mov	r3, r9
 800db64:	4937      	ldr	r1, [pc, #220]	; (800dc44 <_dtoa_r+0x644>)
 800db66:	2000      	movs	r0, #0
 800db68:	f7f2 fb8e 	bl	8000288 <__aeabi_dsub>
 800db6c:	ec53 2b19 	vmov	r2, r3, d9
 800db70:	f7f2 ffb4 	bl	8000adc <__aeabi_dcmplt>
 800db74:	2800      	cmp	r0, #0
 800db76:	f040 80b6 	bne.w	800dce6 <_dtoa_r+0x6e6>
 800db7a:	9b02      	ldr	r3, [sp, #8]
 800db7c:	429d      	cmp	r5, r3
 800db7e:	f43f af7c 	beq.w	800da7a <_dtoa_r+0x47a>
 800db82:	4b31      	ldr	r3, [pc, #196]	; (800dc48 <_dtoa_r+0x648>)
 800db84:	ec51 0b19 	vmov	r0, r1, d9
 800db88:	2200      	movs	r2, #0
 800db8a:	f7f2 fd35 	bl	80005f8 <__aeabi_dmul>
 800db8e:	4b2e      	ldr	r3, [pc, #184]	; (800dc48 <_dtoa_r+0x648>)
 800db90:	ec41 0b19 	vmov	d9, r0, r1
 800db94:	2200      	movs	r2, #0
 800db96:	4640      	mov	r0, r8
 800db98:	4649      	mov	r1, r9
 800db9a:	f7f2 fd2d 	bl	80005f8 <__aeabi_dmul>
 800db9e:	4680      	mov	r8, r0
 800dba0:	4689      	mov	r9, r1
 800dba2:	e7c5      	b.n	800db30 <_dtoa_r+0x530>
 800dba4:	ec51 0b17 	vmov	r0, r1, d7
 800dba8:	f7f2 fd26 	bl	80005f8 <__aeabi_dmul>
 800dbac:	9b02      	ldr	r3, [sp, #8]
 800dbae:	9d00      	ldr	r5, [sp, #0]
 800dbb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbb2:	ec41 0b19 	vmov	d9, r0, r1
 800dbb6:	4649      	mov	r1, r9
 800dbb8:	4640      	mov	r0, r8
 800dbba:	f7f2 ffcd 	bl	8000b58 <__aeabi_d2iz>
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	f7f2 fcb0 	bl	8000524 <__aeabi_i2d>
 800dbc4:	3630      	adds	r6, #48	; 0x30
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	4640      	mov	r0, r8
 800dbcc:	4649      	mov	r1, r9
 800dbce:	f7f2 fb5b 	bl	8000288 <__aeabi_dsub>
 800dbd2:	f805 6b01 	strb.w	r6, [r5], #1
 800dbd6:	9b02      	ldr	r3, [sp, #8]
 800dbd8:	429d      	cmp	r5, r3
 800dbda:	4680      	mov	r8, r0
 800dbdc:	4689      	mov	r9, r1
 800dbde:	f04f 0200 	mov.w	r2, #0
 800dbe2:	d124      	bne.n	800dc2e <_dtoa_r+0x62e>
 800dbe4:	4b1b      	ldr	r3, [pc, #108]	; (800dc54 <_dtoa_r+0x654>)
 800dbe6:	ec51 0b19 	vmov	r0, r1, d9
 800dbea:	f7f2 fb4f 	bl	800028c <__adddf3>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	4649      	mov	r1, r9
 800dbf6:	f7f2 ff8f 	bl	8000b18 <__aeabi_dcmpgt>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d173      	bne.n	800dce6 <_dtoa_r+0x6e6>
 800dbfe:	ec53 2b19 	vmov	r2, r3, d9
 800dc02:	4914      	ldr	r1, [pc, #80]	; (800dc54 <_dtoa_r+0x654>)
 800dc04:	2000      	movs	r0, #0
 800dc06:	f7f2 fb3f 	bl	8000288 <__aeabi_dsub>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	4640      	mov	r0, r8
 800dc10:	4649      	mov	r1, r9
 800dc12:	f7f2 ff63 	bl	8000adc <__aeabi_dcmplt>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	f43f af2f 	beq.w	800da7a <_dtoa_r+0x47a>
 800dc1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc1e:	1e6b      	subs	r3, r5, #1
 800dc20:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc26:	2b30      	cmp	r3, #48	; 0x30
 800dc28:	d0f8      	beq.n	800dc1c <_dtoa_r+0x61c>
 800dc2a:	46bb      	mov	fp, r7
 800dc2c:	e04a      	b.n	800dcc4 <_dtoa_r+0x6c4>
 800dc2e:	4b06      	ldr	r3, [pc, #24]	; (800dc48 <_dtoa_r+0x648>)
 800dc30:	f7f2 fce2 	bl	80005f8 <__aeabi_dmul>
 800dc34:	4680      	mov	r8, r0
 800dc36:	4689      	mov	r9, r1
 800dc38:	e7bd      	b.n	800dbb6 <_dtoa_r+0x5b6>
 800dc3a:	bf00      	nop
 800dc3c:	0800fa20 	.word	0x0800fa20
 800dc40:	0800f9f8 	.word	0x0800f9f8
 800dc44:	3ff00000 	.word	0x3ff00000
 800dc48:	40240000 	.word	0x40240000
 800dc4c:	401c0000 	.word	0x401c0000
 800dc50:	40140000 	.word	0x40140000
 800dc54:	3fe00000 	.word	0x3fe00000
 800dc58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc5c:	9d00      	ldr	r5, [sp, #0]
 800dc5e:	4642      	mov	r2, r8
 800dc60:	464b      	mov	r3, r9
 800dc62:	4630      	mov	r0, r6
 800dc64:	4639      	mov	r1, r7
 800dc66:	f7f2 fdf1 	bl	800084c <__aeabi_ddiv>
 800dc6a:	f7f2 ff75 	bl	8000b58 <__aeabi_d2iz>
 800dc6e:	9001      	str	r0, [sp, #4]
 800dc70:	f7f2 fc58 	bl	8000524 <__aeabi_i2d>
 800dc74:	4642      	mov	r2, r8
 800dc76:	464b      	mov	r3, r9
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	4630      	mov	r0, r6
 800dc82:	4639      	mov	r1, r7
 800dc84:	f7f2 fb00 	bl	8000288 <__aeabi_dsub>
 800dc88:	9e01      	ldr	r6, [sp, #4]
 800dc8a:	9f04      	ldr	r7, [sp, #16]
 800dc8c:	3630      	adds	r6, #48	; 0x30
 800dc8e:	f805 6b01 	strb.w	r6, [r5], #1
 800dc92:	9e00      	ldr	r6, [sp, #0]
 800dc94:	1bae      	subs	r6, r5, r6
 800dc96:	42b7      	cmp	r7, r6
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	d134      	bne.n	800dd08 <_dtoa_r+0x708>
 800dc9e:	f7f2 faf5 	bl	800028c <__adddf3>
 800dca2:	4642      	mov	r2, r8
 800dca4:	464b      	mov	r3, r9
 800dca6:	4606      	mov	r6, r0
 800dca8:	460f      	mov	r7, r1
 800dcaa:	f7f2 ff35 	bl	8000b18 <__aeabi_dcmpgt>
 800dcae:	b9c8      	cbnz	r0, 800dce4 <_dtoa_r+0x6e4>
 800dcb0:	4642      	mov	r2, r8
 800dcb2:	464b      	mov	r3, r9
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	4639      	mov	r1, r7
 800dcb8:	f7f2 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcbc:	b110      	cbz	r0, 800dcc4 <_dtoa_r+0x6c4>
 800dcbe:	9b01      	ldr	r3, [sp, #4]
 800dcc0:	07db      	lsls	r3, r3, #31
 800dcc2:	d40f      	bmi.n	800dce4 <_dtoa_r+0x6e4>
 800dcc4:	4651      	mov	r1, sl
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f000 fbcc 	bl	800e464 <_Bfree>
 800dccc:	2300      	movs	r3, #0
 800dcce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcd0:	702b      	strb	r3, [r5, #0]
 800dcd2:	f10b 0301 	add.w	r3, fp, #1
 800dcd6:	6013      	str	r3, [r2, #0]
 800dcd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f43f ace2 	beq.w	800d6a4 <_dtoa_r+0xa4>
 800dce0:	601d      	str	r5, [r3, #0]
 800dce2:	e4df      	b.n	800d6a4 <_dtoa_r+0xa4>
 800dce4:	465f      	mov	r7, fp
 800dce6:	462b      	mov	r3, r5
 800dce8:	461d      	mov	r5, r3
 800dcea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcee:	2a39      	cmp	r2, #57	; 0x39
 800dcf0:	d106      	bne.n	800dd00 <_dtoa_r+0x700>
 800dcf2:	9a00      	ldr	r2, [sp, #0]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d1f7      	bne.n	800dce8 <_dtoa_r+0x6e8>
 800dcf8:	9900      	ldr	r1, [sp, #0]
 800dcfa:	2230      	movs	r2, #48	; 0x30
 800dcfc:	3701      	adds	r7, #1
 800dcfe:	700a      	strb	r2, [r1, #0]
 800dd00:	781a      	ldrb	r2, [r3, #0]
 800dd02:	3201      	adds	r2, #1
 800dd04:	701a      	strb	r2, [r3, #0]
 800dd06:	e790      	b.n	800dc2a <_dtoa_r+0x62a>
 800dd08:	4ba3      	ldr	r3, [pc, #652]	; (800df98 <_dtoa_r+0x998>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f7f2 fc74 	bl	80005f8 <__aeabi_dmul>
 800dd10:	2200      	movs	r2, #0
 800dd12:	2300      	movs	r3, #0
 800dd14:	4606      	mov	r6, r0
 800dd16:	460f      	mov	r7, r1
 800dd18:	f7f2 fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d09e      	beq.n	800dc5e <_dtoa_r+0x65e>
 800dd20:	e7d0      	b.n	800dcc4 <_dtoa_r+0x6c4>
 800dd22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd24:	2a00      	cmp	r2, #0
 800dd26:	f000 80ca 	beq.w	800debe <_dtoa_r+0x8be>
 800dd2a:	9a07      	ldr	r2, [sp, #28]
 800dd2c:	2a01      	cmp	r2, #1
 800dd2e:	f300 80ad 	bgt.w	800de8c <_dtoa_r+0x88c>
 800dd32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd34:	2a00      	cmp	r2, #0
 800dd36:	f000 80a5 	beq.w	800de84 <_dtoa_r+0x884>
 800dd3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd3e:	9e08      	ldr	r6, [sp, #32]
 800dd40:	9d05      	ldr	r5, [sp, #20]
 800dd42:	9a05      	ldr	r2, [sp, #20]
 800dd44:	441a      	add	r2, r3
 800dd46:	9205      	str	r2, [sp, #20]
 800dd48:	9a06      	ldr	r2, [sp, #24]
 800dd4a:	2101      	movs	r1, #1
 800dd4c:	441a      	add	r2, r3
 800dd4e:	4620      	mov	r0, r4
 800dd50:	9206      	str	r2, [sp, #24]
 800dd52:	f000 fc3d 	bl	800e5d0 <__i2b>
 800dd56:	4607      	mov	r7, r0
 800dd58:	b165      	cbz	r5, 800dd74 <_dtoa_r+0x774>
 800dd5a:	9b06      	ldr	r3, [sp, #24]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	dd09      	ble.n	800dd74 <_dtoa_r+0x774>
 800dd60:	42ab      	cmp	r3, r5
 800dd62:	9a05      	ldr	r2, [sp, #20]
 800dd64:	bfa8      	it	ge
 800dd66:	462b      	movge	r3, r5
 800dd68:	1ad2      	subs	r2, r2, r3
 800dd6a:	9205      	str	r2, [sp, #20]
 800dd6c:	9a06      	ldr	r2, [sp, #24]
 800dd6e:	1aed      	subs	r5, r5, r3
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	9306      	str	r3, [sp, #24]
 800dd74:	9b08      	ldr	r3, [sp, #32]
 800dd76:	b1f3      	cbz	r3, 800ddb6 <_dtoa_r+0x7b6>
 800dd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f000 80a3 	beq.w	800dec6 <_dtoa_r+0x8c6>
 800dd80:	2e00      	cmp	r6, #0
 800dd82:	dd10      	ble.n	800dda6 <_dtoa_r+0x7a6>
 800dd84:	4639      	mov	r1, r7
 800dd86:	4632      	mov	r2, r6
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f000 fce1 	bl	800e750 <__pow5mult>
 800dd8e:	4652      	mov	r2, sl
 800dd90:	4601      	mov	r1, r0
 800dd92:	4607      	mov	r7, r0
 800dd94:	4620      	mov	r0, r4
 800dd96:	f000 fc31 	bl	800e5fc <__multiply>
 800dd9a:	4651      	mov	r1, sl
 800dd9c:	4680      	mov	r8, r0
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f000 fb60 	bl	800e464 <_Bfree>
 800dda4:	46c2      	mov	sl, r8
 800dda6:	9b08      	ldr	r3, [sp, #32]
 800dda8:	1b9a      	subs	r2, r3, r6
 800ddaa:	d004      	beq.n	800ddb6 <_dtoa_r+0x7b6>
 800ddac:	4651      	mov	r1, sl
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f000 fcce 	bl	800e750 <__pow5mult>
 800ddb4:	4682      	mov	sl, r0
 800ddb6:	2101      	movs	r1, #1
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 fc09 	bl	800e5d0 <__i2b>
 800ddbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	f340 8081 	ble.w	800deca <_dtoa_r+0x8ca>
 800ddc8:	461a      	mov	r2, r3
 800ddca:	4601      	mov	r1, r0
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f000 fcbf 	bl	800e750 <__pow5mult>
 800ddd2:	9b07      	ldr	r3, [sp, #28]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	dd7a      	ble.n	800ded0 <_dtoa_r+0x8d0>
 800ddda:	f04f 0800 	mov.w	r8, #0
 800ddde:	6933      	ldr	r3, [r6, #16]
 800dde0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dde4:	6918      	ldr	r0, [r3, #16]
 800dde6:	f000 fba5 	bl	800e534 <__hi0bits>
 800ddea:	f1c0 0020 	rsb	r0, r0, #32
 800ddee:	9b06      	ldr	r3, [sp, #24]
 800ddf0:	4418      	add	r0, r3
 800ddf2:	f010 001f 	ands.w	r0, r0, #31
 800ddf6:	f000 8094 	beq.w	800df22 <_dtoa_r+0x922>
 800ddfa:	f1c0 0320 	rsb	r3, r0, #32
 800ddfe:	2b04      	cmp	r3, #4
 800de00:	f340 8085 	ble.w	800df0e <_dtoa_r+0x90e>
 800de04:	9b05      	ldr	r3, [sp, #20]
 800de06:	f1c0 001c 	rsb	r0, r0, #28
 800de0a:	4403      	add	r3, r0
 800de0c:	9305      	str	r3, [sp, #20]
 800de0e:	9b06      	ldr	r3, [sp, #24]
 800de10:	4403      	add	r3, r0
 800de12:	4405      	add	r5, r0
 800de14:	9306      	str	r3, [sp, #24]
 800de16:	9b05      	ldr	r3, [sp, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	dd05      	ble.n	800de28 <_dtoa_r+0x828>
 800de1c:	4651      	mov	r1, sl
 800de1e:	461a      	mov	r2, r3
 800de20:	4620      	mov	r0, r4
 800de22:	f000 fcef 	bl	800e804 <__lshift>
 800de26:	4682      	mov	sl, r0
 800de28:	9b06      	ldr	r3, [sp, #24]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	dd05      	ble.n	800de3a <_dtoa_r+0x83a>
 800de2e:	4631      	mov	r1, r6
 800de30:	461a      	mov	r2, r3
 800de32:	4620      	mov	r0, r4
 800de34:	f000 fce6 	bl	800e804 <__lshift>
 800de38:	4606      	mov	r6, r0
 800de3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d072      	beq.n	800df26 <_dtoa_r+0x926>
 800de40:	4631      	mov	r1, r6
 800de42:	4650      	mov	r0, sl
 800de44:	f000 fd4a 	bl	800e8dc <__mcmp>
 800de48:	2800      	cmp	r0, #0
 800de4a:	da6c      	bge.n	800df26 <_dtoa_r+0x926>
 800de4c:	2300      	movs	r3, #0
 800de4e:	4651      	mov	r1, sl
 800de50:	220a      	movs	r2, #10
 800de52:	4620      	mov	r0, r4
 800de54:	f000 fb28 	bl	800e4a8 <__multadd>
 800de58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de5e:	4682      	mov	sl, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	f000 81b0 	beq.w	800e1c6 <_dtoa_r+0xbc6>
 800de66:	2300      	movs	r3, #0
 800de68:	4639      	mov	r1, r7
 800de6a:	220a      	movs	r2, #10
 800de6c:	4620      	mov	r0, r4
 800de6e:	f000 fb1b 	bl	800e4a8 <__multadd>
 800de72:	9b01      	ldr	r3, [sp, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	4607      	mov	r7, r0
 800de78:	f300 8096 	bgt.w	800dfa8 <_dtoa_r+0x9a8>
 800de7c:	9b07      	ldr	r3, [sp, #28]
 800de7e:	2b02      	cmp	r3, #2
 800de80:	dc59      	bgt.n	800df36 <_dtoa_r+0x936>
 800de82:	e091      	b.n	800dfa8 <_dtoa_r+0x9a8>
 800de84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de8a:	e758      	b.n	800dd3e <_dtoa_r+0x73e>
 800de8c:	9b04      	ldr	r3, [sp, #16]
 800de8e:	1e5e      	subs	r6, r3, #1
 800de90:	9b08      	ldr	r3, [sp, #32]
 800de92:	42b3      	cmp	r3, r6
 800de94:	bfbf      	itttt	lt
 800de96:	9b08      	ldrlt	r3, [sp, #32]
 800de98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800de9a:	9608      	strlt	r6, [sp, #32]
 800de9c:	1af3      	sublt	r3, r6, r3
 800de9e:	bfb4      	ite	lt
 800dea0:	18d2      	addlt	r2, r2, r3
 800dea2:	1b9e      	subge	r6, r3, r6
 800dea4:	9b04      	ldr	r3, [sp, #16]
 800dea6:	bfbc      	itt	lt
 800dea8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800deaa:	2600      	movlt	r6, #0
 800deac:	2b00      	cmp	r3, #0
 800deae:	bfb7      	itett	lt
 800deb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800deb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800deb8:	1a9d      	sublt	r5, r3, r2
 800deba:	2300      	movlt	r3, #0
 800debc:	e741      	b.n	800dd42 <_dtoa_r+0x742>
 800debe:	9e08      	ldr	r6, [sp, #32]
 800dec0:	9d05      	ldr	r5, [sp, #20]
 800dec2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dec4:	e748      	b.n	800dd58 <_dtoa_r+0x758>
 800dec6:	9a08      	ldr	r2, [sp, #32]
 800dec8:	e770      	b.n	800ddac <_dtoa_r+0x7ac>
 800deca:	9b07      	ldr	r3, [sp, #28]
 800decc:	2b01      	cmp	r3, #1
 800dece:	dc19      	bgt.n	800df04 <_dtoa_r+0x904>
 800ded0:	9b02      	ldr	r3, [sp, #8]
 800ded2:	b9bb      	cbnz	r3, 800df04 <_dtoa_r+0x904>
 800ded4:	9b03      	ldr	r3, [sp, #12]
 800ded6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deda:	b99b      	cbnz	r3, 800df04 <_dtoa_r+0x904>
 800dedc:	9b03      	ldr	r3, [sp, #12]
 800dede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dee2:	0d1b      	lsrs	r3, r3, #20
 800dee4:	051b      	lsls	r3, r3, #20
 800dee6:	b183      	cbz	r3, 800df0a <_dtoa_r+0x90a>
 800dee8:	9b05      	ldr	r3, [sp, #20]
 800deea:	3301      	adds	r3, #1
 800deec:	9305      	str	r3, [sp, #20]
 800deee:	9b06      	ldr	r3, [sp, #24]
 800def0:	3301      	adds	r3, #1
 800def2:	9306      	str	r3, [sp, #24]
 800def4:	f04f 0801 	mov.w	r8, #1
 800def8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800defa:	2b00      	cmp	r3, #0
 800defc:	f47f af6f 	bne.w	800ddde <_dtoa_r+0x7de>
 800df00:	2001      	movs	r0, #1
 800df02:	e774      	b.n	800ddee <_dtoa_r+0x7ee>
 800df04:	f04f 0800 	mov.w	r8, #0
 800df08:	e7f6      	b.n	800def8 <_dtoa_r+0x8f8>
 800df0a:	4698      	mov	r8, r3
 800df0c:	e7f4      	b.n	800def8 <_dtoa_r+0x8f8>
 800df0e:	d082      	beq.n	800de16 <_dtoa_r+0x816>
 800df10:	9a05      	ldr	r2, [sp, #20]
 800df12:	331c      	adds	r3, #28
 800df14:	441a      	add	r2, r3
 800df16:	9205      	str	r2, [sp, #20]
 800df18:	9a06      	ldr	r2, [sp, #24]
 800df1a:	441a      	add	r2, r3
 800df1c:	441d      	add	r5, r3
 800df1e:	9206      	str	r2, [sp, #24]
 800df20:	e779      	b.n	800de16 <_dtoa_r+0x816>
 800df22:	4603      	mov	r3, r0
 800df24:	e7f4      	b.n	800df10 <_dtoa_r+0x910>
 800df26:	9b04      	ldr	r3, [sp, #16]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	dc37      	bgt.n	800df9c <_dtoa_r+0x99c>
 800df2c:	9b07      	ldr	r3, [sp, #28]
 800df2e:	2b02      	cmp	r3, #2
 800df30:	dd34      	ble.n	800df9c <_dtoa_r+0x99c>
 800df32:	9b04      	ldr	r3, [sp, #16]
 800df34:	9301      	str	r3, [sp, #4]
 800df36:	9b01      	ldr	r3, [sp, #4]
 800df38:	b963      	cbnz	r3, 800df54 <_dtoa_r+0x954>
 800df3a:	4631      	mov	r1, r6
 800df3c:	2205      	movs	r2, #5
 800df3e:	4620      	mov	r0, r4
 800df40:	f000 fab2 	bl	800e4a8 <__multadd>
 800df44:	4601      	mov	r1, r0
 800df46:	4606      	mov	r6, r0
 800df48:	4650      	mov	r0, sl
 800df4a:	f000 fcc7 	bl	800e8dc <__mcmp>
 800df4e:	2800      	cmp	r0, #0
 800df50:	f73f adbb 	bgt.w	800daca <_dtoa_r+0x4ca>
 800df54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df56:	9d00      	ldr	r5, [sp, #0]
 800df58:	ea6f 0b03 	mvn.w	fp, r3
 800df5c:	f04f 0800 	mov.w	r8, #0
 800df60:	4631      	mov	r1, r6
 800df62:	4620      	mov	r0, r4
 800df64:	f000 fa7e 	bl	800e464 <_Bfree>
 800df68:	2f00      	cmp	r7, #0
 800df6a:	f43f aeab 	beq.w	800dcc4 <_dtoa_r+0x6c4>
 800df6e:	f1b8 0f00 	cmp.w	r8, #0
 800df72:	d005      	beq.n	800df80 <_dtoa_r+0x980>
 800df74:	45b8      	cmp	r8, r7
 800df76:	d003      	beq.n	800df80 <_dtoa_r+0x980>
 800df78:	4641      	mov	r1, r8
 800df7a:	4620      	mov	r0, r4
 800df7c:	f000 fa72 	bl	800e464 <_Bfree>
 800df80:	4639      	mov	r1, r7
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fa6e 	bl	800e464 <_Bfree>
 800df88:	e69c      	b.n	800dcc4 <_dtoa_r+0x6c4>
 800df8a:	2600      	movs	r6, #0
 800df8c:	4637      	mov	r7, r6
 800df8e:	e7e1      	b.n	800df54 <_dtoa_r+0x954>
 800df90:	46bb      	mov	fp, r7
 800df92:	4637      	mov	r7, r6
 800df94:	e599      	b.n	800daca <_dtoa_r+0x4ca>
 800df96:	bf00      	nop
 800df98:	40240000 	.word	0x40240000
 800df9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f000 80c8 	beq.w	800e134 <_dtoa_r+0xb34>
 800dfa4:	9b04      	ldr	r3, [sp, #16]
 800dfa6:	9301      	str	r3, [sp, #4]
 800dfa8:	2d00      	cmp	r5, #0
 800dfaa:	dd05      	ble.n	800dfb8 <_dtoa_r+0x9b8>
 800dfac:	4639      	mov	r1, r7
 800dfae:	462a      	mov	r2, r5
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f000 fc27 	bl	800e804 <__lshift>
 800dfb6:	4607      	mov	r7, r0
 800dfb8:	f1b8 0f00 	cmp.w	r8, #0
 800dfbc:	d05b      	beq.n	800e076 <_dtoa_r+0xa76>
 800dfbe:	6879      	ldr	r1, [r7, #4]
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f000 fa0f 	bl	800e3e4 <_Balloc>
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	b928      	cbnz	r0, 800dfd6 <_dtoa_r+0x9d6>
 800dfca:	4b83      	ldr	r3, [pc, #524]	; (800e1d8 <_dtoa_r+0xbd8>)
 800dfcc:	4602      	mov	r2, r0
 800dfce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dfd2:	f7ff bb2e 	b.w	800d632 <_dtoa_r+0x32>
 800dfd6:	693a      	ldr	r2, [r7, #16]
 800dfd8:	3202      	adds	r2, #2
 800dfda:	0092      	lsls	r2, r2, #2
 800dfdc:	f107 010c 	add.w	r1, r7, #12
 800dfe0:	300c      	adds	r0, #12
 800dfe2:	f7ff fa77 	bl	800d4d4 <memcpy>
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	4629      	mov	r1, r5
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 fc0a 	bl	800e804 <__lshift>
 800dff0:	9b00      	ldr	r3, [sp, #0]
 800dff2:	3301      	adds	r3, #1
 800dff4:	9304      	str	r3, [sp, #16]
 800dff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dffa:	4413      	add	r3, r2
 800dffc:	9308      	str	r3, [sp, #32]
 800dffe:	9b02      	ldr	r3, [sp, #8]
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	46b8      	mov	r8, r7
 800e006:	9306      	str	r3, [sp, #24]
 800e008:	4607      	mov	r7, r0
 800e00a:	9b04      	ldr	r3, [sp, #16]
 800e00c:	4631      	mov	r1, r6
 800e00e:	3b01      	subs	r3, #1
 800e010:	4650      	mov	r0, sl
 800e012:	9301      	str	r3, [sp, #4]
 800e014:	f7ff fa6c 	bl	800d4f0 <quorem>
 800e018:	4641      	mov	r1, r8
 800e01a:	9002      	str	r0, [sp, #8]
 800e01c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e020:	4650      	mov	r0, sl
 800e022:	f000 fc5b 	bl	800e8dc <__mcmp>
 800e026:	463a      	mov	r2, r7
 800e028:	9005      	str	r0, [sp, #20]
 800e02a:	4631      	mov	r1, r6
 800e02c:	4620      	mov	r0, r4
 800e02e:	f000 fc71 	bl	800e914 <__mdiff>
 800e032:	68c2      	ldr	r2, [r0, #12]
 800e034:	4605      	mov	r5, r0
 800e036:	bb02      	cbnz	r2, 800e07a <_dtoa_r+0xa7a>
 800e038:	4601      	mov	r1, r0
 800e03a:	4650      	mov	r0, sl
 800e03c:	f000 fc4e 	bl	800e8dc <__mcmp>
 800e040:	4602      	mov	r2, r0
 800e042:	4629      	mov	r1, r5
 800e044:	4620      	mov	r0, r4
 800e046:	9209      	str	r2, [sp, #36]	; 0x24
 800e048:	f000 fa0c 	bl	800e464 <_Bfree>
 800e04c:	9b07      	ldr	r3, [sp, #28]
 800e04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e050:	9d04      	ldr	r5, [sp, #16]
 800e052:	ea43 0102 	orr.w	r1, r3, r2
 800e056:	9b06      	ldr	r3, [sp, #24]
 800e058:	4319      	orrs	r1, r3
 800e05a:	d110      	bne.n	800e07e <_dtoa_r+0xa7e>
 800e05c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e060:	d029      	beq.n	800e0b6 <_dtoa_r+0xab6>
 800e062:	9b05      	ldr	r3, [sp, #20]
 800e064:	2b00      	cmp	r3, #0
 800e066:	dd02      	ble.n	800e06e <_dtoa_r+0xa6e>
 800e068:	9b02      	ldr	r3, [sp, #8]
 800e06a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e06e:	9b01      	ldr	r3, [sp, #4]
 800e070:	f883 9000 	strb.w	r9, [r3]
 800e074:	e774      	b.n	800df60 <_dtoa_r+0x960>
 800e076:	4638      	mov	r0, r7
 800e078:	e7ba      	b.n	800dff0 <_dtoa_r+0x9f0>
 800e07a:	2201      	movs	r2, #1
 800e07c:	e7e1      	b.n	800e042 <_dtoa_r+0xa42>
 800e07e:	9b05      	ldr	r3, [sp, #20]
 800e080:	2b00      	cmp	r3, #0
 800e082:	db04      	blt.n	800e08e <_dtoa_r+0xa8e>
 800e084:	9907      	ldr	r1, [sp, #28]
 800e086:	430b      	orrs	r3, r1
 800e088:	9906      	ldr	r1, [sp, #24]
 800e08a:	430b      	orrs	r3, r1
 800e08c:	d120      	bne.n	800e0d0 <_dtoa_r+0xad0>
 800e08e:	2a00      	cmp	r2, #0
 800e090:	dded      	ble.n	800e06e <_dtoa_r+0xa6e>
 800e092:	4651      	mov	r1, sl
 800e094:	2201      	movs	r2, #1
 800e096:	4620      	mov	r0, r4
 800e098:	f000 fbb4 	bl	800e804 <__lshift>
 800e09c:	4631      	mov	r1, r6
 800e09e:	4682      	mov	sl, r0
 800e0a0:	f000 fc1c 	bl	800e8dc <__mcmp>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	dc03      	bgt.n	800e0b0 <_dtoa_r+0xab0>
 800e0a8:	d1e1      	bne.n	800e06e <_dtoa_r+0xa6e>
 800e0aa:	f019 0f01 	tst.w	r9, #1
 800e0ae:	d0de      	beq.n	800e06e <_dtoa_r+0xa6e>
 800e0b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0b4:	d1d8      	bne.n	800e068 <_dtoa_r+0xa68>
 800e0b6:	9a01      	ldr	r2, [sp, #4]
 800e0b8:	2339      	movs	r3, #57	; 0x39
 800e0ba:	7013      	strb	r3, [r2, #0]
 800e0bc:	462b      	mov	r3, r5
 800e0be:	461d      	mov	r5, r3
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e0c6:	2a39      	cmp	r2, #57	; 0x39
 800e0c8:	d06c      	beq.n	800e1a4 <_dtoa_r+0xba4>
 800e0ca:	3201      	adds	r2, #1
 800e0cc:	701a      	strb	r2, [r3, #0]
 800e0ce:	e747      	b.n	800df60 <_dtoa_r+0x960>
 800e0d0:	2a00      	cmp	r2, #0
 800e0d2:	dd07      	ble.n	800e0e4 <_dtoa_r+0xae4>
 800e0d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e0d8:	d0ed      	beq.n	800e0b6 <_dtoa_r+0xab6>
 800e0da:	9a01      	ldr	r2, [sp, #4]
 800e0dc:	f109 0301 	add.w	r3, r9, #1
 800e0e0:	7013      	strb	r3, [r2, #0]
 800e0e2:	e73d      	b.n	800df60 <_dtoa_r+0x960>
 800e0e4:	9b04      	ldr	r3, [sp, #16]
 800e0e6:	9a08      	ldr	r2, [sp, #32]
 800e0e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d043      	beq.n	800e178 <_dtoa_r+0xb78>
 800e0f0:	4651      	mov	r1, sl
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	220a      	movs	r2, #10
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 f9d6 	bl	800e4a8 <__multadd>
 800e0fc:	45b8      	cmp	r8, r7
 800e0fe:	4682      	mov	sl, r0
 800e100:	f04f 0300 	mov.w	r3, #0
 800e104:	f04f 020a 	mov.w	r2, #10
 800e108:	4641      	mov	r1, r8
 800e10a:	4620      	mov	r0, r4
 800e10c:	d107      	bne.n	800e11e <_dtoa_r+0xb1e>
 800e10e:	f000 f9cb 	bl	800e4a8 <__multadd>
 800e112:	4680      	mov	r8, r0
 800e114:	4607      	mov	r7, r0
 800e116:	9b04      	ldr	r3, [sp, #16]
 800e118:	3301      	adds	r3, #1
 800e11a:	9304      	str	r3, [sp, #16]
 800e11c:	e775      	b.n	800e00a <_dtoa_r+0xa0a>
 800e11e:	f000 f9c3 	bl	800e4a8 <__multadd>
 800e122:	4639      	mov	r1, r7
 800e124:	4680      	mov	r8, r0
 800e126:	2300      	movs	r3, #0
 800e128:	220a      	movs	r2, #10
 800e12a:	4620      	mov	r0, r4
 800e12c:	f000 f9bc 	bl	800e4a8 <__multadd>
 800e130:	4607      	mov	r7, r0
 800e132:	e7f0      	b.n	800e116 <_dtoa_r+0xb16>
 800e134:	9b04      	ldr	r3, [sp, #16]
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	9d00      	ldr	r5, [sp, #0]
 800e13a:	4631      	mov	r1, r6
 800e13c:	4650      	mov	r0, sl
 800e13e:	f7ff f9d7 	bl	800d4f0 <quorem>
 800e142:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e146:	9b00      	ldr	r3, [sp, #0]
 800e148:	f805 9b01 	strb.w	r9, [r5], #1
 800e14c:	1aea      	subs	r2, r5, r3
 800e14e:	9b01      	ldr	r3, [sp, #4]
 800e150:	4293      	cmp	r3, r2
 800e152:	dd07      	ble.n	800e164 <_dtoa_r+0xb64>
 800e154:	4651      	mov	r1, sl
 800e156:	2300      	movs	r3, #0
 800e158:	220a      	movs	r2, #10
 800e15a:	4620      	mov	r0, r4
 800e15c:	f000 f9a4 	bl	800e4a8 <__multadd>
 800e160:	4682      	mov	sl, r0
 800e162:	e7ea      	b.n	800e13a <_dtoa_r+0xb3a>
 800e164:	9b01      	ldr	r3, [sp, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	bfc8      	it	gt
 800e16a:	461d      	movgt	r5, r3
 800e16c:	9b00      	ldr	r3, [sp, #0]
 800e16e:	bfd8      	it	le
 800e170:	2501      	movle	r5, #1
 800e172:	441d      	add	r5, r3
 800e174:	f04f 0800 	mov.w	r8, #0
 800e178:	4651      	mov	r1, sl
 800e17a:	2201      	movs	r2, #1
 800e17c:	4620      	mov	r0, r4
 800e17e:	f000 fb41 	bl	800e804 <__lshift>
 800e182:	4631      	mov	r1, r6
 800e184:	4682      	mov	sl, r0
 800e186:	f000 fba9 	bl	800e8dc <__mcmp>
 800e18a:	2800      	cmp	r0, #0
 800e18c:	dc96      	bgt.n	800e0bc <_dtoa_r+0xabc>
 800e18e:	d102      	bne.n	800e196 <_dtoa_r+0xb96>
 800e190:	f019 0f01 	tst.w	r9, #1
 800e194:	d192      	bne.n	800e0bc <_dtoa_r+0xabc>
 800e196:	462b      	mov	r3, r5
 800e198:	461d      	mov	r5, r3
 800e19a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e19e:	2a30      	cmp	r2, #48	; 0x30
 800e1a0:	d0fa      	beq.n	800e198 <_dtoa_r+0xb98>
 800e1a2:	e6dd      	b.n	800df60 <_dtoa_r+0x960>
 800e1a4:	9a00      	ldr	r2, [sp, #0]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d189      	bne.n	800e0be <_dtoa_r+0xabe>
 800e1aa:	f10b 0b01 	add.w	fp, fp, #1
 800e1ae:	2331      	movs	r3, #49	; 0x31
 800e1b0:	e796      	b.n	800e0e0 <_dtoa_r+0xae0>
 800e1b2:	4b0a      	ldr	r3, [pc, #40]	; (800e1dc <_dtoa_r+0xbdc>)
 800e1b4:	f7ff ba99 	b.w	800d6ea <_dtoa_r+0xea>
 800e1b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	f47f aa6d 	bne.w	800d69a <_dtoa_r+0x9a>
 800e1c0:	4b07      	ldr	r3, [pc, #28]	; (800e1e0 <_dtoa_r+0xbe0>)
 800e1c2:	f7ff ba92 	b.w	800d6ea <_dtoa_r+0xea>
 800e1c6:	9b01      	ldr	r3, [sp, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	dcb5      	bgt.n	800e138 <_dtoa_r+0xb38>
 800e1cc:	9b07      	ldr	r3, [sp, #28]
 800e1ce:	2b02      	cmp	r3, #2
 800e1d0:	f73f aeb1 	bgt.w	800df36 <_dtoa_r+0x936>
 800e1d4:	e7b0      	b.n	800e138 <_dtoa_r+0xb38>
 800e1d6:	bf00      	nop
 800e1d8:	0800f98c 	.word	0x0800f98c
 800e1dc:	0800f8ec 	.word	0x0800f8ec
 800e1e0:	0800f910 	.word	0x0800f910

0800e1e4 <_free_r>:
 800e1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1e6:	2900      	cmp	r1, #0
 800e1e8:	d044      	beq.n	800e274 <_free_r+0x90>
 800e1ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1ee:	9001      	str	r0, [sp, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f1a1 0404 	sub.w	r4, r1, #4
 800e1f6:	bfb8      	it	lt
 800e1f8:	18e4      	addlt	r4, r4, r3
 800e1fa:	f000 f8e7 	bl	800e3cc <__malloc_lock>
 800e1fe:	4a1e      	ldr	r2, [pc, #120]	; (800e278 <_free_r+0x94>)
 800e200:	9801      	ldr	r0, [sp, #4]
 800e202:	6813      	ldr	r3, [r2, #0]
 800e204:	b933      	cbnz	r3, 800e214 <_free_r+0x30>
 800e206:	6063      	str	r3, [r4, #4]
 800e208:	6014      	str	r4, [r2, #0]
 800e20a:	b003      	add	sp, #12
 800e20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e210:	f000 b8e2 	b.w	800e3d8 <__malloc_unlock>
 800e214:	42a3      	cmp	r3, r4
 800e216:	d908      	bls.n	800e22a <_free_r+0x46>
 800e218:	6825      	ldr	r5, [r4, #0]
 800e21a:	1961      	adds	r1, r4, r5
 800e21c:	428b      	cmp	r3, r1
 800e21e:	bf01      	itttt	eq
 800e220:	6819      	ldreq	r1, [r3, #0]
 800e222:	685b      	ldreq	r3, [r3, #4]
 800e224:	1949      	addeq	r1, r1, r5
 800e226:	6021      	streq	r1, [r4, #0]
 800e228:	e7ed      	b.n	800e206 <_free_r+0x22>
 800e22a:	461a      	mov	r2, r3
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	b10b      	cbz	r3, 800e234 <_free_r+0x50>
 800e230:	42a3      	cmp	r3, r4
 800e232:	d9fa      	bls.n	800e22a <_free_r+0x46>
 800e234:	6811      	ldr	r1, [r2, #0]
 800e236:	1855      	adds	r5, r2, r1
 800e238:	42a5      	cmp	r5, r4
 800e23a:	d10b      	bne.n	800e254 <_free_r+0x70>
 800e23c:	6824      	ldr	r4, [r4, #0]
 800e23e:	4421      	add	r1, r4
 800e240:	1854      	adds	r4, r2, r1
 800e242:	42a3      	cmp	r3, r4
 800e244:	6011      	str	r1, [r2, #0]
 800e246:	d1e0      	bne.n	800e20a <_free_r+0x26>
 800e248:	681c      	ldr	r4, [r3, #0]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	6053      	str	r3, [r2, #4]
 800e24e:	440c      	add	r4, r1
 800e250:	6014      	str	r4, [r2, #0]
 800e252:	e7da      	b.n	800e20a <_free_r+0x26>
 800e254:	d902      	bls.n	800e25c <_free_r+0x78>
 800e256:	230c      	movs	r3, #12
 800e258:	6003      	str	r3, [r0, #0]
 800e25a:	e7d6      	b.n	800e20a <_free_r+0x26>
 800e25c:	6825      	ldr	r5, [r4, #0]
 800e25e:	1961      	adds	r1, r4, r5
 800e260:	428b      	cmp	r3, r1
 800e262:	bf04      	itt	eq
 800e264:	6819      	ldreq	r1, [r3, #0]
 800e266:	685b      	ldreq	r3, [r3, #4]
 800e268:	6063      	str	r3, [r4, #4]
 800e26a:	bf04      	itt	eq
 800e26c:	1949      	addeq	r1, r1, r5
 800e26e:	6021      	streq	r1, [r4, #0]
 800e270:	6054      	str	r4, [r2, #4]
 800e272:	e7ca      	b.n	800e20a <_free_r+0x26>
 800e274:	b003      	add	sp, #12
 800e276:	bd30      	pop	{r4, r5, pc}
 800e278:	20001748 	.word	0x20001748

0800e27c <malloc>:
 800e27c:	4b02      	ldr	r3, [pc, #8]	; (800e288 <malloc+0xc>)
 800e27e:	4601      	mov	r1, r0
 800e280:	6818      	ldr	r0, [r3, #0]
 800e282:	f000 b823 	b.w	800e2cc <_malloc_r>
 800e286:	bf00      	nop
 800e288:	20000164 	.word	0x20000164

0800e28c <sbrk_aligned>:
 800e28c:	b570      	push	{r4, r5, r6, lr}
 800e28e:	4e0e      	ldr	r6, [pc, #56]	; (800e2c8 <sbrk_aligned+0x3c>)
 800e290:	460c      	mov	r4, r1
 800e292:	6831      	ldr	r1, [r6, #0]
 800e294:	4605      	mov	r5, r0
 800e296:	b911      	cbnz	r1, 800e29e <sbrk_aligned+0x12>
 800e298:	f001 f808 	bl	800f2ac <_sbrk_r>
 800e29c:	6030      	str	r0, [r6, #0]
 800e29e:	4621      	mov	r1, r4
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	f001 f803 	bl	800f2ac <_sbrk_r>
 800e2a6:	1c43      	adds	r3, r0, #1
 800e2a8:	d00a      	beq.n	800e2c0 <sbrk_aligned+0x34>
 800e2aa:	1cc4      	adds	r4, r0, #3
 800e2ac:	f024 0403 	bic.w	r4, r4, #3
 800e2b0:	42a0      	cmp	r0, r4
 800e2b2:	d007      	beq.n	800e2c4 <sbrk_aligned+0x38>
 800e2b4:	1a21      	subs	r1, r4, r0
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f000 fff8 	bl	800f2ac <_sbrk_r>
 800e2bc:	3001      	adds	r0, #1
 800e2be:	d101      	bne.n	800e2c4 <sbrk_aligned+0x38>
 800e2c0:	f04f 34ff 	mov.w	r4, #4294967295
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	bd70      	pop	{r4, r5, r6, pc}
 800e2c8:	2000174c 	.word	0x2000174c

0800e2cc <_malloc_r>:
 800e2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2d0:	1ccd      	adds	r5, r1, #3
 800e2d2:	f025 0503 	bic.w	r5, r5, #3
 800e2d6:	3508      	adds	r5, #8
 800e2d8:	2d0c      	cmp	r5, #12
 800e2da:	bf38      	it	cc
 800e2dc:	250c      	movcc	r5, #12
 800e2de:	2d00      	cmp	r5, #0
 800e2e0:	4607      	mov	r7, r0
 800e2e2:	db01      	blt.n	800e2e8 <_malloc_r+0x1c>
 800e2e4:	42a9      	cmp	r1, r5
 800e2e6:	d905      	bls.n	800e2f4 <_malloc_r+0x28>
 800e2e8:	230c      	movs	r3, #12
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	2600      	movs	r6, #0
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e3c8 <_malloc_r+0xfc>
 800e2f8:	f000 f868 	bl	800e3cc <__malloc_lock>
 800e2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800e300:	461c      	mov	r4, r3
 800e302:	bb5c      	cbnz	r4, 800e35c <_malloc_r+0x90>
 800e304:	4629      	mov	r1, r5
 800e306:	4638      	mov	r0, r7
 800e308:	f7ff ffc0 	bl	800e28c <sbrk_aligned>
 800e30c:	1c43      	adds	r3, r0, #1
 800e30e:	4604      	mov	r4, r0
 800e310:	d155      	bne.n	800e3be <_malloc_r+0xf2>
 800e312:	f8d8 4000 	ldr.w	r4, [r8]
 800e316:	4626      	mov	r6, r4
 800e318:	2e00      	cmp	r6, #0
 800e31a:	d145      	bne.n	800e3a8 <_malloc_r+0xdc>
 800e31c:	2c00      	cmp	r4, #0
 800e31e:	d048      	beq.n	800e3b2 <_malloc_r+0xe6>
 800e320:	6823      	ldr	r3, [r4, #0]
 800e322:	4631      	mov	r1, r6
 800e324:	4638      	mov	r0, r7
 800e326:	eb04 0903 	add.w	r9, r4, r3
 800e32a:	f000 ffbf 	bl	800f2ac <_sbrk_r>
 800e32e:	4581      	cmp	r9, r0
 800e330:	d13f      	bne.n	800e3b2 <_malloc_r+0xe6>
 800e332:	6821      	ldr	r1, [r4, #0]
 800e334:	1a6d      	subs	r5, r5, r1
 800e336:	4629      	mov	r1, r5
 800e338:	4638      	mov	r0, r7
 800e33a:	f7ff ffa7 	bl	800e28c <sbrk_aligned>
 800e33e:	3001      	adds	r0, #1
 800e340:	d037      	beq.n	800e3b2 <_malloc_r+0xe6>
 800e342:	6823      	ldr	r3, [r4, #0]
 800e344:	442b      	add	r3, r5
 800e346:	6023      	str	r3, [r4, #0]
 800e348:	f8d8 3000 	ldr.w	r3, [r8]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d038      	beq.n	800e3c2 <_malloc_r+0xf6>
 800e350:	685a      	ldr	r2, [r3, #4]
 800e352:	42a2      	cmp	r2, r4
 800e354:	d12b      	bne.n	800e3ae <_malloc_r+0xe2>
 800e356:	2200      	movs	r2, #0
 800e358:	605a      	str	r2, [r3, #4]
 800e35a:	e00f      	b.n	800e37c <_malloc_r+0xb0>
 800e35c:	6822      	ldr	r2, [r4, #0]
 800e35e:	1b52      	subs	r2, r2, r5
 800e360:	d41f      	bmi.n	800e3a2 <_malloc_r+0xd6>
 800e362:	2a0b      	cmp	r2, #11
 800e364:	d917      	bls.n	800e396 <_malloc_r+0xca>
 800e366:	1961      	adds	r1, r4, r5
 800e368:	42a3      	cmp	r3, r4
 800e36a:	6025      	str	r5, [r4, #0]
 800e36c:	bf18      	it	ne
 800e36e:	6059      	strne	r1, [r3, #4]
 800e370:	6863      	ldr	r3, [r4, #4]
 800e372:	bf08      	it	eq
 800e374:	f8c8 1000 	streq.w	r1, [r8]
 800e378:	5162      	str	r2, [r4, r5]
 800e37a:	604b      	str	r3, [r1, #4]
 800e37c:	4638      	mov	r0, r7
 800e37e:	f104 060b 	add.w	r6, r4, #11
 800e382:	f000 f829 	bl	800e3d8 <__malloc_unlock>
 800e386:	f026 0607 	bic.w	r6, r6, #7
 800e38a:	1d23      	adds	r3, r4, #4
 800e38c:	1af2      	subs	r2, r6, r3
 800e38e:	d0ae      	beq.n	800e2ee <_malloc_r+0x22>
 800e390:	1b9b      	subs	r3, r3, r6
 800e392:	50a3      	str	r3, [r4, r2]
 800e394:	e7ab      	b.n	800e2ee <_malloc_r+0x22>
 800e396:	42a3      	cmp	r3, r4
 800e398:	6862      	ldr	r2, [r4, #4]
 800e39a:	d1dd      	bne.n	800e358 <_malloc_r+0x8c>
 800e39c:	f8c8 2000 	str.w	r2, [r8]
 800e3a0:	e7ec      	b.n	800e37c <_malloc_r+0xb0>
 800e3a2:	4623      	mov	r3, r4
 800e3a4:	6864      	ldr	r4, [r4, #4]
 800e3a6:	e7ac      	b.n	800e302 <_malloc_r+0x36>
 800e3a8:	4634      	mov	r4, r6
 800e3aa:	6876      	ldr	r6, [r6, #4]
 800e3ac:	e7b4      	b.n	800e318 <_malloc_r+0x4c>
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	e7cc      	b.n	800e34c <_malloc_r+0x80>
 800e3b2:	230c      	movs	r3, #12
 800e3b4:	603b      	str	r3, [r7, #0]
 800e3b6:	4638      	mov	r0, r7
 800e3b8:	f000 f80e 	bl	800e3d8 <__malloc_unlock>
 800e3bc:	e797      	b.n	800e2ee <_malloc_r+0x22>
 800e3be:	6025      	str	r5, [r4, #0]
 800e3c0:	e7dc      	b.n	800e37c <_malloc_r+0xb0>
 800e3c2:	605b      	str	r3, [r3, #4]
 800e3c4:	deff      	udf	#255	; 0xff
 800e3c6:	bf00      	nop
 800e3c8:	20001748 	.word	0x20001748

0800e3cc <__malloc_lock>:
 800e3cc:	4801      	ldr	r0, [pc, #4]	; (800e3d4 <__malloc_lock+0x8>)
 800e3ce:	f7ff b87f 	b.w	800d4d0 <__retarget_lock_acquire_recursive>
 800e3d2:	bf00      	nop
 800e3d4:	20001744 	.word	0x20001744

0800e3d8 <__malloc_unlock>:
 800e3d8:	4801      	ldr	r0, [pc, #4]	; (800e3e0 <__malloc_unlock+0x8>)
 800e3da:	f7ff b87a 	b.w	800d4d2 <__retarget_lock_release_recursive>
 800e3de:	bf00      	nop
 800e3e0:	20001744 	.word	0x20001744

0800e3e4 <_Balloc>:
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	69c6      	ldr	r6, [r0, #28]
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	460d      	mov	r5, r1
 800e3ec:	b976      	cbnz	r6, 800e40c <_Balloc+0x28>
 800e3ee:	2010      	movs	r0, #16
 800e3f0:	f7ff ff44 	bl	800e27c <malloc>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	61e0      	str	r0, [r4, #28]
 800e3f8:	b920      	cbnz	r0, 800e404 <_Balloc+0x20>
 800e3fa:	4b18      	ldr	r3, [pc, #96]	; (800e45c <_Balloc+0x78>)
 800e3fc:	4818      	ldr	r0, [pc, #96]	; (800e460 <_Balloc+0x7c>)
 800e3fe:	216b      	movs	r1, #107	; 0x6b
 800e400:	f000 ff64 	bl	800f2cc <__assert_func>
 800e404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e408:	6006      	str	r6, [r0, #0]
 800e40a:	60c6      	str	r6, [r0, #12]
 800e40c:	69e6      	ldr	r6, [r4, #28]
 800e40e:	68f3      	ldr	r3, [r6, #12]
 800e410:	b183      	cbz	r3, 800e434 <_Balloc+0x50>
 800e412:	69e3      	ldr	r3, [r4, #28]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e41a:	b9b8      	cbnz	r0, 800e44c <_Balloc+0x68>
 800e41c:	2101      	movs	r1, #1
 800e41e:	fa01 f605 	lsl.w	r6, r1, r5
 800e422:	1d72      	adds	r2, r6, #5
 800e424:	0092      	lsls	r2, r2, #2
 800e426:	4620      	mov	r0, r4
 800e428:	f000 ff6e 	bl	800f308 <_calloc_r>
 800e42c:	b160      	cbz	r0, 800e448 <_Balloc+0x64>
 800e42e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e432:	e00e      	b.n	800e452 <_Balloc+0x6e>
 800e434:	2221      	movs	r2, #33	; 0x21
 800e436:	2104      	movs	r1, #4
 800e438:	4620      	mov	r0, r4
 800e43a:	f000 ff65 	bl	800f308 <_calloc_r>
 800e43e:	69e3      	ldr	r3, [r4, #28]
 800e440:	60f0      	str	r0, [r6, #12]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d1e4      	bne.n	800e412 <_Balloc+0x2e>
 800e448:	2000      	movs	r0, #0
 800e44a:	bd70      	pop	{r4, r5, r6, pc}
 800e44c:	6802      	ldr	r2, [r0, #0]
 800e44e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e452:	2300      	movs	r3, #0
 800e454:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e458:	e7f7      	b.n	800e44a <_Balloc+0x66>
 800e45a:	bf00      	nop
 800e45c:	0800f91d 	.word	0x0800f91d
 800e460:	0800f99d 	.word	0x0800f99d

0800e464 <_Bfree>:
 800e464:	b570      	push	{r4, r5, r6, lr}
 800e466:	69c6      	ldr	r6, [r0, #28]
 800e468:	4605      	mov	r5, r0
 800e46a:	460c      	mov	r4, r1
 800e46c:	b976      	cbnz	r6, 800e48c <_Bfree+0x28>
 800e46e:	2010      	movs	r0, #16
 800e470:	f7ff ff04 	bl	800e27c <malloc>
 800e474:	4602      	mov	r2, r0
 800e476:	61e8      	str	r0, [r5, #28]
 800e478:	b920      	cbnz	r0, 800e484 <_Bfree+0x20>
 800e47a:	4b09      	ldr	r3, [pc, #36]	; (800e4a0 <_Bfree+0x3c>)
 800e47c:	4809      	ldr	r0, [pc, #36]	; (800e4a4 <_Bfree+0x40>)
 800e47e:	218f      	movs	r1, #143	; 0x8f
 800e480:	f000 ff24 	bl	800f2cc <__assert_func>
 800e484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e488:	6006      	str	r6, [r0, #0]
 800e48a:	60c6      	str	r6, [r0, #12]
 800e48c:	b13c      	cbz	r4, 800e49e <_Bfree+0x3a>
 800e48e:	69eb      	ldr	r3, [r5, #28]
 800e490:	6862      	ldr	r2, [r4, #4]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e498:	6021      	str	r1, [r4, #0]
 800e49a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e49e:	bd70      	pop	{r4, r5, r6, pc}
 800e4a0:	0800f91d 	.word	0x0800f91d
 800e4a4:	0800f99d 	.word	0x0800f99d

0800e4a8 <__multadd>:
 800e4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ac:	690d      	ldr	r5, [r1, #16]
 800e4ae:	4607      	mov	r7, r0
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	461e      	mov	r6, r3
 800e4b4:	f101 0c14 	add.w	ip, r1, #20
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	f8dc 3000 	ldr.w	r3, [ip]
 800e4be:	b299      	uxth	r1, r3
 800e4c0:	fb02 6101 	mla	r1, r2, r1, r6
 800e4c4:	0c1e      	lsrs	r6, r3, #16
 800e4c6:	0c0b      	lsrs	r3, r1, #16
 800e4c8:	fb02 3306 	mla	r3, r2, r6, r3
 800e4cc:	b289      	uxth	r1, r1
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e4d4:	4285      	cmp	r5, r0
 800e4d6:	f84c 1b04 	str.w	r1, [ip], #4
 800e4da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e4de:	dcec      	bgt.n	800e4ba <__multadd+0x12>
 800e4e0:	b30e      	cbz	r6, 800e526 <__multadd+0x7e>
 800e4e2:	68a3      	ldr	r3, [r4, #8]
 800e4e4:	42ab      	cmp	r3, r5
 800e4e6:	dc19      	bgt.n	800e51c <__multadd+0x74>
 800e4e8:	6861      	ldr	r1, [r4, #4]
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	3101      	adds	r1, #1
 800e4ee:	f7ff ff79 	bl	800e3e4 <_Balloc>
 800e4f2:	4680      	mov	r8, r0
 800e4f4:	b928      	cbnz	r0, 800e502 <__multadd+0x5a>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	4b0c      	ldr	r3, [pc, #48]	; (800e52c <__multadd+0x84>)
 800e4fa:	480d      	ldr	r0, [pc, #52]	; (800e530 <__multadd+0x88>)
 800e4fc:	21ba      	movs	r1, #186	; 0xba
 800e4fe:	f000 fee5 	bl	800f2cc <__assert_func>
 800e502:	6922      	ldr	r2, [r4, #16]
 800e504:	3202      	adds	r2, #2
 800e506:	f104 010c 	add.w	r1, r4, #12
 800e50a:	0092      	lsls	r2, r2, #2
 800e50c:	300c      	adds	r0, #12
 800e50e:	f7fe ffe1 	bl	800d4d4 <memcpy>
 800e512:	4621      	mov	r1, r4
 800e514:	4638      	mov	r0, r7
 800e516:	f7ff ffa5 	bl	800e464 <_Bfree>
 800e51a:	4644      	mov	r4, r8
 800e51c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e520:	3501      	adds	r5, #1
 800e522:	615e      	str	r6, [r3, #20]
 800e524:	6125      	str	r5, [r4, #16]
 800e526:	4620      	mov	r0, r4
 800e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e52c:	0800f98c 	.word	0x0800f98c
 800e530:	0800f99d 	.word	0x0800f99d

0800e534 <__hi0bits>:
 800e534:	0c03      	lsrs	r3, r0, #16
 800e536:	041b      	lsls	r3, r3, #16
 800e538:	b9d3      	cbnz	r3, 800e570 <__hi0bits+0x3c>
 800e53a:	0400      	lsls	r0, r0, #16
 800e53c:	2310      	movs	r3, #16
 800e53e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e542:	bf04      	itt	eq
 800e544:	0200      	lsleq	r0, r0, #8
 800e546:	3308      	addeq	r3, #8
 800e548:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e54c:	bf04      	itt	eq
 800e54e:	0100      	lsleq	r0, r0, #4
 800e550:	3304      	addeq	r3, #4
 800e552:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e556:	bf04      	itt	eq
 800e558:	0080      	lsleq	r0, r0, #2
 800e55a:	3302      	addeq	r3, #2
 800e55c:	2800      	cmp	r0, #0
 800e55e:	db05      	blt.n	800e56c <__hi0bits+0x38>
 800e560:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e564:	f103 0301 	add.w	r3, r3, #1
 800e568:	bf08      	it	eq
 800e56a:	2320      	moveq	r3, #32
 800e56c:	4618      	mov	r0, r3
 800e56e:	4770      	bx	lr
 800e570:	2300      	movs	r3, #0
 800e572:	e7e4      	b.n	800e53e <__hi0bits+0xa>

0800e574 <__lo0bits>:
 800e574:	6803      	ldr	r3, [r0, #0]
 800e576:	f013 0207 	ands.w	r2, r3, #7
 800e57a:	d00c      	beq.n	800e596 <__lo0bits+0x22>
 800e57c:	07d9      	lsls	r1, r3, #31
 800e57e:	d422      	bmi.n	800e5c6 <__lo0bits+0x52>
 800e580:	079a      	lsls	r2, r3, #30
 800e582:	bf49      	itett	mi
 800e584:	085b      	lsrmi	r3, r3, #1
 800e586:	089b      	lsrpl	r3, r3, #2
 800e588:	6003      	strmi	r3, [r0, #0]
 800e58a:	2201      	movmi	r2, #1
 800e58c:	bf5c      	itt	pl
 800e58e:	6003      	strpl	r3, [r0, #0]
 800e590:	2202      	movpl	r2, #2
 800e592:	4610      	mov	r0, r2
 800e594:	4770      	bx	lr
 800e596:	b299      	uxth	r1, r3
 800e598:	b909      	cbnz	r1, 800e59e <__lo0bits+0x2a>
 800e59a:	0c1b      	lsrs	r3, r3, #16
 800e59c:	2210      	movs	r2, #16
 800e59e:	b2d9      	uxtb	r1, r3
 800e5a0:	b909      	cbnz	r1, 800e5a6 <__lo0bits+0x32>
 800e5a2:	3208      	adds	r2, #8
 800e5a4:	0a1b      	lsrs	r3, r3, #8
 800e5a6:	0719      	lsls	r1, r3, #28
 800e5a8:	bf04      	itt	eq
 800e5aa:	091b      	lsreq	r3, r3, #4
 800e5ac:	3204      	addeq	r2, #4
 800e5ae:	0799      	lsls	r1, r3, #30
 800e5b0:	bf04      	itt	eq
 800e5b2:	089b      	lsreq	r3, r3, #2
 800e5b4:	3202      	addeq	r2, #2
 800e5b6:	07d9      	lsls	r1, r3, #31
 800e5b8:	d403      	bmi.n	800e5c2 <__lo0bits+0x4e>
 800e5ba:	085b      	lsrs	r3, r3, #1
 800e5bc:	f102 0201 	add.w	r2, r2, #1
 800e5c0:	d003      	beq.n	800e5ca <__lo0bits+0x56>
 800e5c2:	6003      	str	r3, [r0, #0]
 800e5c4:	e7e5      	b.n	800e592 <__lo0bits+0x1e>
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	e7e3      	b.n	800e592 <__lo0bits+0x1e>
 800e5ca:	2220      	movs	r2, #32
 800e5cc:	e7e1      	b.n	800e592 <__lo0bits+0x1e>
	...

0800e5d0 <__i2b>:
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	2101      	movs	r1, #1
 800e5d6:	f7ff ff05 	bl	800e3e4 <_Balloc>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	b928      	cbnz	r0, 800e5ea <__i2b+0x1a>
 800e5de:	4b05      	ldr	r3, [pc, #20]	; (800e5f4 <__i2b+0x24>)
 800e5e0:	4805      	ldr	r0, [pc, #20]	; (800e5f8 <__i2b+0x28>)
 800e5e2:	f240 1145 	movw	r1, #325	; 0x145
 800e5e6:	f000 fe71 	bl	800f2cc <__assert_func>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	6144      	str	r4, [r0, #20]
 800e5ee:	6103      	str	r3, [r0, #16]
 800e5f0:	bd10      	pop	{r4, pc}
 800e5f2:	bf00      	nop
 800e5f4:	0800f98c 	.word	0x0800f98c
 800e5f8:	0800f99d 	.word	0x0800f99d

0800e5fc <__multiply>:
 800e5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e600:	4691      	mov	r9, r2
 800e602:	690a      	ldr	r2, [r1, #16]
 800e604:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e608:	429a      	cmp	r2, r3
 800e60a:	bfb8      	it	lt
 800e60c:	460b      	movlt	r3, r1
 800e60e:	460c      	mov	r4, r1
 800e610:	bfbc      	itt	lt
 800e612:	464c      	movlt	r4, r9
 800e614:	4699      	movlt	r9, r3
 800e616:	6927      	ldr	r7, [r4, #16]
 800e618:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e61c:	68a3      	ldr	r3, [r4, #8]
 800e61e:	6861      	ldr	r1, [r4, #4]
 800e620:	eb07 060a 	add.w	r6, r7, sl
 800e624:	42b3      	cmp	r3, r6
 800e626:	b085      	sub	sp, #20
 800e628:	bfb8      	it	lt
 800e62a:	3101      	addlt	r1, #1
 800e62c:	f7ff feda 	bl	800e3e4 <_Balloc>
 800e630:	b930      	cbnz	r0, 800e640 <__multiply+0x44>
 800e632:	4602      	mov	r2, r0
 800e634:	4b44      	ldr	r3, [pc, #272]	; (800e748 <__multiply+0x14c>)
 800e636:	4845      	ldr	r0, [pc, #276]	; (800e74c <__multiply+0x150>)
 800e638:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e63c:	f000 fe46 	bl	800f2cc <__assert_func>
 800e640:	f100 0514 	add.w	r5, r0, #20
 800e644:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e648:	462b      	mov	r3, r5
 800e64a:	2200      	movs	r2, #0
 800e64c:	4543      	cmp	r3, r8
 800e64e:	d321      	bcc.n	800e694 <__multiply+0x98>
 800e650:	f104 0314 	add.w	r3, r4, #20
 800e654:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e658:	f109 0314 	add.w	r3, r9, #20
 800e65c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e660:	9202      	str	r2, [sp, #8]
 800e662:	1b3a      	subs	r2, r7, r4
 800e664:	3a15      	subs	r2, #21
 800e666:	f022 0203 	bic.w	r2, r2, #3
 800e66a:	3204      	adds	r2, #4
 800e66c:	f104 0115 	add.w	r1, r4, #21
 800e670:	428f      	cmp	r7, r1
 800e672:	bf38      	it	cc
 800e674:	2204      	movcc	r2, #4
 800e676:	9201      	str	r2, [sp, #4]
 800e678:	9a02      	ldr	r2, [sp, #8]
 800e67a:	9303      	str	r3, [sp, #12]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d80c      	bhi.n	800e69a <__multiply+0x9e>
 800e680:	2e00      	cmp	r6, #0
 800e682:	dd03      	ble.n	800e68c <__multiply+0x90>
 800e684:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d05b      	beq.n	800e744 <__multiply+0x148>
 800e68c:	6106      	str	r6, [r0, #16]
 800e68e:	b005      	add	sp, #20
 800e690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e694:	f843 2b04 	str.w	r2, [r3], #4
 800e698:	e7d8      	b.n	800e64c <__multiply+0x50>
 800e69a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e69e:	f1ba 0f00 	cmp.w	sl, #0
 800e6a2:	d024      	beq.n	800e6ee <__multiply+0xf2>
 800e6a4:	f104 0e14 	add.w	lr, r4, #20
 800e6a8:	46a9      	mov	r9, r5
 800e6aa:	f04f 0c00 	mov.w	ip, #0
 800e6ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e6b2:	f8d9 1000 	ldr.w	r1, [r9]
 800e6b6:	fa1f fb82 	uxth.w	fp, r2
 800e6ba:	b289      	uxth	r1, r1
 800e6bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e6c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e6c4:	f8d9 2000 	ldr.w	r2, [r9]
 800e6c8:	4461      	add	r1, ip
 800e6ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800e6d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e6d6:	b289      	uxth	r1, r1
 800e6d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e6dc:	4577      	cmp	r7, lr
 800e6de:	f849 1b04 	str.w	r1, [r9], #4
 800e6e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6e6:	d8e2      	bhi.n	800e6ae <__multiply+0xb2>
 800e6e8:	9a01      	ldr	r2, [sp, #4]
 800e6ea:	f845 c002 	str.w	ip, [r5, r2]
 800e6ee:	9a03      	ldr	r2, [sp, #12]
 800e6f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	f1b9 0f00 	cmp.w	r9, #0
 800e6fa:	d021      	beq.n	800e740 <__multiply+0x144>
 800e6fc:	6829      	ldr	r1, [r5, #0]
 800e6fe:	f104 0c14 	add.w	ip, r4, #20
 800e702:	46ae      	mov	lr, r5
 800e704:	f04f 0a00 	mov.w	sl, #0
 800e708:	f8bc b000 	ldrh.w	fp, [ip]
 800e70c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e710:	fb09 220b 	mla	r2, r9, fp, r2
 800e714:	4452      	add	r2, sl
 800e716:	b289      	uxth	r1, r1
 800e718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e71c:	f84e 1b04 	str.w	r1, [lr], #4
 800e720:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e724:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e728:	f8be 1000 	ldrh.w	r1, [lr]
 800e72c:	fb09 110a 	mla	r1, r9, sl, r1
 800e730:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e734:	4567      	cmp	r7, ip
 800e736:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e73a:	d8e5      	bhi.n	800e708 <__multiply+0x10c>
 800e73c:	9a01      	ldr	r2, [sp, #4]
 800e73e:	50a9      	str	r1, [r5, r2]
 800e740:	3504      	adds	r5, #4
 800e742:	e799      	b.n	800e678 <__multiply+0x7c>
 800e744:	3e01      	subs	r6, #1
 800e746:	e79b      	b.n	800e680 <__multiply+0x84>
 800e748:	0800f98c 	.word	0x0800f98c
 800e74c:	0800f99d 	.word	0x0800f99d

0800e750 <__pow5mult>:
 800e750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e754:	4615      	mov	r5, r2
 800e756:	f012 0203 	ands.w	r2, r2, #3
 800e75a:	4606      	mov	r6, r0
 800e75c:	460f      	mov	r7, r1
 800e75e:	d007      	beq.n	800e770 <__pow5mult+0x20>
 800e760:	4c25      	ldr	r4, [pc, #148]	; (800e7f8 <__pow5mult+0xa8>)
 800e762:	3a01      	subs	r2, #1
 800e764:	2300      	movs	r3, #0
 800e766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e76a:	f7ff fe9d 	bl	800e4a8 <__multadd>
 800e76e:	4607      	mov	r7, r0
 800e770:	10ad      	asrs	r5, r5, #2
 800e772:	d03d      	beq.n	800e7f0 <__pow5mult+0xa0>
 800e774:	69f4      	ldr	r4, [r6, #28]
 800e776:	b97c      	cbnz	r4, 800e798 <__pow5mult+0x48>
 800e778:	2010      	movs	r0, #16
 800e77a:	f7ff fd7f 	bl	800e27c <malloc>
 800e77e:	4602      	mov	r2, r0
 800e780:	61f0      	str	r0, [r6, #28]
 800e782:	b928      	cbnz	r0, 800e790 <__pow5mult+0x40>
 800e784:	4b1d      	ldr	r3, [pc, #116]	; (800e7fc <__pow5mult+0xac>)
 800e786:	481e      	ldr	r0, [pc, #120]	; (800e800 <__pow5mult+0xb0>)
 800e788:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e78c:	f000 fd9e 	bl	800f2cc <__assert_func>
 800e790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e794:	6004      	str	r4, [r0, #0]
 800e796:	60c4      	str	r4, [r0, #12]
 800e798:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e79c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7a0:	b94c      	cbnz	r4, 800e7b6 <__pow5mult+0x66>
 800e7a2:	f240 2171 	movw	r1, #625	; 0x271
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	f7ff ff12 	bl	800e5d0 <__i2b>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	6003      	str	r3, [r0, #0]
 800e7b6:	f04f 0900 	mov.w	r9, #0
 800e7ba:	07eb      	lsls	r3, r5, #31
 800e7bc:	d50a      	bpl.n	800e7d4 <__pow5mult+0x84>
 800e7be:	4639      	mov	r1, r7
 800e7c0:	4622      	mov	r2, r4
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	f7ff ff1a 	bl	800e5fc <__multiply>
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	4680      	mov	r8, r0
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	f7ff fe49 	bl	800e464 <_Bfree>
 800e7d2:	4647      	mov	r7, r8
 800e7d4:	106d      	asrs	r5, r5, #1
 800e7d6:	d00b      	beq.n	800e7f0 <__pow5mult+0xa0>
 800e7d8:	6820      	ldr	r0, [r4, #0]
 800e7da:	b938      	cbnz	r0, 800e7ec <__pow5mult+0x9c>
 800e7dc:	4622      	mov	r2, r4
 800e7de:	4621      	mov	r1, r4
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	f7ff ff0b 	bl	800e5fc <__multiply>
 800e7e6:	6020      	str	r0, [r4, #0]
 800e7e8:	f8c0 9000 	str.w	r9, [r0]
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	e7e4      	b.n	800e7ba <__pow5mult+0x6a>
 800e7f0:	4638      	mov	r0, r7
 800e7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7f6:	bf00      	nop
 800e7f8:	0800fae8 	.word	0x0800fae8
 800e7fc:	0800f91d 	.word	0x0800f91d
 800e800:	0800f99d 	.word	0x0800f99d

0800e804 <__lshift>:
 800e804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e808:	460c      	mov	r4, r1
 800e80a:	6849      	ldr	r1, [r1, #4]
 800e80c:	6923      	ldr	r3, [r4, #16]
 800e80e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e812:	68a3      	ldr	r3, [r4, #8]
 800e814:	4607      	mov	r7, r0
 800e816:	4691      	mov	r9, r2
 800e818:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e81c:	f108 0601 	add.w	r6, r8, #1
 800e820:	42b3      	cmp	r3, r6
 800e822:	db0b      	blt.n	800e83c <__lshift+0x38>
 800e824:	4638      	mov	r0, r7
 800e826:	f7ff fddd 	bl	800e3e4 <_Balloc>
 800e82a:	4605      	mov	r5, r0
 800e82c:	b948      	cbnz	r0, 800e842 <__lshift+0x3e>
 800e82e:	4602      	mov	r2, r0
 800e830:	4b28      	ldr	r3, [pc, #160]	; (800e8d4 <__lshift+0xd0>)
 800e832:	4829      	ldr	r0, [pc, #164]	; (800e8d8 <__lshift+0xd4>)
 800e834:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e838:	f000 fd48 	bl	800f2cc <__assert_func>
 800e83c:	3101      	adds	r1, #1
 800e83e:	005b      	lsls	r3, r3, #1
 800e840:	e7ee      	b.n	800e820 <__lshift+0x1c>
 800e842:	2300      	movs	r3, #0
 800e844:	f100 0114 	add.w	r1, r0, #20
 800e848:	f100 0210 	add.w	r2, r0, #16
 800e84c:	4618      	mov	r0, r3
 800e84e:	4553      	cmp	r3, sl
 800e850:	db33      	blt.n	800e8ba <__lshift+0xb6>
 800e852:	6920      	ldr	r0, [r4, #16]
 800e854:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e858:	f104 0314 	add.w	r3, r4, #20
 800e85c:	f019 091f 	ands.w	r9, r9, #31
 800e860:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e864:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e868:	d02b      	beq.n	800e8c2 <__lshift+0xbe>
 800e86a:	f1c9 0e20 	rsb	lr, r9, #32
 800e86e:	468a      	mov	sl, r1
 800e870:	2200      	movs	r2, #0
 800e872:	6818      	ldr	r0, [r3, #0]
 800e874:	fa00 f009 	lsl.w	r0, r0, r9
 800e878:	4310      	orrs	r0, r2
 800e87a:	f84a 0b04 	str.w	r0, [sl], #4
 800e87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e882:	459c      	cmp	ip, r3
 800e884:	fa22 f20e 	lsr.w	r2, r2, lr
 800e888:	d8f3      	bhi.n	800e872 <__lshift+0x6e>
 800e88a:	ebac 0304 	sub.w	r3, ip, r4
 800e88e:	3b15      	subs	r3, #21
 800e890:	f023 0303 	bic.w	r3, r3, #3
 800e894:	3304      	adds	r3, #4
 800e896:	f104 0015 	add.w	r0, r4, #21
 800e89a:	4584      	cmp	ip, r0
 800e89c:	bf38      	it	cc
 800e89e:	2304      	movcc	r3, #4
 800e8a0:	50ca      	str	r2, [r1, r3]
 800e8a2:	b10a      	cbz	r2, 800e8a8 <__lshift+0xa4>
 800e8a4:	f108 0602 	add.w	r6, r8, #2
 800e8a8:	3e01      	subs	r6, #1
 800e8aa:	4638      	mov	r0, r7
 800e8ac:	612e      	str	r6, [r5, #16]
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	f7ff fdd8 	bl	800e464 <_Bfree>
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800e8be:	3301      	adds	r3, #1
 800e8c0:	e7c5      	b.n	800e84e <__lshift+0x4a>
 800e8c2:	3904      	subs	r1, #4
 800e8c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e8cc:	459c      	cmp	ip, r3
 800e8ce:	d8f9      	bhi.n	800e8c4 <__lshift+0xc0>
 800e8d0:	e7ea      	b.n	800e8a8 <__lshift+0xa4>
 800e8d2:	bf00      	nop
 800e8d4:	0800f98c 	.word	0x0800f98c
 800e8d8:	0800f99d 	.word	0x0800f99d

0800e8dc <__mcmp>:
 800e8dc:	b530      	push	{r4, r5, lr}
 800e8de:	6902      	ldr	r2, [r0, #16]
 800e8e0:	690c      	ldr	r4, [r1, #16]
 800e8e2:	1b12      	subs	r2, r2, r4
 800e8e4:	d10e      	bne.n	800e904 <__mcmp+0x28>
 800e8e6:	f100 0314 	add.w	r3, r0, #20
 800e8ea:	3114      	adds	r1, #20
 800e8ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e8f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e8f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e8f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e8fc:	42a5      	cmp	r5, r4
 800e8fe:	d003      	beq.n	800e908 <__mcmp+0x2c>
 800e900:	d305      	bcc.n	800e90e <__mcmp+0x32>
 800e902:	2201      	movs	r2, #1
 800e904:	4610      	mov	r0, r2
 800e906:	bd30      	pop	{r4, r5, pc}
 800e908:	4283      	cmp	r3, r0
 800e90a:	d3f3      	bcc.n	800e8f4 <__mcmp+0x18>
 800e90c:	e7fa      	b.n	800e904 <__mcmp+0x28>
 800e90e:	f04f 32ff 	mov.w	r2, #4294967295
 800e912:	e7f7      	b.n	800e904 <__mcmp+0x28>

0800e914 <__mdiff>:
 800e914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e918:	460c      	mov	r4, r1
 800e91a:	4606      	mov	r6, r0
 800e91c:	4611      	mov	r1, r2
 800e91e:	4620      	mov	r0, r4
 800e920:	4690      	mov	r8, r2
 800e922:	f7ff ffdb 	bl	800e8dc <__mcmp>
 800e926:	1e05      	subs	r5, r0, #0
 800e928:	d110      	bne.n	800e94c <__mdiff+0x38>
 800e92a:	4629      	mov	r1, r5
 800e92c:	4630      	mov	r0, r6
 800e92e:	f7ff fd59 	bl	800e3e4 <_Balloc>
 800e932:	b930      	cbnz	r0, 800e942 <__mdiff+0x2e>
 800e934:	4b3a      	ldr	r3, [pc, #232]	; (800ea20 <__mdiff+0x10c>)
 800e936:	4602      	mov	r2, r0
 800e938:	f240 2137 	movw	r1, #567	; 0x237
 800e93c:	4839      	ldr	r0, [pc, #228]	; (800ea24 <__mdiff+0x110>)
 800e93e:	f000 fcc5 	bl	800f2cc <__assert_func>
 800e942:	2301      	movs	r3, #1
 800e944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e94c:	bfa4      	itt	ge
 800e94e:	4643      	movge	r3, r8
 800e950:	46a0      	movge	r8, r4
 800e952:	4630      	mov	r0, r6
 800e954:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e958:	bfa6      	itte	ge
 800e95a:	461c      	movge	r4, r3
 800e95c:	2500      	movge	r5, #0
 800e95e:	2501      	movlt	r5, #1
 800e960:	f7ff fd40 	bl	800e3e4 <_Balloc>
 800e964:	b920      	cbnz	r0, 800e970 <__mdiff+0x5c>
 800e966:	4b2e      	ldr	r3, [pc, #184]	; (800ea20 <__mdiff+0x10c>)
 800e968:	4602      	mov	r2, r0
 800e96a:	f240 2145 	movw	r1, #581	; 0x245
 800e96e:	e7e5      	b.n	800e93c <__mdiff+0x28>
 800e970:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e974:	6926      	ldr	r6, [r4, #16]
 800e976:	60c5      	str	r5, [r0, #12]
 800e978:	f104 0914 	add.w	r9, r4, #20
 800e97c:	f108 0514 	add.w	r5, r8, #20
 800e980:	f100 0e14 	add.w	lr, r0, #20
 800e984:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e988:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e98c:	f108 0210 	add.w	r2, r8, #16
 800e990:	46f2      	mov	sl, lr
 800e992:	2100      	movs	r1, #0
 800e994:	f859 3b04 	ldr.w	r3, [r9], #4
 800e998:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e99c:	fa11 f88b 	uxtah	r8, r1, fp
 800e9a0:	b299      	uxth	r1, r3
 800e9a2:	0c1b      	lsrs	r3, r3, #16
 800e9a4:	eba8 0801 	sub.w	r8, r8, r1
 800e9a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e9ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e9b0:	fa1f f888 	uxth.w	r8, r8
 800e9b4:	1419      	asrs	r1, r3, #16
 800e9b6:	454e      	cmp	r6, r9
 800e9b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e9bc:	f84a 3b04 	str.w	r3, [sl], #4
 800e9c0:	d8e8      	bhi.n	800e994 <__mdiff+0x80>
 800e9c2:	1b33      	subs	r3, r6, r4
 800e9c4:	3b15      	subs	r3, #21
 800e9c6:	f023 0303 	bic.w	r3, r3, #3
 800e9ca:	3304      	adds	r3, #4
 800e9cc:	3415      	adds	r4, #21
 800e9ce:	42a6      	cmp	r6, r4
 800e9d0:	bf38      	it	cc
 800e9d2:	2304      	movcc	r3, #4
 800e9d4:	441d      	add	r5, r3
 800e9d6:	4473      	add	r3, lr
 800e9d8:	469e      	mov	lr, r3
 800e9da:	462e      	mov	r6, r5
 800e9dc:	4566      	cmp	r6, ip
 800e9de:	d30e      	bcc.n	800e9fe <__mdiff+0xea>
 800e9e0:	f10c 0203 	add.w	r2, ip, #3
 800e9e4:	1b52      	subs	r2, r2, r5
 800e9e6:	f022 0203 	bic.w	r2, r2, #3
 800e9ea:	3d03      	subs	r5, #3
 800e9ec:	45ac      	cmp	ip, r5
 800e9ee:	bf38      	it	cc
 800e9f0:	2200      	movcc	r2, #0
 800e9f2:	4413      	add	r3, r2
 800e9f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e9f8:	b17a      	cbz	r2, 800ea1a <__mdiff+0x106>
 800e9fa:	6107      	str	r7, [r0, #16]
 800e9fc:	e7a4      	b.n	800e948 <__mdiff+0x34>
 800e9fe:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea02:	fa11 f288 	uxtah	r2, r1, r8
 800ea06:	1414      	asrs	r4, r2, #16
 800ea08:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea0c:	b292      	uxth	r2, r2
 800ea0e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea12:	f84e 2b04 	str.w	r2, [lr], #4
 800ea16:	1421      	asrs	r1, r4, #16
 800ea18:	e7e0      	b.n	800e9dc <__mdiff+0xc8>
 800ea1a:	3f01      	subs	r7, #1
 800ea1c:	e7ea      	b.n	800e9f4 <__mdiff+0xe0>
 800ea1e:	bf00      	nop
 800ea20:	0800f98c 	.word	0x0800f98c
 800ea24:	0800f99d 	.word	0x0800f99d

0800ea28 <__d2b>:
 800ea28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea2c:	460f      	mov	r7, r1
 800ea2e:	2101      	movs	r1, #1
 800ea30:	ec59 8b10 	vmov	r8, r9, d0
 800ea34:	4616      	mov	r6, r2
 800ea36:	f7ff fcd5 	bl	800e3e4 <_Balloc>
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	b930      	cbnz	r0, 800ea4c <__d2b+0x24>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	4b24      	ldr	r3, [pc, #144]	; (800ead4 <__d2b+0xac>)
 800ea42:	4825      	ldr	r0, [pc, #148]	; (800ead8 <__d2b+0xb0>)
 800ea44:	f240 310f 	movw	r1, #783	; 0x30f
 800ea48:	f000 fc40 	bl	800f2cc <__assert_func>
 800ea4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea54:	bb2d      	cbnz	r5, 800eaa2 <__d2b+0x7a>
 800ea56:	9301      	str	r3, [sp, #4]
 800ea58:	f1b8 0300 	subs.w	r3, r8, #0
 800ea5c:	d026      	beq.n	800eaac <__d2b+0x84>
 800ea5e:	4668      	mov	r0, sp
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	f7ff fd87 	bl	800e574 <__lo0bits>
 800ea66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea6a:	b1e8      	cbz	r0, 800eaa8 <__d2b+0x80>
 800ea6c:	f1c0 0320 	rsb	r3, r0, #32
 800ea70:	fa02 f303 	lsl.w	r3, r2, r3
 800ea74:	430b      	orrs	r3, r1
 800ea76:	40c2      	lsrs	r2, r0
 800ea78:	6163      	str	r3, [r4, #20]
 800ea7a:	9201      	str	r2, [sp, #4]
 800ea7c:	9b01      	ldr	r3, [sp, #4]
 800ea7e:	61a3      	str	r3, [r4, #24]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bf14      	ite	ne
 800ea84:	2202      	movne	r2, #2
 800ea86:	2201      	moveq	r2, #1
 800ea88:	6122      	str	r2, [r4, #16]
 800ea8a:	b1bd      	cbz	r5, 800eabc <__d2b+0x94>
 800ea8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea90:	4405      	add	r5, r0
 800ea92:	603d      	str	r5, [r7, #0]
 800ea94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea98:	6030      	str	r0, [r6, #0]
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	b003      	add	sp, #12
 800ea9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaa6:	e7d6      	b.n	800ea56 <__d2b+0x2e>
 800eaa8:	6161      	str	r1, [r4, #20]
 800eaaa:	e7e7      	b.n	800ea7c <__d2b+0x54>
 800eaac:	a801      	add	r0, sp, #4
 800eaae:	f7ff fd61 	bl	800e574 <__lo0bits>
 800eab2:	9b01      	ldr	r3, [sp, #4]
 800eab4:	6163      	str	r3, [r4, #20]
 800eab6:	3020      	adds	r0, #32
 800eab8:	2201      	movs	r2, #1
 800eaba:	e7e5      	b.n	800ea88 <__d2b+0x60>
 800eabc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eac0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eac4:	6038      	str	r0, [r7, #0]
 800eac6:	6918      	ldr	r0, [r3, #16]
 800eac8:	f7ff fd34 	bl	800e534 <__hi0bits>
 800eacc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ead0:	e7e2      	b.n	800ea98 <__d2b+0x70>
 800ead2:	bf00      	nop
 800ead4:	0800f98c 	.word	0x0800f98c
 800ead8:	0800f99d 	.word	0x0800f99d

0800eadc <__ssputs_r>:
 800eadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eae0:	688e      	ldr	r6, [r1, #8]
 800eae2:	461f      	mov	r7, r3
 800eae4:	42be      	cmp	r6, r7
 800eae6:	680b      	ldr	r3, [r1, #0]
 800eae8:	4682      	mov	sl, r0
 800eaea:	460c      	mov	r4, r1
 800eaec:	4690      	mov	r8, r2
 800eaee:	d82c      	bhi.n	800eb4a <__ssputs_r+0x6e>
 800eaf0:	898a      	ldrh	r2, [r1, #12]
 800eaf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eaf6:	d026      	beq.n	800eb46 <__ssputs_r+0x6a>
 800eaf8:	6965      	ldr	r5, [r4, #20]
 800eafa:	6909      	ldr	r1, [r1, #16]
 800eafc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb00:	eba3 0901 	sub.w	r9, r3, r1
 800eb04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb08:	1c7b      	adds	r3, r7, #1
 800eb0a:	444b      	add	r3, r9
 800eb0c:	106d      	asrs	r5, r5, #1
 800eb0e:	429d      	cmp	r5, r3
 800eb10:	bf38      	it	cc
 800eb12:	461d      	movcc	r5, r3
 800eb14:	0553      	lsls	r3, r2, #21
 800eb16:	d527      	bpl.n	800eb68 <__ssputs_r+0x8c>
 800eb18:	4629      	mov	r1, r5
 800eb1a:	f7ff fbd7 	bl	800e2cc <_malloc_r>
 800eb1e:	4606      	mov	r6, r0
 800eb20:	b360      	cbz	r0, 800eb7c <__ssputs_r+0xa0>
 800eb22:	6921      	ldr	r1, [r4, #16]
 800eb24:	464a      	mov	r2, r9
 800eb26:	f7fe fcd5 	bl	800d4d4 <memcpy>
 800eb2a:	89a3      	ldrh	r3, [r4, #12]
 800eb2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb34:	81a3      	strh	r3, [r4, #12]
 800eb36:	6126      	str	r6, [r4, #16]
 800eb38:	6165      	str	r5, [r4, #20]
 800eb3a:	444e      	add	r6, r9
 800eb3c:	eba5 0509 	sub.w	r5, r5, r9
 800eb40:	6026      	str	r6, [r4, #0]
 800eb42:	60a5      	str	r5, [r4, #8]
 800eb44:	463e      	mov	r6, r7
 800eb46:	42be      	cmp	r6, r7
 800eb48:	d900      	bls.n	800eb4c <__ssputs_r+0x70>
 800eb4a:	463e      	mov	r6, r7
 800eb4c:	6820      	ldr	r0, [r4, #0]
 800eb4e:	4632      	mov	r2, r6
 800eb50:	4641      	mov	r1, r8
 800eb52:	f000 fb6f 	bl	800f234 <memmove>
 800eb56:	68a3      	ldr	r3, [r4, #8]
 800eb58:	1b9b      	subs	r3, r3, r6
 800eb5a:	60a3      	str	r3, [r4, #8]
 800eb5c:	6823      	ldr	r3, [r4, #0]
 800eb5e:	4433      	add	r3, r6
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	2000      	movs	r0, #0
 800eb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb68:	462a      	mov	r2, r5
 800eb6a:	f000 fbf5 	bl	800f358 <_realloc_r>
 800eb6e:	4606      	mov	r6, r0
 800eb70:	2800      	cmp	r0, #0
 800eb72:	d1e0      	bne.n	800eb36 <__ssputs_r+0x5a>
 800eb74:	6921      	ldr	r1, [r4, #16]
 800eb76:	4650      	mov	r0, sl
 800eb78:	f7ff fb34 	bl	800e1e4 <_free_r>
 800eb7c:	230c      	movs	r3, #12
 800eb7e:	f8ca 3000 	str.w	r3, [sl]
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb88:	81a3      	strh	r3, [r4, #12]
 800eb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb8e:	e7e9      	b.n	800eb64 <__ssputs_r+0x88>

0800eb90 <_svfiprintf_r>:
 800eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb94:	4698      	mov	r8, r3
 800eb96:	898b      	ldrh	r3, [r1, #12]
 800eb98:	061b      	lsls	r3, r3, #24
 800eb9a:	b09d      	sub	sp, #116	; 0x74
 800eb9c:	4607      	mov	r7, r0
 800eb9e:	460d      	mov	r5, r1
 800eba0:	4614      	mov	r4, r2
 800eba2:	d50e      	bpl.n	800ebc2 <_svfiprintf_r+0x32>
 800eba4:	690b      	ldr	r3, [r1, #16]
 800eba6:	b963      	cbnz	r3, 800ebc2 <_svfiprintf_r+0x32>
 800eba8:	2140      	movs	r1, #64	; 0x40
 800ebaa:	f7ff fb8f 	bl	800e2cc <_malloc_r>
 800ebae:	6028      	str	r0, [r5, #0]
 800ebb0:	6128      	str	r0, [r5, #16]
 800ebb2:	b920      	cbnz	r0, 800ebbe <_svfiprintf_r+0x2e>
 800ebb4:	230c      	movs	r3, #12
 800ebb6:	603b      	str	r3, [r7, #0]
 800ebb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbc:	e0d0      	b.n	800ed60 <_svfiprintf_r+0x1d0>
 800ebbe:	2340      	movs	r3, #64	; 0x40
 800ebc0:	616b      	str	r3, [r5, #20]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	9309      	str	r3, [sp, #36]	; 0x24
 800ebc6:	2320      	movs	r3, #32
 800ebc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebd0:	2330      	movs	r3, #48	; 0x30
 800ebd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ed78 <_svfiprintf_r+0x1e8>
 800ebd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebda:	f04f 0901 	mov.w	r9, #1
 800ebde:	4623      	mov	r3, r4
 800ebe0:	469a      	mov	sl, r3
 800ebe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebe6:	b10a      	cbz	r2, 800ebec <_svfiprintf_r+0x5c>
 800ebe8:	2a25      	cmp	r2, #37	; 0x25
 800ebea:	d1f9      	bne.n	800ebe0 <_svfiprintf_r+0x50>
 800ebec:	ebba 0b04 	subs.w	fp, sl, r4
 800ebf0:	d00b      	beq.n	800ec0a <_svfiprintf_r+0x7a>
 800ebf2:	465b      	mov	r3, fp
 800ebf4:	4622      	mov	r2, r4
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	f7ff ff6f 	bl	800eadc <__ssputs_r>
 800ebfe:	3001      	adds	r0, #1
 800ec00:	f000 80a9 	beq.w	800ed56 <_svfiprintf_r+0x1c6>
 800ec04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec06:	445a      	add	r2, fp
 800ec08:	9209      	str	r2, [sp, #36]	; 0x24
 800ec0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f000 80a1 	beq.w	800ed56 <_svfiprintf_r+0x1c6>
 800ec14:	2300      	movs	r3, #0
 800ec16:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec1e:	f10a 0a01 	add.w	sl, sl, #1
 800ec22:	9304      	str	r3, [sp, #16]
 800ec24:	9307      	str	r3, [sp, #28]
 800ec26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ec2c:	4654      	mov	r4, sl
 800ec2e:	2205      	movs	r2, #5
 800ec30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec34:	4850      	ldr	r0, [pc, #320]	; (800ed78 <_svfiprintf_r+0x1e8>)
 800ec36:	f7f1 facb 	bl	80001d0 <memchr>
 800ec3a:	9a04      	ldr	r2, [sp, #16]
 800ec3c:	b9d8      	cbnz	r0, 800ec76 <_svfiprintf_r+0xe6>
 800ec3e:	06d0      	lsls	r0, r2, #27
 800ec40:	bf44      	itt	mi
 800ec42:	2320      	movmi	r3, #32
 800ec44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec48:	0711      	lsls	r1, r2, #28
 800ec4a:	bf44      	itt	mi
 800ec4c:	232b      	movmi	r3, #43	; 0x2b
 800ec4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec52:	f89a 3000 	ldrb.w	r3, [sl]
 800ec56:	2b2a      	cmp	r3, #42	; 0x2a
 800ec58:	d015      	beq.n	800ec86 <_svfiprintf_r+0xf6>
 800ec5a:	9a07      	ldr	r2, [sp, #28]
 800ec5c:	4654      	mov	r4, sl
 800ec5e:	2000      	movs	r0, #0
 800ec60:	f04f 0c0a 	mov.w	ip, #10
 800ec64:	4621      	mov	r1, r4
 800ec66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec6a:	3b30      	subs	r3, #48	; 0x30
 800ec6c:	2b09      	cmp	r3, #9
 800ec6e:	d94d      	bls.n	800ed0c <_svfiprintf_r+0x17c>
 800ec70:	b1b0      	cbz	r0, 800eca0 <_svfiprintf_r+0x110>
 800ec72:	9207      	str	r2, [sp, #28]
 800ec74:	e014      	b.n	800eca0 <_svfiprintf_r+0x110>
 800ec76:	eba0 0308 	sub.w	r3, r0, r8
 800ec7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	9304      	str	r3, [sp, #16]
 800ec82:	46a2      	mov	sl, r4
 800ec84:	e7d2      	b.n	800ec2c <_svfiprintf_r+0x9c>
 800ec86:	9b03      	ldr	r3, [sp, #12]
 800ec88:	1d19      	adds	r1, r3, #4
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	9103      	str	r1, [sp, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bfbb      	ittet	lt
 800ec92:	425b      	neglt	r3, r3
 800ec94:	f042 0202 	orrlt.w	r2, r2, #2
 800ec98:	9307      	strge	r3, [sp, #28]
 800ec9a:	9307      	strlt	r3, [sp, #28]
 800ec9c:	bfb8      	it	lt
 800ec9e:	9204      	strlt	r2, [sp, #16]
 800eca0:	7823      	ldrb	r3, [r4, #0]
 800eca2:	2b2e      	cmp	r3, #46	; 0x2e
 800eca4:	d10c      	bne.n	800ecc0 <_svfiprintf_r+0x130>
 800eca6:	7863      	ldrb	r3, [r4, #1]
 800eca8:	2b2a      	cmp	r3, #42	; 0x2a
 800ecaa:	d134      	bne.n	800ed16 <_svfiprintf_r+0x186>
 800ecac:	9b03      	ldr	r3, [sp, #12]
 800ecae:	1d1a      	adds	r2, r3, #4
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	9203      	str	r2, [sp, #12]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	bfb8      	it	lt
 800ecb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecbc:	3402      	adds	r4, #2
 800ecbe:	9305      	str	r3, [sp, #20]
 800ecc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ed88 <_svfiprintf_r+0x1f8>
 800ecc4:	7821      	ldrb	r1, [r4, #0]
 800ecc6:	2203      	movs	r2, #3
 800ecc8:	4650      	mov	r0, sl
 800ecca:	f7f1 fa81 	bl	80001d0 <memchr>
 800ecce:	b138      	cbz	r0, 800ece0 <_svfiprintf_r+0x150>
 800ecd0:	9b04      	ldr	r3, [sp, #16]
 800ecd2:	eba0 000a 	sub.w	r0, r0, sl
 800ecd6:	2240      	movs	r2, #64	; 0x40
 800ecd8:	4082      	lsls	r2, r0
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	3401      	adds	r4, #1
 800ecde:	9304      	str	r3, [sp, #16]
 800ece0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ece4:	4825      	ldr	r0, [pc, #148]	; (800ed7c <_svfiprintf_r+0x1ec>)
 800ece6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecea:	2206      	movs	r2, #6
 800ecec:	f7f1 fa70 	bl	80001d0 <memchr>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d038      	beq.n	800ed66 <_svfiprintf_r+0x1d6>
 800ecf4:	4b22      	ldr	r3, [pc, #136]	; (800ed80 <_svfiprintf_r+0x1f0>)
 800ecf6:	bb1b      	cbnz	r3, 800ed40 <_svfiprintf_r+0x1b0>
 800ecf8:	9b03      	ldr	r3, [sp, #12]
 800ecfa:	3307      	adds	r3, #7
 800ecfc:	f023 0307 	bic.w	r3, r3, #7
 800ed00:	3308      	adds	r3, #8
 800ed02:	9303      	str	r3, [sp, #12]
 800ed04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed06:	4433      	add	r3, r6
 800ed08:	9309      	str	r3, [sp, #36]	; 0x24
 800ed0a:	e768      	b.n	800ebde <_svfiprintf_r+0x4e>
 800ed0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed10:	460c      	mov	r4, r1
 800ed12:	2001      	movs	r0, #1
 800ed14:	e7a6      	b.n	800ec64 <_svfiprintf_r+0xd4>
 800ed16:	2300      	movs	r3, #0
 800ed18:	3401      	adds	r4, #1
 800ed1a:	9305      	str	r3, [sp, #20]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	f04f 0c0a 	mov.w	ip, #10
 800ed22:	4620      	mov	r0, r4
 800ed24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed28:	3a30      	subs	r2, #48	; 0x30
 800ed2a:	2a09      	cmp	r2, #9
 800ed2c:	d903      	bls.n	800ed36 <_svfiprintf_r+0x1a6>
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d0c6      	beq.n	800ecc0 <_svfiprintf_r+0x130>
 800ed32:	9105      	str	r1, [sp, #20]
 800ed34:	e7c4      	b.n	800ecc0 <_svfiprintf_r+0x130>
 800ed36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e7f0      	b.n	800ed22 <_svfiprintf_r+0x192>
 800ed40:	ab03      	add	r3, sp, #12
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	462a      	mov	r2, r5
 800ed46:	4b0f      	ldr	r3, [pc, #60]	; (800ed84 <_svfiprintf_r+0x1f4>)
 800ed48:	a904      	add	r1, sp, #16
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	f7fd fd68 	bl	800c820 <_printf_float>
 800ed50:	1c42      	adds	r2, r0, #1
 800ed52:	4606      	mov	r6, r0
 800ed54:	d1d6      	bne.n	800ed04 <_svfiprintf_r+0x174>
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	065b      	lsls	r3, r3, #25
 800ed5a:	f53f af2d 	bmi.w	800ebb8 <_svfiprintf_r+0x28>
 800ed5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed60:	b01d      	add	sp, #116	; 0x74
 800ed62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed66:	ab03      	add	r3, sp, #12
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	462a      	mov	r2, r5
 800ed6c:	4b05      	ldr	r3, [pc, #20]	; (800ed84 <_svfiprintf_r+0x1f4>)
 800ed6e:	a904      	add	r1, sp, #16
 800ed70:	4638      	mov	r0, r7
 800ed72:	f7fd fff9 	bl	800cd68 <_printf_i>
 800ed76:	e7eb      	b.n	800ed50 <_svfiprintf_r+0x1c0>
 800ed78:	0800faf4 	.word	0x0800faf4
 800ed7c:	0800fafe 	.word	0x0800fafe
 800ed80:	0800c821 	.word	0x0800c821
 800ed84:	0800eadd 	.word	0x0800eadd
 800ed88:	0800fafa 	.word	0x0800fafa

0800ed8c <__sfputc_r>:
 800ed8c:	6893      	ldr	r3, [r2, #8]
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	b410      	push	{r4}
 800ed94:	6093      	str	r3, [r2, #8]
 800ed96:	da08      	bge.n	800edaa <__sfputc_r+0x1e>
 800ed98:	6994      	ldr	r4, [r2, #24]
 800ed9a:	42a3      	cmp	r3, r4
 800ed9c:	db01      	blt.n	800eda2 <__sfputc_r+0x16>
 800ed9e:	290a      	cmp	r1, #10
 800eda0:	d103      	bne.n	800edaa <__sfputc_r+0x1e>
 800eda2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda6:	f7fe ba82 	b.w	800d2ae <__swbuf_r>
 800edaa:	6813      	ldr	r3, [r2, #0]
 800edac:	1c58      	adds	r0, r3, #1
 800edae:	6010      	str	r0, [r2, #0]
 800edb0:	7019      	strb	r1, [r3, #0]
 800edb2:	4608      	mov	r0, r1
 800edb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb8:	4770      	bx	lr

0800edba <__sfputs_r>:
 800edba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edbc:	4606      	mov	r6, r0
 800edbe:	460f      	mov	r7, r1
 800edc0:	4614      	mov	r4, r2
 800edc2:	18d5      	adds	r5, r2, r3
 800edc4:	42ac      	cmp	r4, r5
 800edc6:	d101      	bne.n	800edcc <__sfputs_r+0x12>
 800edc8:	2000      	movs	r0, #0
 800edca:	e007      	b.n	800eddc <__sfputs_r+0x22>
 800edcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd0:	463a      	mov	r2, r7
 800edd2:	4630      	mov	r0, r6
 800edd4:	f7ff ffda 	bl	800ed8c <__sfputc_r>
 800edd8:	1c43      	adds	r3, r0, #1
 800edda:	d1f3      	bne.n	800edc4 <__sfputs_r+0xa>
 800eddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ede0 <_vfiprintf_r>:
 800ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	460d      	mov	r5, r1
 800ede6:	b09d      	sub	sp, #116	; 0x74
 800ede8:	4614      	mov	r4, r2
 800edea:	4698      	mov	r8, r3
 800edec:	4606      	mov	r6, r0
 800edee:	b118      	cbz	r0, 800edf8 <_vfiprintf_r+0x18>
 800edf0:	6a03      	ldr	r3, [r0, #32]
 800edf2:	b90b      	cbnz	r3, 800edf8 <_vfiprintf_r+0x18>
 800edf4:	f7fe f954 	bl	800d0a0 <__sinit>
 800edf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edfa:	07d9      	lsls	r1, r3, #31
 800edfc:	d405      	bmi.n	800ee0a <_vfiprintf_r+0x2a>
 800edfe:	89ab      	ldrh	r3, [r5, #12]
 800ee00:	059a      	lsls	r2, r3, #22
 800ee02:	d402      	bmi.n	800ee0a <_vfiprintf_r+0x2a>
 800ee04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee06:	f7fe fb63 	bl	800d4d0 <__retarget_lock_acquire_recursive>
 800ee0a:	89ab      	ldrh	r3, [r5, #12]
 800ee0c:	071b      	lsls	r3, r3, #28
 800ee0e:	d501      	bpl.n	800ee14 <_vfiprintf_r+0x34>
 800ee10:	692b      	ldr	r3, [r5, #16]
 800ee12:	b99b      	cbnz	r3, 800ee3c <_vfiprintf_r+0x5c>
 800ee14:	4629      	mov	r1, r5
 800ee16:	4630      	mov	r0, r6
 800ee18:	f7fe fa86 	bl	800d328 <__swsetup_r>
 800ee1c:	b170      	cbz	r0, 800ee3c <_vfiprintf_r+0x5c>
 800ee1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee20:	07dc      	lsls	r4, r3, #31
 800ee22:	d504      	bpl.n	800ee2e <_vfiprintf_r+0x4e>
 800ee24:	f04f 30ff 	mov.w	r0, #4294967295
 800ee28:	b01d      	add	sp, #116	; 0x74
 800ee2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee2e:	89ab      	ldrh	r3, [r5, #12]
 800ee30:	0598      	lsls	r0, r3, #22
 800ee32:	d4f7      	bmi.n	800ee24 <_vfiprintf_r+0x44>
 800ee34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee36:	f7fe fb4c 	bl	800d4d2 <__retarget_lock_release_recursive>
 800ee3a:	e7f3      	b.n	800ee24 <_vfiprintf_r+0x44>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee40:	2320      	movs	r3, #32
 800ee42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee4a:	2330      	movs	r3, #48	; 0x30
 800ee4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f000 <_vfiprintf_r+0x220>
 800ee50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee54:	f04f 0901 	mov.w	r9, #1
 800ee58:	4623      	mov	r3, r4
 800ee5a:	469a      	mov	sl, r3
 800ee5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee60:	b10a      	cbz	r2, 800ee66 <_vfiprintf_r+0x86>
 800ee62:	2a25      	cmp	r2, #37	; 0x25
 800ee64:	d1f9      	bne.n	800ee5a <_vfiprintf_r+0x7a>
 800ee66:	ebba 0b04 	subs.w	fp, sl, r4
 800ee6a:	d00b      	beq.n	800ee84 <_vfiprintf_r+0xa4>
 800ee6c:	465b      	mov	r3, fp
 800ee6e:	4622      	mov	r2, r4
 800ee70:	4629      	mov	r1, r5
 800ee72:	4630      	mov	r0, r6
 800ee74:	f7ff ffa1 	bl	800edba <__sfputs_r>
 800ee78:	3001      	adds	r0, #1
 800ee7a:	f000 80a9 	beq.w	800efd0 <_vfiprintf_r+0x1f0>
 800ee7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee80:	445a      	add	r2, fp
 800ee82:	9209      	str	r2, [sp, #36]	; 0x24
 800ee84:	f89a 3000 	ldrb.w	r3, [sl]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f000 80a1 	beq.w	800efd0 <_vfiprintf_r+0x1f0>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	f04f 32ff 	mov.w	r2, #4294967295
 800ee94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee98:	f10a 0a01 	add.w	sl, sl, #1
 800ee9c:	9304      	str	r3, [sp, #16]
 800ee9e:	9307      	str	r3, [sp, #28]
 800eea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eea4:	931a      	str	r3, [sp, #104]	; 0x68
 800eea6:	4654      	mov	r4, sl
 800eea8:	2205      	movs	r2, #5
 800eeaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeae:	4854      	ldr	r0, [pc, #336]	; (800f000 <_vfiprintf_r+0x220>)
 800eeb0:	f7f1 f98e 	bl	80001d0 <memchr>
 800eeb4:	9a04      	ldr	r2, [sp, #16]
 800eeb6:	b9d8      	cbnz	r0, 800eef0 <_vfiprintf_r+0x110>
 800eeb8:	06d1      	lsls	r1, r2, #27
 800eeba:	bf44      	itt	mi
 800eebc:	2320      	movmi	r3, #32
 800eebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eec2:	0713      	lsls	r3, r2, #28
 800eec4:	bf44      	itt	mi
 800eec6:	232b      	movmi	r3, #43	; 0x2b
 800eec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eecc:	f89a 3000 	ldrb.w	r3, [sl]
 800eed0:	2b2a      	cmp	r3, #42	; 0x2a
 800eed2:	d015      	beq.n	800ef00 <_vfiprintf_r+0x120>
 800eed4:	9a07      	ldr	r2, [sp, #28]
 800eed6:	4654      	mov	r4, sl
 800eed8:	2000      	movs	r0, #0
 800eeda:	f04f 0c0a 	mov.w	ip, #10
 800eede:	4621      	mov	r1, r4
 800eee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eee4:	3b30      	subs	r3, #48	; 0x30
 800eee6:	2b09      	cmp	r3, #9
 800eee8:	d94d      	bls.n	800ef86 <_vfiprintf_r+0x1a6>
 800eeea:	b1b0      	cbz	r0, 800ef1a <_vfiprintf_r+0x13a>
 800eeec:	9207      	str	r2, [sp, #28]
 800eeee:	e014      	b.n	800ef1a <_vfiprintf_r+0x13a>
 800eef0:	eba0 0308 	sub.w	r3, r0, r8
 800eef4:	fa09 f303 	lsl.w	r3, r9, r3
 800eef8:	4313      	orrs	r3, r2
 800eefa:	9304      	str	r3, [sp, #16]
 800eefc:	46a2      	mov	sl, r4
 800eefe:	e7d2      	b.n	800eea6 <_vfiprintf_r+0xc6>
 800ef00:	9b03      	ldr	r3, [sp, #12]
 800ef02:	1d19      	adds	r1, r3, #4
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	9103      	str	r1, [sp, #12]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	bfbb      	ittet	lt
 800ef0c:	425b      	neglt	r3, r3
 800ef0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ef12:	9307      	strge	r3, [sp, #28]
 800ef14:	9307      	strlt	r3, [sp, #28]
 800ef16:	bfb8      	it	lt
 800ef18:	9204      	strlt	r2, [sp, #16]
 800ef1a:	7823      	ldrb	r3, [r4, #0]
 800ef1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef1e:	d10c      	bne.n	800ef3a <_vfiprintf_r+0x15a>
 800ef20:	7863      	ldrb	r3, [r4, #1]
 800ef22:	2b2a      	cmp	r3, #42	; 0x2a
 800ef24:	d134      	bne.n	800ef90 <_vfiprintf_r+0x1b0>
 800ef26:	9b03      	ldr	r3, [sp, #12]
 800ef28:	1d1a      	adds	r2, r3, #4
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	9203      	str	r2, [sp, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	bfb8      	it	lt
 800ef32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef36:	3402      	adds	r4, #2
 800ef38:	9305      	str	r3, [sp, #20]
 800ef3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f010 <_vfiprintf_r+0x230>
 800ef3e:	7821      	ldrb	r1, [r4, #0]
 800ef40:	2203      	movs	r2, #3
 800ef42:	4650      	mov	r0, sl
 800ef44:	f7f1 f944 	bl	80001d0 <memchr>
 800ef48:	b138      	cbz	r0, 800ef5a <_vfiprintf_r+0x17a>
 800ef4a:	9b04      	ldr	r3, [sp, #16]
 800ef4c:	eba0 000a 	sub.w	r0, r0, sl
 800ef50:	2240      	movs	r2, #64	; 0x40
 800ef52:	4082      	lsls	r2, r0
 800ef54:	4313      	orrs	r3, r2
 800ef56:	3401      	adds	r4, #1
 800ef58:	9304      	str	r3, [sp, #16]
 800ef5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef5e:	4829      	ldr	r0, [pc, #164]	; (800f004 <_vfiprintf_r+0x224>)
 800ef60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef64:	2206      	movs	r2, #6
 800ef66:	f7f1 f933 	bl	80001d0 <memchr>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	d03f      	beq.n	800efee <_vfiprintf_r+0x20e>
 800ef6e:	4b26      	ldr	r3, [pc, #152]	; (800f008 <_vfiprintf_r+0x228>)
 800ef70:	bb1b      	cbnz	r3, 800efba <_vfiprintf_r+0x1da>
 800ef72:	9b03      	ldr	r3, [sp, #12]
 800ef74:	3307      	adds	r3, #7
 800ef76:	f023 0307 	bic.w	r3, r3, #7
 800ef7a:	3308      	adds	r3, #8
 800ef7c:	9303      	str	r3, [sp, #12]
 800ef7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef80:	443b      	add	r3, r7
 800ef82:	9309      	str	r3, [sp, #36]	; 0x24
 800ef84:	e768      	b.n	800ee58 <_vfiprintf_r+0x78>
 800ef86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef8a:	460c      	mov	r4, r1
 800ef8c:	2001      	movs	r0, #1
 800ef8e:	e7a6      	b.n	800eede <_vfiprintf_r+0xfe>
 800ef90:	2300      	movs	r3, #0
 800ef92:	3401      	adds	r4, #1
 800ef94:	9305      	str	r3, [sp, #20]
 800ef96:	4619      	mov	r1, r3
 800ef98:	f04f 0c0a 	mov.w	ip, #10
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efa2:	3a30      	subs	r2, #48	; 0x30
 800efa4:	2a09      	cmp	r2, #9
 800efa6:	d903      	bls.n	800efb0 <_vfiprintf_r+0x1d0>
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d0c6      	beq.n	800ef3a <_vfiprintf_r+0x15a>
 800efac:	9105      	str	r1, [sp, #20]
 800efae:	e7c4      	b.n	800ef3a <_vfiprintf_r+0x15a>
 800efb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800efb4:	4604      	mov	r4, r0
 800efb6:	2301      	movs	r3, #1
 800efb8:	e7f0      	b.n	800ef9c <_vfiprintf_r+0x1bc>
 800efba:	ab03      	add	r3, sp, #12
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	462a      	mov	r2, r5
 800efc0:	4b12      	ldr	r3, [pc, #72]	; (800f00c <_vfiprintf_r+0x22c>)
 800efc2:	a904      	add	r1, sp, #16
 800efc4:	4630      	mov	r0, r6
 800efc6:	f7fd fc2b 	bl	800c820 <_printf_float>
 800efca:	4607      	mov	r7, r0
 800efcc:	1c78      	adds	r0, r7, #1
 800efce:	d1d6      	bne.n	800ef7e <_vfiprintf_r+0x19e>
 800efd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efd2:	07d9      	lsls	r1, r3, #31
 800efd4:	d405      	bmi.n	800efe2 <_vfiprintf_r+0x202>
 800efd6:	89ab      	ldrh	r3, [r5, #12]
 800efd8:	059a      	lsls	r2, r3, #22
 800efda:	d402      	bmi.n	800efe2 <_vfiprintf_r+0x202>
 800efdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efde:	f7fe fa78 	bl	800d4d2 <__retarget_lock_release_recursive>
 800efe2:	89ab      	ldrh	r3, [r5, #12]
 800efe4:	065b      	lsls	r3, r3, #25
 800efe6:	f53f af1d 	bmi.w	800ee24 <_vfiprintf_r+0x44>
 800efea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efec:	e71c      	b.n	800ee28 <_vfiprintf_r+0x48>
 800efee:	ab03      	add	r3, sp, #12
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	462a      	mov	r2, r5
 800eff4:	4b05      	ldr	r3, [pc, #20]	; (800f00c <_vfiprintf_r+0x22c>)
 800eff6:	a904      	add	r1, sp, #16
 800eff8:	4630      	mov	r0, r6
 800effa:	f7fd feb5 	bl	800cd68 <_printf_i>
 800effe:	e7e4      	b.n	800efca <_vfiprintf_r+0x1ea>
 800f000:	0800faf4 	.word	0x0800faf4
 800f004:	0800fafe 	.word	0x0800fafe
 800f008:	0800c821 	.word	0x0800c821
 800f00c:	0800edbb 	.word	0x0800edbb
 800f010:	0800fafa 	.word	0x0800fafa

0800f014 <__sflush_r>:
 800f014:	898a      	ldrh	r2, [r1, #12]
 800f016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f01a:	4605      	mov	r5, r0
 800f01c:	0710      	lsls	r0, r2, #28
 800f01e:	460c      	mov	r4, r1
 800f020:	d458      	bmi.n	800f0d4 <__sflush_r+0xc0>
 800f022:	684b      	ldr	r3, [r1, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	dc05      	bgt.n	800f034 <__sflush_r+0x20>
 800f028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	dc02      	bgt.n	800f034 <__sflush_r+0x20>
 800f02e:	2000      	movs	r0, #0
 800f030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f036:	2e00      	cmp	r6, #0
 800f038:	d0f9      	beq.n	800f02e <__sflush_r+0x1a>
 800f03a:	2300      	movs	r3, #0
 800f03c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f040:	682f      	ldr	r7, [r5, #0]
 800f042:	6a21      	ldr	r1, [r4, #32]
 800f044:	602b      	str	r3, [r5, #0]
 800f046:	d032      	beq.n	800f0ae <__sflush_r+0x9a>
 800f048:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	075a      	lsls	r2, r3, #29
 800f04e:	d505      	bpl.n	800f05c <__sflush_r+0x48>
 800f050:	6863      	ldr	r3, [r4, #4]
 800f052:	1ac0      	subs	r0, r0, r3
 800f054:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f056:	b10b      	cbz	r3, 800f05c <__sflush_r+0x48>
 800f058:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f05a:	1ac0      	subs	r0, r0, r3
 800f05c:	2300      	movs	r3, #0
 800f05e:	4602      	mov	r2, r0
 800f060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f062:	6a21      	ldr	r1, [r4, #32]
 800f064:	4628      	mov	r0, r5
 800f066:	47b0      	blx	r6
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	89a3      	ldrh	r3, [r4, #12]
 800f06c:	d106      	bne.n	800f07c <__sflush_r+0x68>
 800f06e:	6829      	ldr	r1, [r5, #0]
 800f070:	291d      	cmp	r1, #29
 800f072:	d82b      	bhi.n	800f0cc <__sflush_r+0xb8>
 800f074:	4a29      	ldr	r2, [pc, #164]	; (800f11c <__sflush_r+0x108>)
 800f076:	410a      	asrs	r2, r1
 800f078:	07d6      	lsls	r6, r2, #31
 800f07a:	d427      	bmi.n	800f0cc <__sflush_r+0xb8>
 800f07c:	2200      	movs	r2, #0
 800f07e:	6062      	str	r2, [r4, #4]
 800f080:	04d9      	lsls	r1, r3, #19
 800f082:	6922      	ldr	r2, [r4, #16]
 800f084:	6022      	str	r2, [r4, #0]
 800f086:	d504      	bpl.n	800f092 <__sflush_r+0x7e>
 800f088:	1c42      	adds	r2, r0, #1
 800f08a:	d101      	bne.n	800f090 <__sflush_r+0x7c>
 800f08c:	682b      	ldr	r3, [r5, #0]
 800f08e:	b903      	cbnz	r3, 800f092 <__sflush_r+0x7e>
 800f090:	6560      	str	r0, [r4, #84]	; 0x54
 800f092:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f094:	602f      	str	r7, [r5, #0]
 800f096:	2900      	cmp	r1, #0
 800f098:	d0c9      	beq.n	800f02e <__sflush_r+0x1a>
 800f09a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f09e:	4299      	cmp	r1, r3
 800f0a0:	d002      	beq.n	800f0a8 <__sflush_r+0x94>
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	f7ff f89e 	bl	800e1e4 <_free_r>
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	6360      	str	r0, [r4, #52]	; 0x34
 800f0ac:	e7c0      	b.n	800f030 <__sflush_r+0x1c>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	47b0      	blx	r6
 800f0b4:	1c41      	adds	r1, r0, #1
 800f0b6:	d1c8      	bne.n	800f04a <__sflush_r+0x36>
 800f0b8:	682b      	ldr	r3, [r5, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d0c5      	beq.n	800f04a <__sflush_r+0x36>
 800f0be:	2b1d      	cmp	r3, #29
 800f0c0:	d001      	beq.n	800f0c6 <__sflush_r+0xb2>
 800f0c2:	2b16      	cmp	r3, #22
 800f0c4:	d101      	bne.n	800f0ca <__sflush_r+0xb6>
 800f0c6:	602f      	str	r7, [r5, #0]
 800f0c8:	e7b1      	b.n	800f02e <__sflush_r+0x1a>
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0d0:	81a3      	strh	r3, [r4, #12]
 800f0d2:	e7ad      	b.n	800f030 <__sflush_r+0x1c>
 800f0d4:	690f      	ldr	r7, [r1, #16]
 800f0d6:	2f00      	cmp	r7, #0
 800f0d8:	d0a9      	beq.n	800f02e <__sflush_r+0x1a>
 800f0da:	0793      	lsls	r3, r2, #30
 800f0dc:	680e      	ldr	r6, [r1, #0]
 800f0de:	bf08      	it	eq
 800f0e0:	694b      	ldreq	r3, [r1, #20]
 800f0e2:	600f      	str	r7, [r1, #0]
 800f0e4:	bf18      	it	ne
 800f0e6:	2300      	movne	r3, #0
 800f0e8:	eba6 0807 	sub.w	r8, r6, r7
 800f0ec:	608b      	str	r3, [r1, #8]
 800f0ee:	f1b8 0f00 	cmp.w	r8, #0
 800f0f2:	dd9c      	ble.n	800f02e <__sflush_r+0x1a>
 800f0f4:	6a21      	ldr	r1, [r4, #32]
 800f0f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0f8:	4643      	mov	r3, r8
 800f0fa:	463a      	mov	r2, r7
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	47b0      	blx	r6
 800f100:	2800      	cmp	r0, #0
 800f102:	dc06      	bgt.n	800f112 <__sflush_r+0xfe>
 800f104:	89a3      	ldrh	r3, [r4, #12]
 800f106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f10a:	81a3      	strh	r3, [r4, #12]
 800f10c:	f04f 30ff 	mov.w	r0, #4294967295
 800f110:	e78e      	b.n	800f030 <__sflush_r+0x1c>
 800f112:	4407      	add	r7, r0
 800f114:	eba8 0800 	sub.w	r8, r8, r0
 800f118:	e7e9      	b.n	800f0ee <__sflush_r+0xda>
 800f11a:	bf00      	nop
 800f11c:	dfbffffe 	.word	0xdfbffffe

0800f120 <_fflush_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	690b      	ldr	r3, [r1, #16]
 800f124:	4605      	mov	r5, r0
 800f126:	460c      	mov	r4, r1
 800f128:	b913      	cbnz	r3, 800f130 <_fflush_r+0x10>
 800f12a:	2500      	movs	r5, #0
 800f12c:	4628      	mov	r0, r5
 800f12e:	bd38      	pop	{r3, r4, r5, pc}
 800f130:	b118      	cbz	r0, 800f13a <_fflush_r+0x1a>
 800f132:	6a03      	ldr	r3, [r0, #32]
 800f134:	b90b      	cbnz	r3, 800f13a <_fflush_r+0x1a>
 800f136:	f7fd ffb3 	bl	800d0a0 <__sinit>
 800f13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d0f3      	beq.n	800f12a <_fflush_r+0xa>
 800f142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f144:	07d0      	lsls	r0, r2, #31
 800f146:	d404      	bmi.n	800f152 <_fflush_r+0x32>
 800f148:	0599      	lsls	r1, r3, #22
 800f14a:	d402      	bmi.n	800f152 <_fflush_r+0x32>
 800f14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f14e:	f7fe f9bf 	bl	800d4d0 <__retarget_lock_acquire_recursive>
 800f152:	4628      	mov	r0, r5
 800f154:	4621      	mov	r1, r4
 800f156:	f7ff ff5d 	bl	800f014 <__sflush_r>
 800f15a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f15c:	07da      	lsls	r2, r3, #31
 800f15e:	4605      	mov	r5, r0
 800f160:	d4e4      	bmi.n	800f12c <_fflush_r+0xc>
 800f162:	89a3      	ldrh	r3, [r4, #12]
 800f164:	059b      	lsls	r3, r3, #22
 800f166:	d4e1      	bmi.n	800f12c <_fflush_r+0xc>
 800f168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f16a:	f7fe f9b2 	bl	800d4d2 <__retarget_lock_release_recursive>
 800f16e:	e7dd      	b.n	800f12c <_fflush_r+0xc>

0800f170 <__swhatbuf_r>:
 800f170:	b570      	push	{r4, r5, r6, lr}
 800f172:	460c      	mov	r4, r1
 800f174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f178:	2900      	cmp	r1, #0
 800f17a:	b096      	sub	sp, #88	; 0x58
 800f17c:	4615      	mov	r5, r2
 800f17e:	461e      	mov	r6, r3
 800f180:	da0d      	bge.n	800f19e <__swhatbuf_r+0x2e>
 800f182:	89a3      	ldrh	r3, [r4, #12]
 800f184:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f188:	f04f 0100 	mov.w	r1, #0
 800f18c:	bf0c      	ite	eq
 800f18e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f192:	2340      	movne	r3, #64	; 0x40
 800f194:	2000      	movs	r0, #0
 800f196:	6031      	str	r1, [r6, #0]
 800f198:	602b      	str	r3, [r5, #0]
 800f19a:	b016      	add	sp, #88	; 0x58
 800f19c:	bd70      	pop	{r4, r5, r6, pc}
 800f19e:	466a      	mov	r2, sp
 800f1a0:	f000 f862 	bl	800f268 <_fstat_r>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	dbec      	blt.n	800f182 <__swhatbuf_r+0x12>
 800f1a8:	9901      	ldr	r1, [sp, #4]
 800f1aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f1ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f1b2:	4259      	negs	r1, r3
 800f1b4:	4159      	adcs	r1, r3
 800f1b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1ba:	e7eb      	b.n	800f194 <__swhatbuf_r+0x24>

0800f1bc <__smakebuf_r>:
 800f1bc:	898b      	ldrh	r3, [r1, #12]
 800f1be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1c0:	079d      	lsls	r5, r3, #30
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	460c      	mov	r4, r1
 800f1c6:	d507      	bpl.n	800f1d8 <__smakebuf_r+0x1c>
 800f1c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	6123      	str	r3, [r4, #16]
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	6163      	str	r3, [r4, #20]
 800f1d4:	b002      	add	sp, #8
 800f1d6:	bd70      	pop	{r4, r5, r6, pc}
 800f1d8:	ab01      	add	r3, sp, #4
 800f1da:	466a      	mov	r2, sp
 800f1dc:	f7ff ffc8 	bl	800f170 <__swhatbuf_r>
 800f1e0:	9900      	ldr	r1, [sp, #0]
 800f1e2:	4605      	mov	r5, r0
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	f7ff f871 	bl	800e2cc <_malloc_r>
 800f1ea:	b948      	cbnz	r0, 800f200 <__smakebuf_r+0x44>
 800f1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1f0:	059a      	lsls	r2, r3, #22
 800f1f2:	d4ef      	bmi.n	800f1d4 <__smakebuf_r+0x18>
 800f1f4:	f023 0303 	bic.w	r3, r3, #3
 800f1f8:	f043 0302 	orr.w	r3, r3, #2
 800f1fc:	81a3      	strh	r3, [r4, #12]
 800f1fe:	e7e3      	b.n	800f1c8 <__smakebuf_r+0xc>
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	6020      	str	r0, [r4, #0]
 800f204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f208:	81a3      	strh	r3, [r4, #12]
 800f20a:	9b00      	ldr	r3, [sp, #0]
 800f20c:	6163      	str	r3, [r4, #20]
 800f20e:	9b01      	ldr	r3, [sp, #4]
 800f210:	6120      	str	r0, [r4, #16]
 800f212:	b15b      	cbz	r3, 800f22c <__smakebuf_r+0x70>
 800f214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f218:	4630      	mov	r0, r6
 800f21a:	f000 f837 	bl	800f28c <_isatty_r>
 800f21e:	b128      	cbz	r0, 800f22c <__smakebuf_r+0x70>
 800f220:	89a3      	ldrh	r3, [r4, #12]
 800f222:	f023 0303 	bic.w	r3, r3, #3
 800f226:	f043 0301 	orr.w	r3, r3, #1
 800f22a:	81a3      	strh	r3, [r4, #12]
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	431d      	orrs	r5, r3
 800f230:	81a5      	strh	r5, [r4, #12]
 800f232:	e7cf      	b.n	800f1d4 <__smakebuf_r+0x18>

0800f234 <memmove>:
 800f234:	4288      	cmp	r0, r1
 800f236:	b510      	push	{r4, lr}
 800f238:	eb01 0402 	add.w	r4, r1, r2
 800f23c:	d902      	bls.n	800f244 <memmove+0x10>
 800f23e:	4284      	cmp	r4, r0
 800f240:	4623      	mov	r3, r4
 800f242:	d807      	bhi.n	800f254 <memmove+0x20>
 800f244:	1e43      	subs	r3, r0, #1
 800f246:	42a1      	cmp	r1, r4
 800f248:	d008      	beq.n	800f25c <memmove+0x28>
 800f24a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f24e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f252:	e7f8      	b.n	800f246 <memmove+0x12>
 800f254:	4402      	add	r2, r0
 800f256:	4601      	mov	r1, r0
 800f258:	428a      	cmp	r2, r1
 800f25a:	d100      	bne.n	800f25e <memmove+0x2a>
 800f25c:	bd10      	pop	{r4, pc}
 800f25e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f266:	e7f7      	b.n	800f258 <memmove+0x24>

0800f268 <_fstat_r>:
 800f268:	b538      	push	{r3, r4, r5, lr}
 800f26a:	4d07      	ldr	r5, [pc, #28]	; (800f288 <_fstat_r+0x20>)
 800f26c:	2300      	movs	r3, #0
 800f26e:	4604      	mov	r4, r0
 800f270:	4608      	mov	r0, r1
 800f272:	4611      	mov	r1, r2
 800f274:	602b      	str	r3, [r5, #0]
 800f276:	f7f3 f8d6 	bl	8002426 <_fstat>
 800f27a:	1c43      	adds	r3, r0, #1
 800f27c:	d102      	bne.n	800f284 <_fstat_r+0x1c>
 800f27e:	682b      	ldr	r3, [r5, #0]
 800f280:	b103      	cbz	r3, 800f284 <_fstat_r+0x1c>
 800f282:	6023      	str	r3, [r4, #0]
 800f284:	bd38      	pop	{r3, r4, r5, pc}
 800f286:	bf00      	nop
 800f288:	20001740 	.word	0x20001740

0800f28c <_isatty_r>:
 800f28c:	b538      	push	{r3, r4, r5, lr}
 800f28e:	4d06      	ldr	r5, [pc, #24]	; (800f2a8 <_isatty_r+0x1c>)
 800f290:	2300      	movs	r3, #0
 800f292:	4604      	mov	r4, r0
 800f294:	4608      	mov	r0, r1
 800f296:	602b      	str	r3, [r5, #0]
 800f298:	f7f3 f8d5 	bl	8002446 <_isatty>
 800f29c:	1c43      	adds	r3, r0, #1
 800f29e:	d102      	bne.n	800f2a6 <_isatty_r+0x1a>
 800f2a0:	682b      	ldr	r3, [r5, #0]
 800f2a2:	b103      	cbz	r3, 800f2a6 <_isatty_r+0x1a>
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}
 800f2a8:	20001740 	.word	0x20001740

0800f2ac <_sbrk_r>:
 800f2ac:	b538      	push	{r3, r4, r5, lr}
 800f2ae:	4d06      	ldr	r5, [pc, #24]	; (800f2c8 <_sbrk_r+0x1c>)
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	4608      	mov	r0, r1
 800f2b6:	602b      	str	r3, [r5, #0]
 800f2b8:	f7f3 f8de 	bl	8002478 <_sbrk>
 800f2bc:	1c43      	adds	r3, r0, #1
 800f2be:	d102      	bne.n	800f2c6 <_sbrk_r+0x1a>
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	b103      	cbz	r3, 800f2c6 <_sbrk_r+0x1a>
 800f2c4:	6023      	str	r3, [r4, #0]
 800f2c6:	bd38      	pop	{r3, r4, r5, pc}
 800f2c8:	20001740 	.word	0x20001740

0800f2cc <__assert_func>:
 800f2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2ce:	4614      	mov	r4, r2
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <__assert_func+0x2c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	68d8      	ldr	r0, [r3, #12]
 800f2da:	b14c      	cbz	r4, 800f2f0 <__assert_func+0x24>
 800f2dc:	4b07      	ldr	r3, [pc, #28]	; (800f2fc <__assert_func+0x30>)
 800f2de:	9100      	str	r1, [sp, #0]
 800f2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2e4:	4906      	ldr	r1, [pc, #24]	; (800f300 <__assert_func+0x34>)
 800f2e6:	462b      	mov	r3, r5
 800f2e8:	f000 f872 	bl	800f3d0 <fiprintf>
 800f2ec:	f000 f882 	bl	800f3f4 <abort>
 800f2f0:	4b04      	ldr	r3, [pc, #16]	; (800f304 <__assert_func+0x38>)
 800f2f2:	461c      	mov	r4, r3
 800f2f4:	e7f3      	b.n	800f2de <__assert_func+0x12>
 800f2f6:	bf00      	nop
 800f2f8:	20000164 	.word	0x20000164
 800f2fc:	0800fb0f 	.word	0x0800fb0f
 800f300:	0800fb1c 	.word	0x0800fb1c
 800f304:	0800fb4a 	.word	0x0800fb4a

0800f308 <_calloc_r>:
 800f308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f30a:	fba1 2402 	umull	r2, r4, r1, r2
 800f30e:	b94c      	cbnz	r4, 800f324 <_calloc_r+0x1c>
 800f310:	4611      	mov	r1, r2
 800f312:	9201      	str	r2, [sp, #4]
 800f314:	f7fe ffda 	bl	800e2cc <_malloc_r>
 800f318:	9a01      	ldr	r2, [sp, #4]
 800f31a:	4605      	mov	r5, r0
 800f31c:	b930      	cbnz	r0, 800f32c <_calloc_r+0x24>
 800f31e:	4628      	mov	r0, r5
 800f320:	b003      	add	sp, #12
 800f322:	bd30      	pop	{r4, r5, pc}
 800f324:	220c      	movs	r2, #12
 800f326:	6002      	str	r2, [r0, #0]
 800f328:	2500      	movs	r5, #0
 800f32a:	e7f8      	b.n	800f31e <_calloc_r+0x16>
 800f32c:	4621      	mov	r1, r4
 800f32e:	f7fe f853 	bl	800d3d8 <memset>
 800f332:	e7f4      	b.n	800f31e <_calloc_r+0x16>

0800f334 <__ascii_mbtowc>:
 800f334:	b082      	sub	sp, #8
 800f336:	b901      	cbnz	r1, 800f33a <__ascii_mbtowc+0x6>
 800f338:	a901      	add	r1, sp, #4
 800f33a:	b142      	cbz	r2, 800f34e <__ascii_mbtowc+0x1a>
 800f33c:	b14b      	cbz	r3, 800f352 <__ascii_mbtowc+0x1e>
 800f33e:	7813      	ldrb	r3, [r2, #0]
 800f340:	600b      	str	r3, [r1, #0]
 800f342:	7812      	ldrb	r2, [r2, #0]
 800f344:	1e10      	subs	r0, r2, #0
 800f346:	bf18      	it	ne
 800f348:	2001      	movne	r0, #1
 800f34a:	b002      	add	sp, #8
 800f34c:	4770      	bx	lr
 800f34e:	4610      	mov	r0, r2
 800f350:	e7fb      	b.n	800f34a <__ascii_mbtowc+0x16>
 800f352:	f06f 0001 	mvn.w	r0, #1
 800f356:	e7f8      	b.n	800f34a <__ascii_mbtowc+0x16>

0800f358 <_realloc_r>:
 800f358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f35c:	4680      	mov	r8, r0
 800f35e:	4614      	mov	r4, r2
 800f360:	460e      	mov	r6, r1
 800f362:	b921      	cbnz	r1, 800f36e <_realloc_r+0x16>
 800f364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f368:	4611      	mov	r1, r2
 800f36a:	f7fe bfaf 	b.w	800e2cc <_malloc_r>
 800f36e:	b92a      	cbnz	r2, 800f37c <_realloc_r+0x24>
 800f370:	f7fe ff38 	bl	800e1e4 <_free_r>
 800f374:	4625      	mov	r5, r4
 800f376:	4628      	mov	r0, r5
 800f378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f37c:	f000 f841 	bl	800f402 <_malloc_usable_size_r>
 800f380:	4284      	cmp	r4, r0
 800f382:	4607      	mov	r7, r0
 800f384:	d802      	bhi.n	800f38c <_realloc_r+0x34>
 800f386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f38a:	d812      	bhi.n	800f3b2 <_realloc_r+0x5a>
 800f38c:	4621      	mov	r1, r4
 800f38e:	4640      	mov	r0, r8
 800f390:	f7fe ff9c 	bl	800e2cc <_malloc_r>
 800f394:	4605      	mov	r5, r0
 800f396:	2800      	cmp	r0, #0
 800f398:	d0ed      	beq.n	800f376 <_realloc_r+0x1e>
 800f39a:	42bc      	cmp	r4, r7
 800f39c:	4622      	mov	r2, r4
 800f39e:	4631      	mov	r1, r6
 800f3a0:	bf28      	it	cs
 800f3a2:	463a      	movcs	r2, r7
 800f3a4:	f7fe f896 	bl	800d4d4 <memcpy>
 800f3a8:	4631      	mov	r1, r6
 800f3aa:	4640      	mov	r0, r8
 800f3ac:	f7fe ff1a 	bl	800e1e4 <_free_r>
 800f3b0:	e7e1      	b.n	800f376 <_realloc_r+0x1e>
 800f3b2:	4635      	mov	r5, r6
 800f3b4:	e7df      	b.n	800f376 <_realloc_r+0x1e>

0800f3b6 <__ascii_wctomb>:
 800f3b6:	b149      	cbz	r1, 800f3cc <__ascii_wctomb+0x16>
 800f3b8:	2aff      	cmp	r2, #255	; 0xff
 800f3ba:	bf85      	ittet	hi
 800f3bc:	238a      	movhi	r3, #138	; 0x8a
 800f3be:	6003      	strhi	r3, [r0, #0]
 800f3c0:	700a      	strbls	r2, [r1, #0]
 800f3c2:	f04f 30ff 	movhi.w	r0, #4294967295
 800f3c6:	bf98      	it	ls
 800f3c8:	2001      	movls	r0, #1
 800f3ca:	4770      	bx	lr
 800f3cc:	4608      	mov	r0, r1
 800f3ce:	4770      	bx	lr

0800f3d0 <fiprintf>:
 800f3d0:	b40e      	push	{r1, r2, r3}
 800f3d2:	b503      	push	{r0, r1, lr}
 800f3d4:	4601      	mov	r1, r0
 800f3d6:	ab03      	add	r3, sp, #12
 800f3d8:	4805      	ldr	r0, [pc, #20]	; (800f3f0 <fiprintf+0x20>)
 800f3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3de:	6800      	ldr	r0, [r0, #0]
 800f3e0:	9301      	str	r3, [sp, #4]
 800f3e2:	f7ff fcfd 	bl	800ede0 <_vfiprintf_r>
 800f3e6:	b002      	add	sp, #8
 800f3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3ec:	b003      	add	sp, #12
 800f3ee:	4770      	bx	lr
 800f3f0:	20000164 	.word	0x20000164

0800f3f4 <abort>:
 800f3f4:	b508      	push	{r3, lr}
 800f3f6:	2006      	movs	r0, #6
 800f3f8:	f000 f834 	bl	800f464 <raise>
 800f3fc:	2001      	movs	r0, #1
 800f3fe:	f7f2 ffdf 	bl	80023c0 <_exit>

0800f402 <_malloc_usable_size_r>:
 800f402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f406:	1f18      	subs	r0, r3, #4
 800f408:	2b00      	cmp	r3, #0
 800f40a:	bfbc      	itt	lt
 800f40c:	580b      	ldrlt	r3, [r1, r0]
 800f40e:	18c0      	addlt	r0, r0, r3
 800f410:	4770      	bx	lr

0800f412 <_raise_r>:
 800f412:	291f      	cmp	r1, #31
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4604      	mov	r4, r0
 800f418:	460d      	mov	r5, r1
 800f41a:	d904      	bls.n	800f426 <_raise_r+0x14>
 800f41c:	2316      	movs	r3, #22
 800f41e:	6003      	str	r3, [r0, #0]
 800f420:	f04f 30ff 	mov.w	r0, #4294967295
 800f424:	bd38      	pop	{r3, r4, r5, pc}
 800f426:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f428:	b112      	cbz	r2, 800f430 <_raise_r+0x1e>
 800f42a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f42e:	b94b      	cbnz	r3, 800f444 <_raise_r+0x32>
 800f430:	4620      	mov	r0, r4
 800f432:	f000 f831 	bl	800f498 <_getpid_r>
 800f436:	462a      	mov	r2, r5
 800f438:	4601      	mov	r1, r0
 800f43a:	4620      	mov	r0, r4
 800f43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f440:	f000 b818 	b.w	800f474 <_kill_r>
 800f444:	2b01      	cmp	r3, #1
 800f446:	d00a      	beq.n	800f45e <_raise_r+0x4c>
 800f448:	1c59      	adds	r1, r3, #1
 800f44a:	d103      	bne.n	800f454 <_raise_r+0x42>
 800f44c:	2316      	movs	r3, #22
 800f44e:	6003      	str	r3, [r0, #0]
 800f450:	2001      	movs	r0, #1
 800f452:	e7e7      	b.n	800f424 <_raise_r+0x12>
 800f454:	2400      	movs	r4, #0
 800f456:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f45a:	4628      	mov	r0, r5
 800f45c:	4798      	blx	r3
 800f45e:	2000      	movs	r0, #0
 800f460:	e7e0      	b.n	800f424 <_raise_r+0x12>
	...

0800f464 <raise>:
 800f464:	4b02      	ldr	r3, [pc, #8]	; (800f470 <raise+0xc>)
 800f466:	4601      	mov	r1, r0
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	f7ff bfd2 	b.w	800f412 <_raise_r>
 800f46e:	bf00      	nop
 800f470:	20000164 	.word	0x20000164

0800f474 <_kill_r>:
 800f474:	b538      	push	{r3, r4, r5, lr}
 800f476:	4d07      	ldr	r5, [pc, #28]	; (800f494 <_kill_r+0x20>)
 800f478:	2300      	movs	r3, #0
 800f47a:	4604      	mov	r4, r0
 800f47c:	4608      	mov	r0, r1
 800f47e:	4611      	mov	r1, r2
 800f480:	602b      	str	r3, [r5, #0]
 800f482:	f7f2 ff8d 	bl	80023a0 <_kill>
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	d102      	bne.n	800f490 <_kill_r+0x1c>
 800f48a:	682b      	ldr	r3, [r5, #0]
 800f48c:	b103      	cbz	r3, 800f490 <_kill_r+0x1c>
 800f48e:	6023      	str	r3, [r4, #0]
 800f490:	bd38      	pop	{r3, r4, r5, pc}
 800f492:	bf00      	nop
 800f494:	20001740 	.word	0x20001740

0800f498 <_getpid_r>:
 800f498:	f7f2 bf7a 	b.w	8002390 <_getpid>

0800f49c <_init>:
 800f49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49e:	bf00      	nop
 800f4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4a2:	bc08      	pop	{r3}
 800f4a4:	469e      	mov	lr, r3
 800f4a6:	4770      	bx	lr

0800f4a8 <_fini>:
 800f4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4aa:	bf00      	nop
 800f4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ae:	bc08      	pop	{r3}
 800f4b0:	469e      	mov	lr, r3
 800f4b2:	4770      	bx	lr
