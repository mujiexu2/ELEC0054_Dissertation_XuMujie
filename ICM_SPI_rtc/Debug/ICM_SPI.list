
ICM_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f150  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800f2e0  0800f2e0  0001f2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f990  0800f990  000202d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f990  0800f990  000202d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f990  0800f990  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f990  0800f990  0001f990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f994  0800f994  0001f994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800f998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000189c  200002d4  0800fc6c  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0800fc6c  00021b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018580  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043a8  00000000  00000000  000388c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  0003cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101c  00000000  00000000  0003e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f1db  00000000  00000000  0003f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c851  00000000  00000000  0005e3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad360  00000000  00000000  0007ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b1c  00000000  00000000  00127f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012eaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f2c8 	.word	0x0800f2c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800f2c8 	.word	0x0800f2c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_GPIO_Init+0xa4>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <MX_GPIO_Init+0xa4>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_GPIO_Init+0xa4>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_GPIO_Init+0xa4>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <MX_GPIO_Init+0xa4>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_GPIO_Init+0xa4>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f001 fcf7 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000c02:	f001 fcf1 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000c06:	2310      	movs	r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f001 fb70 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_GPIO_Init+0xa8>)
 8000c3e:	f001 fb61 	bl	8002304 <HAL_GPIO_Init>

}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48000400 	.word	0x48000400

08000c54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_I2C1_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <MX_I2C1_Init+0x7c>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c90:	f001 fcc2 	bl	8002618 <HAL_I2C_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c9a:	f000 ff36 	bl	8001b0a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000ca2:	f001 fd54 	bl	800274e <HAL_I2CEx_ConfigAnalogFilter>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cac:	f000 ff2d 	bl	8001b0a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000cb4:	f001 fd96 	bl	80027e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 ff24 	bl	8001b0a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200002f0 	.word	0x200002f0
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	00702991 	.word	0x00702991

08000cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b096      	sub	sp, #88	; 0x58
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2234      	movs	r2, #52	; 0x34
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00b fde1 	bl	800c8bc <memset>
  if(i2cHandle->Instance==I2C1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <HAL_I2C_MspInit+0xa8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d137      	bne.n	8000d74 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 f9f3 	bl	80050fc <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d1c:	f000 fef5 	bl	8001b0a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_I2C_MspInit+0xac>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <HAL_I2C_MspInit+0xac>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_I2C_MspInit+0xac>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d3c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3e:	2312      	movs	r3, #18
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f001 fad4 	bl	8002304 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_I2C_MspInit+0xac>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_I2C_MspInit+0xac>)
 8000d62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d66:	6593      	str	r3, [r2, #88]	; 0x58
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_I2C_MspInit+0xac>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3758      	adds	r7, #88	; 0x58
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40021000 	.word	0x40021000

08000d84 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000d88:	bf00      	nop
 8000d8a:	f000 f8d1 	bl	8000f30 <icm20948_who_am_i>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f083 0301 	eor.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f7      	bne.n	8000d8a <icm20948_init+0x6>

	icm20948_device_reset();
 8000d9a:	f000 f911 	bl	8000fc0 <icm20948_device_reset>
	icm20948_wakeup();
 8000d9e:	f000 f93a 	bl	8001016 <icm20948_wakeup>

	icm20948_clock_source(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 f9b2 	bl	800110c <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000da8:	f000 f9c9 	bl	800113e <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8000dac:	f000 f94d 	bl	800104a <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 f9cd 	bl	8001150 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f9e7 	bl	800118a <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 fa01 	bl	80011c4 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 fa0d 	bl	80011e2 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000dc8:	f000 fa3a 	bl	8001240 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8000dcc:	f000 fad4 	bl	8001378 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 fbdf 	bl	8001594 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f000 fc26 	bl	8001628 <icm20948_accel_full_scale_select>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <ak09916_init>:

void ak09916_init()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8000de4:	f000 f948 	bl	8001078 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8000de8:	f000 f95d 	bl	80010a6 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8000dec:	2007      	movs	r0, #7
 8000dee:	f000 f974 	bl	80010da <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8000df2:	bf00      	nop
 8000df4:	f000 f8c0 	bl	8000f78 <ak09916_who_am_i>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	f083 0301 	eor.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f7      	bne.n	8000df4 <ak09916_init+0x14>


	// LP_CONFIG: ODR is determined by I2C_MST_ODR_CONFIG register, page 37
	// I2C_MST_ODR_CONFIG: 1.1 kHz/(2^3) = 136 Hz, page 68
	ak09916_lp_config();
 8000e04:	f000 f8e8 	bl	8000fd8 <ak09916_lp_config>
	ak09916_soft_reset();
 8000e08:	f000 f8fa 	bl	8001000 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8000e0c:	2008      	movs	r0, #8
 8000e0e:	f000 fa06 	bl	800121e <ak09916_operation_mode_setting>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <icm20948_gyro_read>:


void icm20948_gyro_read(axises* data)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000e1e:	2206      	movs	r2, #6
 8000e20:	2133      	movs	r1, #51	; 0x33
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 fcc4 	bl	80017b0 <read_multiple_icm20948_reg>
 8000e28:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b21a      	sxth	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3303      	adds	r3, #3
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3304      	adds	r3, #4
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3305      	adds	r3, #5
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000ea4:	2206      	movs	r2, #6
 8000ea6:	212d      	movs	r1, #45	; 0x2d
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 fc81 	bl	80017b0 <read_multiple_icm20948_reg>
 8000eae:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3303      	adds	r3, #3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3305      	adds	r3, #5
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <icm20948_accel_read+0x90>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000348 	.word	0x20000348

08000f30 <icm20948_who_am_i>:
	return 0;
}

/* Sub Functions */
bool icm20948_who_am_i()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000f36:	2100      	movs	r1, #0
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 fbe9 	bl	8001710 <read_single_icm20948_reg>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	printf("the icm20948 who am i is: 0x%x\n",icm20948_id);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4619      	mov	r1, r3
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <icm20948_who_am_i+0x3c>)
 8000f48:	f00b fb24 	bl	800c594 <iprintf>
	if(icm20948_id == ICM20948_ID){
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2bea      	cmp	r3, #234	; 0xea
 8000f50:	d104      	bne.n	8000f5c <icm20948_who_am_i+0x2c>
		printf("Data matches, icm20948 identity verified.\n");
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <icm20948_who_am_i+0x40>)
 8000f54:	f00b fb84 	bl	800c660 <puts>
		return true;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e003      	b.n	8000f64 <icm20948_who_am_i+0x34>
	}
	else{
		printf("Data not matched, icm20948 incorrect.\n");
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <icm20948_who_am_i+0x44>)
 8000f5e:	f00b fb7f 	bl	800c660 <puts>
		return false;
 8000f62:	2300      	movs	r3, #0
	}
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800f3c8 	.word	0x0800f3c8
 8000f70:	0800f3e8 	.word	0x0800f3e8
 8000f74:	0800f414 	.word	0x0800f414

08000f78 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f000 fc72 	bl	8001868 <read_single_ak09916_reg>
 8000f84:	4603      	mov	r3, r0
 8000f86:	71fb      	strb	r3, [r7, #7]
	printf("the ak09916_id who am i is: 0x%x\n", ak09916_id);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <ak09916_who_am_i+0x3c>)
 8000f8e:	f00b fb01 	bl	800c594 <iprintf>
	if(ak09916_id == AK09916_ID)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b09      	cmp	r3, #9
 8000f96:	d104      	bne.n	8000fa2 <ak09916_who_am_i+0x2a>
	{
		printf("Data matches, ak09916 identity verified.\n");
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <ak09916_who_am_i+0x40>)
 8000f9a:	f00b fb61 	bl	800c660 <puts>
		return true;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e003      	b.n	8000faa <ak09916_who_am_i+0x32>
	}
	else
	{
		printf("Data not matched, ak09916 incorrect.\n");
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <ak09916_who_am_i+0x44>)
 8000fa4:	f00b fb5c 	bl	800c660 <puts>
		return false;
 8000fa8:	2300      	movs	r3, #0
	}
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	0800f43c 	.word	0x0800f43c
 8000fb8:	0800f460 	.word	0x0800f460
 8000fbc:	0800f48c 	.word	0x0800f48c

08000fc0 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000fc4:	22c1      	movs	r2, #193	; 0xc1
 8000fc6:	2106      	movs	r1, #6
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 fbcd 	bl	8001768 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000fce:	2064      	movs	r0, #100	; 0x64
 8000fd0:	f001 f862 	bl	8002098 <HAL_Delay>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <ak09916_lp_config>:

void ak09916_lp_config()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	// LP_CONFIG: ODR is determined by I2C_MST_ODR_CONFIG register, page 37
	write_single_icm20948_reg(ub_0, B0_LP_CONFIG, 0x40);
 8000fdc:	2240      	movs	r2, #64	; 0x40
 8000fde:	2105      	movs	r1, #5
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 fbc1 	bl	8001768 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f001 f856 	bl	8002098 <HAL_Delay>
	// I2C_MST_ODR_CONFIG: 1.1 kHz/(2^3) = 136 Hz, page 68
	write_single_icm20948_reg(ub_3, B3_I2C_MST_ODR_CONFIG, 0x03);
 8000fec:	2203      	movs	r2, #3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2030      	movs	r0, #48	; 0x30
 8000ff2:	f000 fbb9 	bl	8001768 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f001 f84e 	bl	8002098 <HAL_Delay>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8001004:	2101      	movs	r1, #1
 8001006:	2032      	movs	r0, #50	; 0x32
 8001008:	f000 fc52 	bl	80018b0 <write_single_ak09916_reg>
	HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	; 0x64
 800100e:	f001 f843 	bl	8002098 <HAL_Delay>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}

08001016 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800101c:	2106      	movs	r1, #6
 800101e:	2000      	movs	r0, #0
 8001020:	f000 fb76 	bl	8001710 <read_single_icm20948_reg>
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800102e:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	461a      	mov	r2, r3
 8001034:	2106      	movs	r1, #6
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fb96 	bl	8001768 <write_single_icm20948_reg>
	HAL_Delay(100);
 800103c:	2064      	movs	r0, #100	; 0x64
 800103e:	f001 f82b 	bl	8002098 <HAL_Delay>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8001050:	2103      	movs	r1, #3
 8001052:	2000      	movs	r0, #0
 8001054:	f000 fb5c 	bl	8001710 <read_single_icm20948_reg>
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	461a      	mov	r2, r3
 8001068:	2103      	movs	r1, #3
 800106a:	2000      	movs	r0, #0
 800106c:	f000 fb7c 	bl	8001768 <write_single_icm20948_reg>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800107e:	2103      	movs	r1, #3
 8001080:	2000      	movs	r0, #0
 8001082:	f000 fb45 	bl	8001710 <read_single_icm20948_reg>
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	461a      	mov	r2, r3
 8001096:	2103      	movs	r1, #3
 8001098:	2000      	movs	r0, #0
 800109a:	f000 fb65 	bl	8001768 <write_single_icm20948_reg>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80010ac:	2103      	movs	r1, #3
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 fb2e 	bl	8001710 <read_single_icm20948_reg>
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	461a      	mov	r2, r3
 80010c4:	2103      	movs	r1, #3
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 fb4e 	bl	8001768 <write_single_icm20948_reg>
	HAL_Delay(100);
 80010cc:	2064      	movs	r0, #100	; 0x64
 80010ce:	f000 ffe3 	bl	8002098 <HAL_Delay>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80010e4:	2101      	movs	r1, #1
 80010e6:	2030      	movs	r0, #48	; 0x30
 80010e8:	f000 fb12 	bl	8001710 <read_single_icm20948_reg>
 80010ec:	4603      	mov	r3, r0
 80010ee:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	461a      	mov	r2, r3
 80010fc:	2101      	movs	r1, #1
 80010fe:	2030      	movs	r0, #48	; 0x30
 8001100:	f000 fb32 	bl	8001768 <write_single_icm20948_reg>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8001116:	2106      	movs	r1, #6
 8001118:	2000      	movs	r0, #0
 800111a:	f000 faf9 	bl	8001710 <read_single_icm20948_reg>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4313      	orrs	r3, r2
 8001128:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	461a      	mov	r2, r3
 800112e:	2106      	movs	r1, #6
 8001130:	2000      	movs	r0, #0
 8001132:	f000 fb19 	bl	8001768 <write_single_icm20948_reg>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8001142:	2201      	movs	r2, #1
 8001144:	2109      	movs	r1, #9
 8001146:	2020      	movs	r0, #32
 8001148:	f000 fb0e 	bl	8001768 <write_single_icm20948_reg>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800115a:	2101      	movs	r1, #1
 800115c:	2020      	movs	r0, #32
 800115e:	f000 fad7 	bl	8001710 <read_single_icm20948_reg>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	b25a      	sxtb	r2, r3
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001170:	4313      	orrs	r3, r2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	461a      	mov	r2, r3
 800117a:	2101      	movs	r1, #1
 800117c:	2020      	movs	r0, #32
 800117e:	f000 faf3 	bl	8001768 <write_single_icm20948_reg>
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001194:	2114      	movs	r1, #20
 8001196:	2020      	movs	r0, #32
 8001198:	f000 faba 	bl	8001710 <read_single_icm20948_reg>
 800119c:	4603      	mov	r3, r0
 800119e:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	461a      	mov	r2, r3
 80011b4:	2101      	movs	r1, #1
 80011b6:	2020      	movs	r0, #32
 80011b8:	f000 fad6 	bl	8001768 <write_single_icm20948_reg>
}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	461a      	mov	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	2020      	movs	r0, #32
 80011d6:	f000 fac7 	bl	8001768 <write_single_icm20948_reg>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	461a      	mov	r2, r3
 8001202:	2110      	movs	r1, #16
 8001204:	2020      	movs	r0, #32
 8001206:	f000 faaf 	bl	8001768 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	461a      	mov	r2, r3
 800120e:	2111      	movs	r1, #17
 8001210:	2020      	movs	r0, #32
 8001212:	f000 faa9 	bl	8001768 <write_single_icm20948_reg>
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4619      	mov	r1, r3
 800122c:	2031      	movs	r0, #49	; 0x31
 800122e:	f000 fb3f 	bl	80018b0 <write_single_ak09916_reg>
	HAL_Delay(100);
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f000 ff30 	bl	8002098 <HAL_Delay>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	2300      	movs	r3, #0
 8001258:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
 800125e:	e031      	b.n	80012c4 <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fdd6 	bl	8000e16 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001274:	edd7 7a06 	vldr	s15, [r7, #24]
 8001278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001280:	ee17 3a90 	vmov	r3, s15
 8001284:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	edd7 7a07 	vldr	s15, [r7, #28]
 8001294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80012b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b8:	ee17 3a90 	vmov	r3, s15
 80012bc:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	3301      	adds	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	2b63      	cmp	r3, #99	; 0x63
 80012c8:	ddca      	ble.n	8001260 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4a29      	ldr	r2, [pc, #164]	; (8001374 <icm20948_gyro_calibration+0x134>)
 80012ce:	fb82 1203 	smull	r1, r2, r2, r3
 80012d2:	1152      	asrs	r2, r2, #5
 80012d4:	17db      	asrs	r3, r3, #31
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4a25      	ldr	r2, [pc, #148]	; (8001374 <icm20948_gyro_calibration+0x134>)
 80012de:	fb82 1203 	smull	r1, r2, r2, r3
 80012e2:	1152      	asrs	r2, r2, #5
 80012e4:	17db      	asrs	r3, r3, #31
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4a21      	ldr	r2, [pc, #132]	; (8001374 <icm20948_gyro_calibration+0x134>)
 80012ee:	fb82 1203 	smull	r1, r2, r2, r3
 80012f2:	1152      	asrs	r2, r2, #5
 80012f4:	17db      	asrs	r3, r3, #31
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	425b      	negs	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	da00      	bge.n	8001304 <icm20948_gyro_calibration+0xc4>
 8001302:	3303      	adds	r3, #3
 8001304:	109b      	asrs	r3, r3, #2
 8001306:	121b      	asrs	r3, r3, #8
 8001308:	b2db      	uxtb	r3, r3
 800130a:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	425b      	negs	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	da00      	bge.n	8001316 <icm20948_gyro_calibration+0xd6>
 8001314:	3303      	adds	r3, #3
 8001316:	109b      	asrs	r3, r3, #2
 8001318:	b2db      	uxtb	r3, r3
 800131a:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	425b      	negs	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	da00      	bge.n	8001326 <icm20948_gyro_calibration+0xe6>
 8001324:	3303      	adds	r3, #3
 8001326:	109b      	asrs	r3, r3, #2
 8001328:	121b      	asrs	r3, r3, #8
 800132a:	b2db      	uxtb	r3, r3
 800132c:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	425b      	negs	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	da00      	bge.n	8001338 <icm20948_gyro_calibration+0xf8>
 8001336:	3303      	adds	r3, #3
 8001338:	109b      	asrs	r3, r3, #2
 800133a:	b2db      	uxtb	r3, r3
 800133c:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	425b      	negs	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	da00      	bge.n	8001348 <icm20948_gyro_calibration+0x108>
 8001346:	3303      	adds	r3, #3
 8001348:	109b      	asrs	r3, r3, #2
 800134a:	121b      	asrs	r3, r3, #8
 800134c:	b2db      	uxtb	r3, r3
 800134e:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	425b      	negs	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	da00      	bge.n	800135a <icm20948_gyro_calibration+0x11a>
 8001358:	3303      	adds	r3, #3
 800135a:	109b      	asrs	r3, r3, #2
 800135c:	b2db      	uxtb	r3, r3
 800135e:	727b      	strb	r3, [r7, #9]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8001360:	1d3a      	adds	r2, r7, #4
 8001362:	2306      	movs	r3, #6
 8001364:	2103      	movs	r1, #3
 8001366:	2020      	movs	r0, #32
 8001368:	f000 fa52 	bl	8001810 <write_multiple_icm20948_reg>
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	51eb851f 	.word	0x51eb851f

08001378 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b090      	sub	sp, #64	; 0x40
 800137c:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	2300      	movs	r3, #0
 800139c:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 800139e:	2300      	movs	r3, #0
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013a2:	e031      	b.n	8001408 <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 80013a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fd77 	bl	8000e9c <icm20948_accel_read>
		accel_bias[0] += temp.x;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c4:	ee17 3a90 	vmov	r3, s15
 80013c8:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e0:	ee17 3a90 	vmov	r3, s15
 80013e4:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fc:	ee17 3a90 	vmov	r3, s15
 8001400:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 8001402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001404:	3301      	adds	r3, #1
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800140a:	2b63      	cmp	r3, #99	; 0x63
 800140c:	ddca      	ble.n	80013a4 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	4a5e      	ldr	r2, [pc, #376]	; (800158c <icm20948_accel_calibration+0x214>)
 8001412:	fb82 1203 	smull	r1, r2, r2, r3
 8001416:	1152      	asrs	r2, r2, #5
 8001418:	17db      	asrs	r3, r3, #31
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	4a5a      	ldr	r2, [pc, #360]	; (800158c <icm20948_accel_calibration+0x214>)
 8001422:	fb82 1203 	smull	r1, r2, r2, r3
 8001426:	1152      	asrs	r2, r2, #5
 8001428:	17db      	asrs	r3, r3, #31
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	4a56      	ldr	r2, [pc, #344]	; (800158c <icm20948_accel_calibration+0x214>)
 8001432:	fb82 1203 	smull	r1, r2, r2, r3
 8001436:	1152      	asrs	r2, r2, #5
 8001438:	17db      	asrs	r3, r3, #31
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 800143e:	4a54      	ldr	r2, [pc, #336]	; (8001590 <icm20948_accel_calibration+0x218>)
 8001440:	463b      	mov	r3, r7
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	4611      	mov	r1, r2
 8001446:	8019      	strh	r1, [r3, #0]
 8001448:	3302      	adds	r3, #2
 800144a:	0c12      	lsrs	r2, r2, #16
 800144c:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 800144e:	2202      	movs	r2, #2
 8001450:	2114      	movs	r1, #20
 8001452:	2010      	movs	r0, #16
 8001454:	f000 f9ac 	bl	80017b0 <read_multiple_icm20948_reg>
 8001458:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 800145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001462:	3201      	adds	r2, #1
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	4313      	orrs	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 800146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800146c:	3301      	adds	r3, #1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8001478:	2202      	movs	r2, #2
 800147a:	2117      	movs	r1, #23
 800147c:	2010      	movs	r0, #16
 800147e:	f000 f997 	bl	80017b0 <read_multiple_icm20948_reg>
 8001482:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800148c:	3201      	adds	r2, #1
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	3301      	adds	r3, #1
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 80014a2:	2202      	movs	r2, #2
 80014a4:	211a      	movs	r1, #26
 80014a6:	2010      	movs	r0, #16
 80014a8:	f000 f982 	bl	80017b0 <read_multiple_icm20948_reg>
 80014ac:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 80014ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014b6:	3201      	adds	r2, #1
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 80014be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c0:	3301      	adds	r3, #1
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da00      	bge.n	80014d6 <icm20948_accel_calibration+0x15e>
 80014d4:	3307      	adds	r3, #7
 80014d6:	10db      	asrs	r3, r3, #3
 80014d8:	425b      	negs	r3, r3
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da00      	bge.n	80014e8 <icm20948_accel_calibration+0x170>
 80014e6:	3307      	adds	r3, #7
 80014e8:	10db      	asrs	r3, r3, #3
 80014ea:	425b      	negs	r3, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da00      	bge.n	80014fa <icm20948_accel_calibration+0x182>
 80014f8:	3307      	adds	r3, #7
 80014fa:	10db      	asrs	r3, r3, #3
 80014fc:	425b      	negs	r3, r3
 80014fe:	4413      	add	r3, r2
 8001500:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	121b      	asrs	r3, r3, #8
 8001506:	b2db      	uxtb	r3, r3
 8001508:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8001516:	797a      	ldrb	r2, [r7, #5]
 8001518:	783b      	ldrb	r3, [r7, #0]
 800151a:	4313      	orrs	r3, r2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	121b      	asrs	r3, r3, #8
 8001524:	b2db      	uxtb	r3, r3
 8001526:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	787b      	ldrb	r3, [r7, #1]
 8001538:	4313      	orrs	r3, r2
 800153a:	b2db      	uxtb	r3, r3
 800153c:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	121b      	asrs	r3, r3, #8
 8001542:	b2db      	uxtb	r3, r3
 8001544:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001552:	7a7a      	ldrb	r2, [r7, #9]
 8001554:	78bb      	ldrb	r3, [r7, #2]
 8001556:	4313      	orrs	r3, r2
 8001558:	b2db      	uxtb	r3, r3
 800155a:	727b      	strb	r3, [r7, #9]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800155c:	1d3a      	adds	r2, r7, #4
 800155e:	2302      	movs	r3, #2
 8001560:	2114      	movs	r1, #20
 8001562:	2010      	movs	r0, #16
 8001564:	f000 f954 	bl	8001810 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	1c9a      	adds	r2, r3, #2
 800156c:	2302      	movs	r3, #2
 800156e:	2117      	movs	r1, #23
 8001570:	2010      	movs	r0, #16
 8001572:	f000 f94d 	bl	8001810 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	1d1a      	adds	r2, r3, #4
 800157a:	2302      	movs	r3, #2
 800157c:	211a      	movs	r1, #26
 800157e:	2010      	movs	r0, #16
 8001580:	f000 f946 	bl	8001810 <write_multiple_icm20948_reg>
}
 8001584:	bf00      	nop
 8001586:	3740      	adds	r7, #64	; 0x40
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	51eb851f 	.word	0x51eb851f
 8001590:	0800f4b4 	.word	0x0800f4b4

08001594 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800159e:	2101      	movs	r1, #1
 80015a0:	2020      	movs	r0, #32
 80015a2:	f000 f8b5 	bl	8001710 <read_single_icm20948_reg>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d827      	bhi.n	8001600 <icm20948_gyro_full_scale_select+0x6c>
 80015b0:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <icm20948_gyro_full_scale_select+0x24>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015d1 	.word	0x080015d1
 80015c0:	080015e1 	.word	0x080015e1
 80015c4:	080015f1 	.word	0x080015f1
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <icm20948_gyro_full_scale_select+0x80>)
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <icm20948_gyro_full_scale_select+0x84>)
 80015cc:	601a      	str	r2, [r3, #0]
			break;
 80015ce:	e017      	b.n	8001600 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <icm20948_gyro_full_scale_select+0x80>)
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <icm20948_gyro_full_scale_select+0x88>)
 80015dc:	601a      	str	r2, [r3, #0]
			break;
 80015de:	e00f      	b.n	8001600 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <icm20948_gyro_full_scale_select+0x80>)
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <icm20948_gyro_full_scale_select+0x8c>)
 80015ec:	601a      	str	r2, [r3, #0]
			break;
 80015ee:	e007      	b.n	8001600 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	f043 0306 	orr.w	r3, r3, #6
 80015f6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <icm20948_gyro_full_scale_select+0x80>)
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <icm20948_gyro_full_scale_select+0x90>)
 80015fc:	601a      	str	r2, [r3, #0]
			break;
 80015fe:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	461a      	mov	r2, r3
 8001604:	2101      	movs	r1, #1
 8001606:	2020      	movs	r0, #32
 8001608:	f000 f8ae 	bl	8001768 <write_single_icm20948_reg>
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000344 	.word	0x20000344
 8001618:	43030000 	.word	0x43030000
 800161c:	42830000 	.word	0x42830000
 8001620:	42033333 	.word	0x42033333
 8001624:	41833333 	.word	0x41833333

08001628 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001632:	2114      	movs	r1, #20
 8001634:	2020      	movs	r0, #32
 8001636:	f000 f86b 	bl	8001710 <read_single_icm20948_reg>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d82b      	bhi.n	800169c <icm20948_accel_full_scale_select+0x74>
 8001644:	a201      	add	r2, pc, #4	; (adr r2, 800164c <icm20948_accel_full_scale_select+0x24>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	0800165d 	.word	0x0800165d
 8001650:	08001667 	.word	0x08001667
 8001654:	08001679 	.word	0x08001679
 8001658:	0800168b 	.word	0x0800168b
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <icm20948_accel_full_scale_select+0x88>)
 800165e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001662:	601a      	str	r2, [r3, #0]
			break;
 8001664:	e01a      	b.n	800169c <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <icm20948_accel_full_scale_select+0x88>)
 8001670:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001674:	601a      	str	r2, [r3, #0]
			break;
 8001676:	e011      	b.n	800169c <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <icm20948_accel_full_scale_select+0x88>)
 8001682:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001686:	601a      	str	r2, [r3, #0]
			break;
 8001688:	e008      	b.n	800169c <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	f043 0306 	orr.w	r3, r3, #6
 8001690:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <icm20948_accel_full_scale_select+0x88>)
 8001694:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001698:	601a      	str	r2, [r3, #0]
			break;
 800169a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	461a      	mov	r2, r3
 80016a0:	2114      	movs	r1, #20
 80016a2:	2020      	movs	r0, #32
 80016a4:	f000 f860 	bl	8001768 <write_single_icm20948_reg>
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000348 	.word	0x20000348

080016b4 <cs_high>:


/* Static Functions */
static void cs_high()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2110      	movs	r1, #16
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f000 ff92 	bl	80025e8 <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <cs_low>:

static void cs_low()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2110      	movs	r1, #16
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f000 ff88 	bl	80025e8 <HAL_GPIO_WritePin>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80016e6:	237f      	movs	r3, #127	; 0x7f
 80016e8:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	737b      	strb	r3, [r7, #13]

	cs_low();
 80016ee:	f7ff ffeb 	bl	80016c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80016f2:	f107 010c 	add.w	r1, r7, #12
 80016f6:	230a      	movs	r3, #10
 80016f8:	2202      	movs	r2, #2
 80016fa:	4804      	ldr	r0, [pc, #16]	; (800170c <select_user_bank+0x30>)
 80016fc:	f004 fa57 	bl	8005bae <HAL_SPI_Transmit>
	cs_high();
 8001700:	f7ff ffd8 	bl	80016b4 <cs_high>
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200007c0 	.word	0x200007c0

08001710 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	460a      	mov	r2, r1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	4613      	mov	r3, r2
 800171e:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001726:	b2db      	uxtb	r3, r3
 8001728:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ffd5 	bl	80016dc <select_user_bank>

	cs_low();
 8001732:	f7ff ffc9 	bl	80016c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001736:	f107 010f 	add.w	r1, r7, #15
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	2201      	movs	r2, #1
 8001740:	4808      	ldr	r0, [pc, #32]	; (8001764 <read_single_icm20948_reg+0x54>)
 8001742:	f004 fa34 	bl	8005bae <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001746:	f107 010e 	add.w	r1, r7, #14
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	2201      	movs	r2, #1
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <read_single_icm20948_reg+0x54>)
 8001752:	f004 fba1 	bl	8005e98 <HAL_SPI_Receive>
	cs_high();
 8001756:	f7ff ffad 	bl	80016b4 <cs_high>

	return reg_val;
 800175a:	7bbb      	ldrb	r3, [r7, #14]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200007c0 	.word	0x200007c0

08001768 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
 8001772:	460b      	mov	r3, r1
 8001774:	71bb      	strb	r3, [r7, #6]
 8001776:	4613      	mov	r3, r2
 8001778:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 800177a:	79bb      	ldrb	r3, [r7, #6]
 800177c:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 800177e:	797b      	ldrb	r3, [r7, #5]
 8001780:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ffa9 	bl	80016dc <select_user_bank>

	cs_low();
 800178a:	f7ff ff9d 	bl	80016c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 800178e:	f107 010c 	add.w	r1, r7, #12
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	2202      	movs	r2, #2
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <write_single_icm20948_reg+0x44>)
 800179a:	f004 fa08 	bl	8005bae <HAL_SPI_Transmit>
	cs_high();
 800179e:	f7ff ff89 	bl	80016b4 <cs_high>
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200007c0 	.word	0x200007c0

080017b0 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	460b      	mov	r3, r1
 80017bc:	71bb      	strb	r3, [r7, #6]
 80017be:	4613      	mov	r3, r2
 80017c0:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 80017c2:	79bb      	ldrb	r3, [r7, #6]
 80017c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff84 	bl	80016dc <select_user_bank>

	cs_low();
 80017d4:	f7ff ff78 	bl	80016c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80017d8:	f107 010f 	add.w	r1, r7, #15
 80017dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e0:	2201      	movs	r2, #1
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <read_multiple_icm20948_reg+0x58>)
 80017e4:	f004 f9e3 	bl	8005bae <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80017e8:	797b      	ldrb	r3, [r7, #5]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f0:	4906      	ldr	r1, [pc, #24]	; (800180c <read_multiple_icm20948_reg+0x5c>)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <read_multiple_icm20948_reg+0x58>)
 80017f4:	f004 fb50 	bl	8005e98 <HAL_SPI_Receive>
	cs_high();
 80017f8:	f7ff ff5c 	bl	80016b4 <cs_high>

	return reg_val;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <read_multiple_icm20948_reg+0x5c>)
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200007c0 	.word	0x200007c0
 800180c:	2000034c 	.word	0x2000034c

08001810 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	603a      	str	r2, [r7, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	460b      	mov	r3, r1
 8001820:	71bb      	strb	r3, [r7, #6]
 8001822:	4613      	mov	r3, r2
 8001824:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 8001826:	79bb      	ldrb	r3, [r7, #6]
 8001828:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff55 	bl	80016dc <select_user_bank>

	cs_low();
 8001832:	f7ff ff49 	bl	80016c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8001836:	f107 010f 	add.w	r1, r7, #15
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	2201      	movs	r2, #1
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <write_multiple_icm20948_reg+0x54>)
 8001842:	f004 f9b4 	bl	8005bae <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8001846:	797b      	ldrb	r3, [r7, #5]
 8001848:	b29a      	uxth	r2, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	6839      	ldr	r1, [r7, #0]
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <write_multiple_icm20948_reg+0x54>)
 8001852:	f004 f9ac 	bl	8005bae <HAL_SPI_Transmit>
	cs_high();
 8001856:	f7ff ff2d 	bl	80016b4 <cs_high>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200007c0 	.word	0x200007c0

08001868 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001872:	228c      	movs	r2, #140	; 0x8c
 8001874:	2103      	movs	r1, #3
 8001876:	2030      	movs	r0, #48	; 0x30
 8001878:	f7ff ff76 	bl	8001768 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	461a      	mov	r2, r3
 8001880:	2104      	movs	r1, #4
 8001882:	2030      	movs	r0, #48	; 0x30
 8001884:	f7ff ff70 	bl	8001768 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001888:	2032      	movs	r0, #50	; 0x32
 800188a:	f000 fc05 	bl	8002098 <HAL_Delay>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800188e:	2281      	movs	r2, #129	; 0x81
 8001890:	2105      	movs	r1, #5
 8001892:	2030      	movs	r0, #48	; 0x30
 8001894:	f7ff ff68 	bl	8001768 <write_single_icm20948_reg>
	HAL_Delay(50);
 8001898:	2032      	movs	r0, #50	; 0x32
 800189a:	f000 fbfd 	bl	8002098 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 800189e:	213b      	movs	r1, #59	; 0x3b
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff35 	bl	8001710 <read_single_icm20948_reg>
 80018a6:	4603      	mov	r3, r0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	460a      	mov	r2, r1
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	4613      	mov	r3, r2
 80018be:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 80018c0:	220c      	movs	r2, #12
 80018c2:	2103      	movs	r1, #3
 80018c4:	2030      	movs	r0, #48	; 0x30
 80018c6:	f7ff ff4f 	bl	8001768 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	461a      	mov	r2, r3
 80018ce:	2104      	movs	r1, #4
 80018d0:	2030      	movs	r0, #48	; 0x30
 80018d2:	f7ff ff49 	bl	8001768 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	461a      	mov	r2, r3
 80018da:	2106      	movs	r1, #6
 80018dc:	2030      	movs	r0, #48	; 0x30
 80018de:	f7ff ff43 	bl	8001768 <write_single_icm20948_reg>
	//	Enable and single data write
	HAL_Delay(50);
 80018e2:	2032      	movs	r0, #50	; 0x32
 80018e4:	f000 fbd8 	bl	8002098 <HAL_Delay>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80018e8:	2281      	movs	r2, #129	; 0x81
 80018ea:	2105      	movs	r1, #5
 80018ec:	2030      	movs	r0, #48	; 0x30
 80018ee:	f7ff ff3b 	bl	8001768 <write_single_icm20948_reg>
	HAL_Delay(50);
 80018f2:	2032      	movs	r0, #50	; 0x32
 80018f4:	f000 fbd0 	bl	8002098 <HAL_Delay>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001908:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800190c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001918:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800191c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001920:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001928:	e000      	b.n	800192c <ITM_SendChar+0x2c>
    {
      __NOP();
 800192a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800192c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f9      	beq.n	800192a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001936:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b092      	sub	sp, #72	; 0x48
 8001954:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001956:	f000 fb2a 	bl	8001fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195a:	f000 f863 	bl	8001a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195e:	f7ff f923 	bl	8000ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001962:	f7ff f977 	bl	8000c54 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001966:	f000 f965 	bl	8001c34 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800196a:	f009 fac9 	bl	800af00 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800196e:	f000 f8d1 	bl	8001b14 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 8001972:	f7ff fa07 	bl	8000d84 <icm20948_init>
  ak09916_init();
 8001976:	f7ff fa33 	bl	8000de0 <ak09916_init>
//	  CDC_Transmit_FS(buffer, sizeof(buffer));
//	  HAL_Delay(1000);


	  //发出需要time的需求
	  uint8_t request[] = "Get Time from VCP!!\r\n";
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <main+0xb0>)
 800197c:	1d3c      	adds	r4, r7, #4
 800197e:	461d      	mov	r5, r3
 8001980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001984:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001988:	6020      	str	r0, [r4, #0]
 800198a:	3404      	adds	r4, #4
 800198c:	8021      	strh	r1, [r4, #0]
	  CDC_Transmit_FS(request, sizeof(request) - 1); // 注意: 使用 sizeof(request) - 1，因为我们不想发送结束字符'\0'
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2115      	movs	r1, #21
 8001992:	4618      	mov	r0, r3
 8001994:	f009 fbd2 	bl	800b13c <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8001998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199c:	f000 fb7c 	bl	8002098 <HAL_Delay>
//	  sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date, sDate.Month, sDate.Year);
//	  sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours, sTime.Minutes, sTime.Seconds);
//
//	  printf("%s", date);
//	  printf("%s", time);
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80019a0:	2200      	movs	r2, #0
 80019a2:	4918      	ldr	r1, [pc, #96]	; (8001a04 <main+0xb4>)
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <main+0xb8>)
 80019a6:	f003 ff3f 	bl	8005828 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80019aa:	2200      	movs	r2, #0
 80019ac:	4917      	ldr	r1, [pc, #92]	; (8001a0c <main+0xbc>)
 80019ae:	4816      	ldr	r0, [pc, #88]	; (8001a08 <main+0xb8>)
 80019b0:	f003 fe57 	bl	8005662 <HAL_RTC_GetTime>

	  sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date, sDate.Month, sDate.Year);
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <main+0xb4>)
 80019b6:	789b      	ldrb	r3, [r3, #2]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <main+0xb4>)
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	4619      	mov	r1, r3
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <main+0xb4>)
 80019c2:	78db      	ldrb	r3, [r3, #3]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	460b      	mov	r3, r1
 80019c8:	4911      	ldr	r1, [pc, #68]	; (8001a10 <main+0xc0>)
 80019ca:	4812      	ldr	r0, [pc, #72]	; (8001a14 <main+0xc4>)
 80019cc:	f00a fe50 	bl	800c670 <siprintf>
	  sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours, sTime.Minutes, sTime.Seconds);
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <main+0xbc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <main+0xbc>)
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	4619      	mov	r1, r3
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <main+0xbc>)
 80019de:	789b      	ldrb	r3, [r3, #2]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	460b      	mov	r3, r1
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <main+0xc8>)
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <main+0xcc>)
 80019e8:	f00a fe42 	bl	800c670 <siprintf>

	  printf("%s", date);
 80019ec:	4909      	ldr	r1, [pc, #36]	; (8001a14 <main+0xc4>)
 80019ee:	480c      	ldr	r0, [pc, #48]	; (8001a20 <main+0xd0>)
 80019f0:	f00a fdd0 	bl	800c594 <iprintf>
	  printf("%s", time);
 80019f4:	4909      	ldr	r1, [pc, #36]	; (8001a1c <main+0xcc>)
 80019f6:	480a      	ldr	r0, [pc, #40]	; (8001a20 <main+0xd0>)
 80019f8:	f00a fdcc 	bl	800c594 <iprintf>
  {
 80019fc:	e7bd      	b.n	800197a <main+0x2a>
 80019fe:	bf00      	nop
 8001a00:	0800f4ec 	.word	0x0800f4ec
 8001a04:	20000790 	.word	0x20000790
 8001a08:	20000794 	.word	0x20000794
 8001a0c:	2000077c 	.word	0x2000077c
 8001a10:	0800f4b8 	.word	0x0800f4b8
 8001a14:	2000075c 	.word	0x2000075c
 8001a18:	0800f4d0 	.word	0x0800f4d0
 8001a1c:	2000073c 	.word	0x2000073c
 8001a20:	0800f4e8 	.word	0x0800f4e8

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b096      	sub	sp, #88	; 0x58
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	2244      	movs	r2, #68	; 0x44
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00a ff42 	bl	800c8bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a4a:	f002 fca3 	bl	8004394 <HAL_PWREx_ControlVoltageScaling>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a54:	f000 f859 	bl	8001b0a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001a58:	231a      	movs	r3, #26
 8001a5a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a66:	2301      	movs	r3, #1
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001a72:	23b0      	movs	r3, #176	; 0xb0
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a76:	2302      	movs	r3, #2
 8001a78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a82:	230a      	movs	r3, #10
 8001a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fce4 	bl	8004460 <HAL_RCC_OscConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001a9e:	f000 f834 	bl	8001b0a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa2:	230f      	movs	r3, #15
 8001aa4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	2104      	movs	r1, #4
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 f932 	bl	8004d24 <HAL_RCC_ClockConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ac6:	f000 f820 	bl	8001b0a <Error_Handler>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3758      	adds	r7, #88	; 0x58
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e009      	b.n	8001af8 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	60ba      	str	r2, [r7, #8]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff07 	bl	8001900 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbf1      	blt.n	8001ae4 <_write+0x12>
	}
	return len;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0e:	b672      	cpsid	i
}
 8001b10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <Error_Handler+0x8>

08001b14 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b28:	2300      	movs	r3, #0
 8001b2a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b2e:	4a28      	ldr	r2, [pc, #160]	; (8001bd0 <MX_RTC_Init+0xbc>)
 8001b30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b3a:	227f      	movs	r2, #127	; 0x7f
 8001b3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b40:	22ff      	movs	r2, #255	; 0xff
 8001b42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b5c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b64:	4819      	ldr	r0, [pc, #100]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b66:	f003 fc4f 	bl	8005408 <HAL_RTC_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001b70:	f7ff ffcb 	bl	8001b0a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480f      	ldr	r0, [pc, #60]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001b90:	f003 fcca 	bl	8005528 <HAL_RTC_SetTime>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001b9a:	f7ff ffb6 	bl	8001b0a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_RTC_Init+0xb8>)
 8001bb6:	f003 fdb0 	bl	800571a <HAL_RTC_SetDate>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_RTC_Init+0xb0>
  {
    Error_Handler();
 8001bc0:	f7ff ffa3 	bl	8001b0a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000794 	.word	0x20000794
 8001bd0:	40002800 	.word	0x40002800

08001bd4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b090      	sub	sp, #64	; 0x40
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2234      	movs	r2, #52	; 0x34
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00a fe69 	bl	800c8bc <memset>
  if(rtcHandle->Instance==RTC)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <HAL_RTC_MspInit+0x58>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d117      	bne.n	8001c24 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 fa79 	bl	80050fc <HAL_RCCEx_PeriphCLKConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c10:	f7ff ff7b 	bl	8001b0a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_RTC_MspInit+0x5c>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <HAL_RTC_MspInit+0x5c>)
 8001c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c24:	bf00      	nop
 8001c26:	3740      	adds	r7, #64	; 0x40
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40002800 	.word	0x40002800
 8001c30:	40021000 	.word	0x40021000

08001c34 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <MX_SPI1_Init+0x78>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c56:	2202      	movs	r2, #2
 8001c58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c6a:	2218      	movs	r2, #24
 8001c6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c82:	2207      	movs	r2, #7
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_SPI1_Init+0x74>)
 8001c94:	f003 fee8 	bl	8005a68 <HAL_SPI_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c9e:	f7ff ff34 	bl	8001b0a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200007c0 	.word	0x200007c0
 8001cac:	40013000 	.word	0x40013000

08001cb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_SPI_MspInit+0x7c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d128      	bne.n	8001d24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_SPI_MspInit+0x80>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <HAL_SPI_MspInit+0x80>)
 8001cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_SPI_MspInit+0x80>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_SPI_MspInit+0x80>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_SPI_MspInit+0x80>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_SPI_MspInit+0x80>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d02:	23e0      	movs	r3, #224	; 0xe0
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d12:	2305      	movs	r3, #5
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d20:	f000 faf0 	bl	8002304 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40013000 	.word	0x40013000
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_MspInit+0x44>)
 8001d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_MspInit+0x44>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6613      	str	r3, [r2, #96]	; 0x60
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_MspInit+0x44>)
 8001d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_MspInit+0x44>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x44>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x44>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <NMI_Handler+0x4>

08001d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler+0x4>

08001d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc8:	f000 f946 	bl	8002058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <USB_IRQHandler+0x10>)
 8001dd6:	f000 fe79 	bl	8002acc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000150c 	.word	0x2000150c

08001de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_kill>:

int _kill(int pid, int sig)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfe:	f00a fdc3 	bl	800c988 <__errno>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2216      	movs	r2, #22
 8001e06:	601a      	str	r2, [r3, #0]
  return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_exit>:

void _exit (int status)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ffe7 	bl	8001df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e26:	e7fe      	b.n	8001e26 <_exit+0x12>

08001e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e00a      	b.n	8001e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e3a:	f3af 8000 	nop.w
 8001e3e:	4601      	mov	r1, r0
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	60ba      	str	r2, [r7, #8]
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbf0      	blt.n	8001e3a <_read+0x12>
  }

  return len;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_isatty>:

int _isatty(int file)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed4:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <_sbrk+0x5c>)
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <_sbrk+0x60>)
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <_sbrk+0x64>)
 8001eea:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <_sbrk+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <_sbrk+0x64>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d207      	bcs.n	8001f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001efc:	f00a fd44 	bl	800c988 <__errno>
 8001f00:	4603      	mov	r3, r0
 8001f02:	220c      	movs	r2, #12
 8001f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0a:	e009      	b.n	8001f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <_sbrk+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <_sbrk+0x64>)
 8001f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	2000a000 	.word	0x2000a000
 8001f2c:	00000400 	.word	0x00000400
 8001f30:	20000824 	.word	0x20000824
 8001f34:	20001b70 	.word	0x20001b70

08001f38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <SystemInit+0x20>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <SystemInit+0x20>)
 8001f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f60:	f7ff ffea 	bl	8001f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f66:	490d      	ldr	r1, [pc, #52]	; (8001f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <LoopForever+0xe>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f6c:	e002      	b.n	8001f74 <LoopCopyDataInit>

08001f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f72:	3304      	adds	r3, #4

08001f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f78:	d3f9      	bcc.n	8001f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f7c:	4c0a      	ldr	r4, [pc, #40]	; (8001fa8 <LoopForever+0x16>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f80:	e001      	b.n	8001f86 <LoopFillZerobss>

08001f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f84:	3204      	adds	r2, #4

08001f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f88:	d3fb      	bcc.n	8001f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f00a fd03 	bl	800c994 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f8e:	f7ff fcdf 	bl	8001950 <main>

08001f92 <LoopForever>:

LoopForever:
    b LoopForever
 8001f92:	e7fe      	b.n	8001f92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f94:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f9c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001fa0:	0800f998 	.word	0x0800f998
  ldr r2, =_sbss
 8001fa4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001fa8:	20001b70 	.word	0x20001b70

08001fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fac:	e7fe      	b.n	8001fac <ADC1_2_IRQHandler>

08001fae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 f961 	bl	8002280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fbe:	200f      	movs	r0, #15
 8001fc0:	f000 f80e 	bl	8001fe0 <HAL_InitTick>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	e001      	b.n	8001fd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd0:	f7ff feb0 	bl	8001d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_InitTick+0x6c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d023      	beq.n	800203c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_InitTick+0x70>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_InitTick+0x6c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f96d 	bl	80022ea <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d809      	bhi.n	8002030 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f000 f937 	bl	8002296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_InitTick+0x74>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e007      	b.n	8002040 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e004      	b.n	8002040 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	e001      	b.n	8002040 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000008 	.word	0x20000008
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_IncTick+0x20>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x24>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4413      	add	r3, r2
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_IncTick+0x24>)
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008
 800207c:	20000828 	.word	0x20000828

08002080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_GetTick+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000828 	.word	0x20000828

08002098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff ffee 	bl	8002080 <HAL_GetTick>
 80020a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d005      	beq.n	80020be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_Delay+0x44>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020be:	bf00      	nop
 80020c0:	f7ff ffde 	bl	8002080 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d8f7      	bhi.n	80020c0 <HAL_Delay+0x28>
  {
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000008 	.word	0x20000008

080020e0 <__NVIC_SetPriorityGrouping>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_GetPriorityGrouping>:
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_EnableIRQ>:
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db0b      	blt.n	800216e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	4907      	ldr	r1, [pc, #28]	; (800217c <__NVIC_EnableIRQ+0x38>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2001      	movs	r0, #1
 8002166:	fa00 f202 	lsl.w	r2, r0, r2
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100

08002180 <__NVIC_SetPriority>:
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	490c      	ldr	r1, [pc, #48]	; (80021cc <__NVIC_SetPriority+0x4c>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	0112      	lsls	r2, r2, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021a8:	e00a      	b.n	80021c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4908      	ldr	r1, [pc, #32]	; (80021d0 <__NVIC_SetPriority+0x50>)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3b04      	subs	r3, #4
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	440b      	add	r3, r1
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <NVIC_EncodePriority>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	bf28      	it	cs
 80021f2:	2304      	movcs	r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d902      	bls.n	8002204 <NVIC_EncodePriority+0x30>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b03      	subs	r3, #3
 8002202:	e000      	b.n	8002206 <NVIC_EncodePriority+0x32>
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43d9      	mvns	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	4313      	orrs	r3, r2
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <SysTick_Config>:
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800224c:	d301      	bcc.n	8002252 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800224e:	2301      	movs	r3, #1
 8002250:	e00f      	b.n	8002272 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002252:	4a0a      	ldr	r2, [pc, #40]	; (800227c <SysTick_Config+0x40>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225a:	210f      	movs	r1, #15
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f7ff ff8e 	bl	8002180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <SysTick_Config+0x40>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <SysTick_Config+0x40>)
 800226c:	2207      	movs	r2, #7
 800226e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	e000e010 	.word	0xe000e010

08002280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff29 	bl	80020e0 <__NVIC_SetPriorityGrouping>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022a8:	f7ff ff3e 	bl	8002128 <__NVIC_GetPriorityGrouping>
 80022ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f7ff ff8e 	bl	80021d4 <NVIC_EncodePriority>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff5d 	bl	8002180 <__NVIC_SetPriority>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff31 	bl	8002144 <__NVIC_EnableIRQ>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ffa2 	bl	800223c <SysTick_Config>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002312:	e14e      	b.n	80025b2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8140 	beq.w	80025ac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d005      	beq.n	8002344 <HAL_GPIO_Init+0x40>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d130      	bne.n	80023a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800237a:	2201      	movs	r2, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f003 0201 	and.w	r2, r3, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d017      	beq.n	80023e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d123      	bne.n	8002436 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	220f      	movs	r2, #15
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	08da      	lsrs	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3208      	adds	r2, #8
 8002430:	6939      	ldr	r1, [r7, #16]
 8002432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0203 	and.w	r2, r3, #3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 809a 	beq.w	80025ac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002478:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <HAL_GPIO_Init+0x2cc>)
 800247a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247c:	4a54      	ldr	r2, [pc, #336]	; (80025d0 <HAL_GPIO_Init+0x2cc>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6613      	str	r3, [r2, #96]	; 0x60
 8002484:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <HAL_GPIO_Init+0x2cc>)
 8002486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002490:	4a50      	ldr	r2, [pc, #320]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ba:	d013      	beq.n	80024e4 <HAL_GPIO_Init+0x1e0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a46      	ldr	r2, [pc, #280]	; (80025d8 <HAL_GPIO_Init+0x2d4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00d      	beq.n	80024e0 <HAL_GPIO_Init+0x1dc>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a45      	ldr	r2, [pc, #276]	; (80025dc <HAL_GPIO_Init+0x2d8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <HAL_GPIO_Init+0x1d8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a44      	ldr	r2, [pc, #272]	; (80025e0 <HAL_GPIO_Init+0x2dc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_GPIO_Init+0x1d4>
 80024d4:	2303      	movs	r3, #3
 80024d6:	e006      	b.n	80024e6 <HAL_GPIO_Init+0x1e2>
 80024d8:	2307      	movs	r3, #7
 80024da:	e004      	b.n	80024e6 <HAL_GPIO_Init+0x1e2>
 80024dc:	2302      	movs	r3, #2
 80024de:	e002      	b.n	80024e6 <HAL_GPIO_Init+0x1e2>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_GPIO_Init+0x1e2>
 80024e4:	2300      	movs	r3, #0
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	f002 0203 	and.w	r2, r2, #3
 80024ec:	0092      	lsls	r2, r2, #2
 80024ee:	4093      	lsls	r3, r2
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024f6:	4937      	ldr	r1, [pc, #220]	; (80025d4 <HAL_GPIO_Init+0x2d0>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002504:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_GPIO_Init+0x2e0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002528:	4a2e      	ldr	r2, [pc, #184]	; (80025e4 <HAL_GPIO_Init+0x2e0>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_GPIO_Init+0x2e0>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002552:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <HAL_GPIO_Init+0x2e0>)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_GPIO_Init+0x2e0>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800257c:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <HAL_GPIO_Init+0x2e0>)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_GPIO_Init+0x2e0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025a6:	4a0f      	ldr	r2, [pc, #60]	; (80025e4 <HAL_GPIO_Init+0x2e0>)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3301      	adds	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f aea9 	bne.w	8002314 <HAL_GPIO_Init+0x10>
  }
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000
 80025d8:	48000400 	.word	0x48000400
 80025dc:	48000800 	.word	0x48000800
 80025e0:	48000c00 	.word	0x48000c00
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002604:	e002      	b.n	800260c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e08d      	b.n	8002746 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fb48 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002668:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002678:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d107      	bne.n	8002692 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e006      	b.n	80026a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800269e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d108      	bne.n	80026ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	e007      	b.n	80026ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69d9      	ldr	r1, [r3, #28]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b20      	cmp	r3, #32
 8002762:	d138      	bne.n	80027d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800276e:	2302      	movs	r3, #2
 8002770:	e032      	b.n	80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2224      	movs	r2, #36	; 0x24
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d6:	2302      	movs	r3, #2
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d139      	bne.n	800286e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002804:	2302      	movs	r3, #2
 8002806:	e033      	b.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2224      	movs	r2, #36	; 0x24
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002836:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800287c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	af06      	add	r7, sp, #24
 8002882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0f8      	b.n	8002a80 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f008 fda4 	bl	800b3f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2203      	movs	r2, #3
 80028ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 f82d 	bl	8006914 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	687e      	ldr	r6, [r7, #4]
 80028c2:	466d      	mov	r5, sp
 80028c4:	f106 0410 	add.w	r4, r6, #16
 80028c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	602b      	str	r3, [r5, #0]
 80028d0:	1d33      	adds	r3, r6, #4
 80028d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f003 fff5 	bl	80068c4 <USB_CoreInit>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0c9      	b.n	8002a80 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 f829 	bl	800694a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	e040      	b.n	8002980 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	3301      	adds	r3, #1
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	3303      	adds	r3, #3
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	3338      	adds	r3, #56	; 0x38
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	333c      	adds	r3, #60	; 0x3c
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3340      	adds	r3, #64	; 0x40
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	3301      	adds	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	429a      	cmp	r2, r3
 8002988:	d3b9      	bcc.n	80028fe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e044      	b.n	8002a1a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	f203 1369 	addw	r3, r3, #361	; 0x169
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	3301      	adds	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d3b5      	bcc.n	8002990 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	687e      	ldr	r6, [r7, #4]
 8002a2c:	466d      	mov	r5, sp
 8002a2e:	f106 0410 	add.w	r4, r6, #16
 8002a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	1d33      	adds	r3, r6, #4
 8002a3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f003 ff90 	bl	8006964 <USB_DevInit>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e014      	b.n	8002a80 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f001 fc58 	bl	8004324 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f006 fa21 	bl	8008ec0 <USB_DevDisconnect>

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_PCD_Start+0x16>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e012      	b.n	8002ac4 <HAL_PCD_Start+0x3c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 ff1b 	bl	80068e6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f006 f9ec 	bl	8008e92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f006 fa06 	bl	8008eea <USB_ReadInterrupts>
 8002ade:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fb13 	bl	8003116 <PCD_EP_ISR_Handler>

    return;
 8002af0:	e110      	b.n	8002d14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0e:	b292      	uxth	r2, r2
 8002b10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f008 fd22 	bl	800b55e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f8fc 	bl	8002d1a <HAL_PCD_SetAddress>

    return;
 8002b22:	e0f7      	b.n	8002d14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b40:	b292      	uxth	r2, r2
 8002b42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b46:	e0e5      	b.n	8002d14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00c      	beq.n	8002b6c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b64:	b292      	uxth	r2, r2
 8002b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b6a:	e0d3      	b.n	8002d14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d034      	beq.n	8002be0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0204 	bic.w	r2, r2, #4
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0208 	bic.w	r2, r2, #8
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d107      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f008 ff80 	bl	800bac0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f008 fd05 	bl	800b5d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bd8:	b292      	uxth	r2, r2
 8002bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002bde:	e099      	b.n	8002d14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d027      	beq.n	8002c3a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0208 	orr.w	r2, r2, #8
 8002bfc:	b292      	uxth	r2, r2
 8002bfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c14:	b292      	uxth	r2, r2
 8002c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0204 	orr.w	r2, r2, #4
 8002c2c:	b292      	uxth	r2, r2
 8002c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f008 fcb2 	bl	800b59c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c38:	e06c      	b.n	8002d14 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d040      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c56:	b292      	uxth	r2, r2
 8002c58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d12b      	bne.n	8002cbe <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0204 	orr.w	r2, r2, #4
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0208 	orr.w	r2, r2, #8
 8002c90:	b292      	uxth	r2, r2
 8002c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f008 ff02 	bl	800bac0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002cbc:	e02a      	b.n	8002d14 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f008 fc6c 	bl	800b59c <HAL_PCD_SuspendCallback>
    return;
 8002cc4:	e026      	b.n	8002d14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00f      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f008 fc2a 	bl	800b542 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002cee:	e011      	b.n	8002d14 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002d12:	bf00      	nop
  }
}
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_PCD_SetAddress+0x1a>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e013      	b.n	8002d5c <HAL_PCD_SetAddress+0x42>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f006 f88c 	bl	8008e6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	70fb      	strb	r3, [r7, #3]
 8002d76:	460b      	mov	r3, r1
 8002d78:	803b      	strh	r3, [r7, #0]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da0e      	bge.n	8002da8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	705a      	strb	r2, [r3, #1]
 8002da6:	e00e      	b.n	8002dc6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 0207 	and.w	r2, r3, #7
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dd2:	883a      	ldrh	r2, [r7, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	78ba      	ldrb	r2, [r7, #2]
 8002ddc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dde:	78bb      	ldrb	r3, [r7, #2]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d102      	bne.n	8002dea <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_PCD_EP_Open+0x94>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e00e      	b.n	8002e16 <HAL_PCD_EP_Open+0xb2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fdce 	bl	80069a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002e14:	7afb      	ldrb	r3, [r7, #11]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	da0e      	bge.n	8002e50 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	705a      	strb	r2, [r3, #1]
 8002e4e:	e00e      	b.n	8002e6e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 0207 	and.w	r2, r3, #7
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_PCD_EP_Close+0x6a>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e00e      	b.n	8002ea6 <HAL_PCD_EP_Close+0x88>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f004 f94a 	bl	8007130 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
 8002ec0:	f003 0207 	and.w	r2, r3, #7
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2200      	movs	r2, #0
 8002eec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eee:	7afb      	ldrb	r3, [r7, #11]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6979      	ldr	r1, [r7, #20]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f004 fb02 	bl	800750a <USB_EPStartXfer>

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f003 0207 	and.w	r2, r3, #7
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6979      	ldr	r1, [r7, #20]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 fab3 	bl	800750a <USB_EPStartXfer>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 0207 	and.w	r2, r3, #7
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d901      	bls.n	8002fcc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e04c      	b.n	8003066 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da0e      	bge.n	8002ff2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	705a      	strb	r2, [r3, #1]
 8002ff0:	e00c      	b.n	800300c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_PCD_EP_SetStall+0x7e>
 8003028:	2302      	movs	r3, #2
 800302a:	e01c      	b.n	8003066 <HAL_PCD_EP_SetStall+0xb8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68f9      	ldr	r1, [r7, #12]
 800303a:	4618      	mov	r0, r3
 800303c:	f005 fe16 	bl	8008c6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	2b00      	cmp	r3, #0
 8003048:	d108      	bne.n	800305c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f005 ff57 	bl	8008f0a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d901      	bls.n	800308c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e040      	b.n	800310e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800308c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003090:	2b00      	cmp	r3, #0
 8003092:	da0e      	bge.n	80030b2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	705a      	strb	r2, [r3, #1]
 80030b0:	e00e      	b.n	80030d0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 0207 	and.w	r2, r3, #7
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_PCD_EP_ClrStall+0x82>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e00e      	b.n	800310e <HAL_PCD_EP_ClrStall+0xa0>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68f9      	ldr	r1, [r7, #12]
 80030fe:	4618      	mov	r0, r3
 8003100:	f005 fe05 	bl	8008d0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b096      	sub	sp, #88	; 0x58
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800311e:	e3b1      	b.n	8003884 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003128:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800312c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800313a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 8173 	bne.w	800342a <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d150      	bne.n	80031f2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	81fb      	strh	r3, [r7, #14]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	89fb      	ldrh	r3, [r7, #14]
 8003168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800316c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003170:	b29b      	uxth	r3, r3
 8003172:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3328      	adds	r3, #40	; 0x28
 8003178:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4413      	add	r3, r2
 8003194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800319e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	441a      	add	r2, r3
 80031ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031b0:	2100      	movs	r1, #0
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f008 f9ab 	bl	800b50e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 835f 	beq.w	8003884 <PCD_EP_ISR_Handler+0x76e>
 80031c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 835a 	bne.w	8003884 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b292      	uxth	r2, r2
 80031e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031f0:	e348      	b.n	8003884 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031f8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003204:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d032      	beq.n	8003276 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003218:	b29b      	uxth	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	4413      	add	r3, r2
 800322a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003236:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003244:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003248:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800324a:	b29b      	uxth	r3, r3
 800324c:	f005 feab 	bl	8008fa6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b29a      	uxth	r2, r3
 8003258:	f640 738f 	movw	r3, #3983	; 0xf8f
 800325c:	4013      	ands	r3, r2
 800325e:	823b      	strh	r3, [r7, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	8a3a      	ldrh	r2, [r7, #16]
 8003266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800326a:	b292      	uxth	r2, r2
 800326c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f008 f920 	bl	800b4b4 <HAL_PCD_SetupStageCallback>
 8003274:	e306      	b.n	8003884 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003276:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800327a:	2b00      	cmp	r3, #0
 800327c:	f280 8302 	bge.w	8003884 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29a      	uxth	r2, r3
 8003288:	f640 738f 	movw	r3, #3983	; 0xf8f
 800328c:	4013      	ands	r3, r2
 800328e:	83fb      	strh	r3, [r7, #30]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	8bfa      	ldrh	r2, [r7, #30]
 8003296:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800329a:	b292      	uxth	r2, r2
 800329c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d019      	beq.n	8003302 <PCD_EP_ISR_Handler+0x1ec>
 80032ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d015      	beq.n	8003302 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032dc:	6959      	ldr	r1, [r3, #20]
 80032de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f005 fe5d 	bl	8008fa6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	441a      	add	r2, r3
 80032f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032fa:	2100      	movs	r1, #0
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f008 f8eb 	bl	800b4d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800330c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003314:	2b00      	cmp	r3, #0
 8003316:	f040 82b5 	bne.w	8003884 <PCD_EP_ISR_Handler+0x76e>
 800331a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800331e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003322:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003326:	f000 82ad 	beq.w	8003884 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003338:	b29b      	uxth	r3, r3
 800333a:	461a      	mov	r2, r3
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4413      	add	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003354:	b29a      	uxth	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b3e      	cmp	r3, #62	; 0x3e
 8003360:	d91d      	bls.n	800339e <PCD_EP_ISR_Handler+0x288>
 8003362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
 800336a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <PCD_EP_ISR_Handler+0x266>
 8003376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003378:	3b01      	subs	r3, #1
 800337a:	647b      	str	r3, [r7, #68]	; 0x44
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29a      	uxth	r2, r3
 8003382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003384:	b29b      	uxth	r3, r3
 8003386:	029b      	lsls	r3, r3, #10
 8003388:	b29b      	uxth	r3, r3
 800338a:	4313      	orrs	r3, r2
 800338c:	b29b      	uxth	r3, r3
 800338e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003396:	b29a      	uxth	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	801a      	strh	r2, [r3, #0]
 800339c:	e026      	b.n	80033ec <PCD_EP_ISR_Handler+0x2d6>
 800339e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <PCD_EP_ISR_Handler+0x2a6>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	e017      	b.n	80033ec <PCD_EP_ISR_Handler+0x2d6>
 80033bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	647b      	str	r3, [r7, #68]	; 0x44
 80033c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <PCD_EP_ISR_Handler+0x2c0>
 80033d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d2:	3301      	adds	r3, #1
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29a      	uxth	r2, r3
 80033dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033de:	b29b      	uxth	r3, r3
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	4313      	orrs	r3, r2
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fc:	827b      	strh	r3, [r7, #18]
 80033fe:	8a7b      	ldrh	r3, [r7, #18]
 8003400:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003404:	827b      	strh	r3, [r7, #18]
 8003406:	8a7b      	ldrh	r3, [r7, #18]
 8003408:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800340c:	827b      	strh	r3, [r7, #18]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	8a7b      	ldrh	r3, [r7, #18]
 8003414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003424:	b29b      	uxth	r3, r3
 8003426:	8013      	strh	r3, [r2, #0]
 8003428:	e22c      	b.n	8003884 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800343e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003442:	2b00      	cmp	r3, #0
 8003444:	f280 80f6 	bge.w	8003634 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29a      	uxth	r2, r3
 800345a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800345e:	4013      	ands	r3, r2
 8003460:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003476:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800347a:	b292      	uxth	r2, r2
 800347c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800347e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	7b1b      	ldrb	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d123      	bne.n	80034e4 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80034c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 808e 	beq.w	80035ea <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d4:	6959      	ldr	r1, [r3, #20]
 80034d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d8:	88da      	ldrh	r2, [r3, #6]
 80034da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034de:	f005 fd62 	bl	8008fa6 <USB_ReadPMA>
 80034e2:	e082      	b.n	80035ea <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e6:	78db      	ldrb	r3, [r3, #3]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d10a      	bne.n	8003502 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034f0:	461a      	mov	r2, r3
 80034f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9d3 	bl	80038a0 <HAL_PCD_EP_DB_Receive>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003500:	e073      	b.n	80035ea <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800353a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003542:	b29b      	uxth	r3, r3
 8003544:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d022      	beq.n	80035a6 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003568:	b29b      	uxth	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	4413      	add	r3, r2
 800357a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003584:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003588:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02c      	beq.n	80035ea <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003596:	6959      	ldr	r1, [r3, #20]
 8003598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359a:	891a      	ldrh	r2, [r3, #8]
 800359c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035a0:	f005 fd01 	bl	8008fa6 <USB_ReadPMA>
 80035a4:	e021      	b.n	80035ea <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	4413      	add	r3, r2
 80035c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80035ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035dc:	6959      	ldr	r1, [r3, #20]
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	895a      	ldrh	r2, [r3, #10]
 80035e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035e6:	f005 fcde 	bl	8008fa6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035f2:	441a      	add	r2, r3
 80035f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003600:	441a      	add	r2, r3
 8003602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003604:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <PCD_EP_ISR_Handler+0x504>
 800360e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d206      	bcs.n	8003628 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800361a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f007 ff59 	bl	800b4d8 <HAL_PCD_DataOutStageCallback>
 8003626:	e005      	b.n	8003634 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800362e:	4618      	mov	r0, r3
 8003630:	f003 ff6b 	bl	800750a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003634:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8121 	beq.w	8003884 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8003642:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800366c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003670:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800368e:	b29b      	uxth	r3, r3
 8003690:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003694:	78db      	ldrb	r3, [r3, #3]
 8003696:	2b01      	cmp	r3, #1
 8003698:	f040 80a2 	bne.w	80037e0 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	2200      	movs	r2, #0
 80036a0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80036a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a4:	7b1b      	ldrb	r3, [r3, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8093 	beq.w	80037d2 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d046      	beq.n	8003746 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d126      	bne.n	800370e <PCD_EP_ISR_Handler+0x5f8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	4413      	add	r3, r2
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
 80036d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	00da      	lsls	r2, r3, #3
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	4413      	add	r3, r2
 80036e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	801a      	strh	r2, [r3, #0]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003706:	b29a      	uxth	r2, r3
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	e061      	b.n	80037d2 <PCD_EP_ISR_Handler+0x6bc>
 800370e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003710:	785b      	ldrb	r3, [r3, #1]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d15d      	bne.n	80037d2 <PCD_EP_ISR_Handler+0x6bc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	4413      	add	r3, r2
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	00da      	lsls	r2, r3, #3
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	4413      	add	r3, r2
 8003738:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	2200      	movs	r2, #0
 8003742:	801a      	strh	r2, [r3, #0]
 8003744:	e045      	b.n	80037d2 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d126      	bne.n	80037a2 <PCD_EP_ISR_Handler+0x68c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	637b      	str	r3, [r7, #52]	; 0x34
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003762:	b29b      	uxth	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	4413      	add	r3, r2
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
 800376c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	00da      	lsls	r2, r3, #3
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003774:	4413      	add	r3, r2
 8003776:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800377a:	633b      	str	r3, [r7, #48]	; 0x30
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003786:	b29a      	uxth	r2, r3
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	801a      	strh	r2, [r3, #0]
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379a:	b29a      	uxth	r2, r3
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	801a      	strh	r2, [r3, #0]
 80037a0:	e017      	b.n	80037d2 <PCD_EP_ISR_Handler+0x6bc>
 80037a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a4:	785b      	ldrb	r3, [r3, #1]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d113      	bne.n	80037d2 <PCD_EP_ISR_Handler+0x6bc>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b8:	4413      	add	r3, r2
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	00da      	lsls	r2, r3, #3
 80037c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c4:	4413      	add	r3, r2
 80037c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	2200      	movs	r2, #0
 80037d0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f007 fe98 	bl	800b50e <HAL_PCD_DataInStageCallback>
 80037de:	e051      	b.n	8003884 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d144      	bne.n	8003876 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	4413      	add	r3, r2
 8003806:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003810:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800381c:	429a      	cmp	r2, r3
 800381e:	d907      	bls.n	8003830 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8003820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003828:	1ad2      	subs	r2, r2, r3
 800382a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800382c:	619a      	str	r2, [r3, #24]
 800382e:	e002      	b.n	8003836 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8003830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800383e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	4619      	mov	r1, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f007 fe62 	bl	800b50e <HAL_PCD_DataInStageCallback>
 800384a:	e01b      	b.n	8003884 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003854:	441a      	add	r2, r3
 8003856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003858:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800385a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003862:	441a      	add	r2, r3
 8003864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003866:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800386e:	4618      	mov	r0, r3
 8003870:	f003 fe4b 	bl	800750a <USB_EPStartXfer>
 8003874:	e006      	b.n	8003884 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003876:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800387a:	461a      	mov	r2, r3
 800387c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f917 	bl	8003ab2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800388c:	b29b      	uxth	r3, r3
 800388e:	b21b      	sxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	f6ff ac45 	blt.w	8003120 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3758      	adds	r7, #88	; 0x58
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d07c      	beq.n	80039b2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	4413      	add	r3, r2
 80038d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	8b7b      	ldrh	r3, [r7, #26]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d306      	bcc.n	80038f6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	8b7b      	ldrh	r3, [r7, #26]
 80038ee:	1ad2      	subs	r2, r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	619a      	str	r2, [r3, #24]
 80038f4:	e002      	b.n	80038fc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2200      	movs	r2, #0
 80038fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d123      	bne.n	800394c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	833b      	strh	r3, [r7, #24]
 8003920:	8b3b      	ldrh	r3, [r7, #24]
 8003922:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003926:	833b      	strh	r3, [r7, #24]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	8b3b      	ldrh	r3, [r7, #24]
 8003938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800393c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	b29b      	uxth	r3, r3
 800394a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01f      	beq.n	8003996 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	82fb      	strh	r3, [r7, #22]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	441a      	add	r2, r3
 8003980:	8afb      	ldrh	r3, [r7, #22]
 8003982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800398a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003992:	b29b      	uxth	r3, r3
 8003994:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003996:	8b7b      	ldrh	r3, [r7, #26]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8085 	beq.w	8003aa8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6959      	ldr	r1, [r3, #20]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	891a      	ldrh	r2, [r3, #8]
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
 80039ac:	f005 fafb 	bl	8008fa6 <USB_ReadPMA>
 80039b0:	e07a      	b.n	8003aa8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	8b7b      	ldrh	r3, [r7, #26]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d306      	bcc.n	80039f0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	8b7b      	ldrh	r3, [r7, #26]
 80039e8:	1ad2      	subs	r2, r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	619a      	str	r2, [r3, #24]
 80039ee:	e002      	b.n	80039f6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d123      	bne.n	8003a46 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a18:	83fb      	strh	r3, [r7, #30]
 8003a1a:	8bfb      	ldrh	r3, [r7, #30]
 8003a1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a20:	83fb      	strh	r3, [r7, #30]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	441a      	add	r2, r3
 8003a30:	8bfb      	ldrh	r3, [r7, #30]
 8003a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11f      	bne.n	8003a90 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	83bb      	strh	r3, [r7, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	441a      	add	r2, r3
 8003a7a:	8bbb      	ldrh	r3, [r7, #28]
 8003a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a90:	8b7b      	ldrh	r3, [r7, #26]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6959      	ldr	r1, [r3, #20]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	895a      	ldrh	r2, [r3, #10]
 8003aa2:	8b7b      	ldrh	r3, [r7, #26]
 8003aa4:	f005 fa7f 	bl	8008fa6 <USB_ReadPMA>
    }
  }

  return count;
 8003aa8:	8b7b      	ldrh	r3, [r7, #26]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b0a4      	sub	sp, #144	; 0x90
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	4613      	mov	r3, r2
 8003abe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 81db 	beq.w	8003e82 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d907      	bls.n	8003b10 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003b08:	1ad2      	subs	r2, r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	619a      	str	r2, [r3, #24]
 8003b0e:	e002      	b.n	8003b16 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 80b9 	bne.w	8003c92 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d126      	bne.n	8003b76 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	4413      	add	r3, r2
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	00da      	lsls	r2, r3, #3
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	4413      	add	r3, r2
 8003b4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	801a      	strh	r2, [r3, #0]
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	801a      	strh	r2, [r3, #0]
 8003b74:	e01a      	b.n	8003bac <HAL_PCD_EP_DB_Transmit+0xfa>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d116      	bne.n	8003bac <HAL_PCD_EP_DB_Transmit+0xfa>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	4413      	add	r3, r2
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	00da      	lsls	r2, r3, #3
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	2200      	movs	r2, #0
 8003baa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	785b      	ldrb	r3, [r3, #1]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d126      	bne.n	8003c08 <HAL_PCD_EP_DB_Transmit+0x156>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	00da      	lsls	r2, r3, #3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	e017      	b.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x186>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d113      	bne.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x186>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	4413      	add	r3, r2
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	00da      	lsls	r2, r3, #3
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c30:	623b      	str	r3, [r7, #32]
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2200      	movs	r2, #0
 8003c36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f007 fc65 	bl	800b50e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 82fa 	beq.w	8004244 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	82fb      	strh	r3, [r7, #22]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	441a      	add	r2, r3
 8003c7a:	8afb      	ldrh	r3, [r7, #22]
 8003c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	8013      	strh	r3, [r2, #0]
 8003c90:	e2d8      	b.n	8004244 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d021      	beq.n	8003ce0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	441a      	add	r2, r3
 8003cc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	f040 82ac 	bne.w	8004244 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003cf4:	441a      	add	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d02:	441a      	add	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d30b      	bcc.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6a1a      	ldr	r2, [r3, #32]
 8003d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d24:	1ad2      	subs	r2, r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	621a      	str	r2, [r3, #32]
 8003d2a:	e017      	b.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d108      	bne.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003d34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003d38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d44:	e00a      	b.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d165      	bne.n	8003e30 <HAL_PCD_EP_DB_Transmit+0x37e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d78:	4413      	add	r3, r2
 8003d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	00da      	lsls	r2, r3, #3
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	4413      	add	r3, r2
 8003d86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	801a      	strh	r2, [r3, #0]
 8003d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003da0:	2b3e      	cmp	r3, #62	; 0x3e
 8003da2:	d91d      	bls.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x30c>
 8003db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	029b      	lsls	r3, r3, #10
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	801a      	strh	r2, [r3, #0]
 8003dde:	e044      	b.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <HAL_PCD_EP_DB_Transmit+0x34c>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	801a      	strh	r2, [r3, #0]
 8003dfc:	e035      	b.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x366>
 8003e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e14:	3301      	adds	r3, #1
 8003e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	029b      	lsls	r3, r3, #10
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	e01c      	b.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d118      	bne.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4c:	4413      	add	r3, r2
 8003e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00da      	lsls	r2, r3, #3
 8003e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e58:	4413      	add	r3, r2
 8003e5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e68:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6959      	ldr	r1, [r3, #20]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	891a      	ldrh	r2, [r3, #8]
 8003e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f005 f851 	bl	8008f22 <USB_WritePMA>
 8003e80:	e1e0      	b.n	8004244 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d307      	bcc.n	8003ec6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ebe:	1ad2      	subs	r2, r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	619a      	str	r2, [r3, #24]
 8003ec4:	e002      	b.n	8003ecc <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 80c0 	bne.w	8004056 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	785b      	ldrb	r3, [r3, #1]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d126      	bne.n	8003f2c <HAL_PCD_EP_DB_Transmit+0x47a>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ef2:	4413      	add	r3, r2
 8003ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	00da      	lsls	r2, r3, #3
 8003efc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003efe:	4413      	add	r3, r2
 8003f00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f14:	801a      	strh	r2, [r3, #0]
 8003f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	e01a      	b.n	8003f62 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d116      	bne.n	8003f62 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	667b      	str	r3, [r7, #100]	; 0x64
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f48:	4413      	add	r3, r2
 8003f4a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	00da      	lsls	r2, r3, #3
 8003f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f54:	4413      	add	r3, r2
 8003f56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5e:	2200      	movs	r2, #0
 8003f60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	677b      	str	r3, [r7, #116]	; 0x74
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d12b      	bne.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x516>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f84:	4413      	add	r3, r2
 8003f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	00da      	lsls	r2, r3, #3
 8003f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f90:	4413      	add	r3, r2
 8003f92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fc4:	801a      	strh	r2, [r3, #0]
 8003fc6:	e017      	b.n	8003ff8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	785b      	ldrb	r3, [r3, #1]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d113      	bne.n	8003ff8 <HAL_PCD_EP_DB_Transmit+0x546>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fde:	4413      	add	r3, r2
 8003fe0:	677b      	str	r3, [r7, #116]	; 0x74
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	00da      	lsls	r2, r3, #3
 8003fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fea:	4413      	add	r3, r2
 8003fec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ff0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f007 fa85 	bl	800b50e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 811a 	bne.w	8004244 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800404c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004050:	b29b      	uxth	r3, r3
 8004052:	8013      	strh	r3, [r2, #0]
 8004054:	e0f6      	b.n	8004244 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d121      	bne.n	80040a4 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800409c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	f040 80ca 	bne.w	8004244 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040b8:	441a      	add	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040c6:	441a      	add	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	6a1a      	ldr	r2, [r3, #32]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d30b      	bcc.n	80040f0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6a1a      	ldr	r2, [r3, #32]
 80040e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040e8:	1ad2      	subs	r2, r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	621a      	str	r2, [r3, #32]
 80040ee:	e017      	b.n	8004120 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d108      	bne.n	800410a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80040f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80040fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004108:	e00a      	b.n	8004120 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2200      	movs	r2, #0
 8004116:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	657b      	str	r3, [r7, #84]	; 0x54
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d165      	bne.n	80041fa <HAL_PCD_EP_DB_Transmit+0x748>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413c:	b29b      	uxth	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004142:	4413      	add	r3, r2
 8004144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	00da      	lsls	r2, r3, #3
 800414c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414e:	4413      	add	r3, r2
 8004150:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004154:	65bb      	str	r3, [r7, #88]	; 0x58
 8004156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004160:	b29a      	uxth	r2, r3
 8004162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800416a:	2b3e      	cmp	r3, #62	; 0x3e
 800416c:	d91d      	bls.n	80041aa <HAL_PCD_EP_DB_Transmit+0x6f8>
 800416e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	66bb      	str	r3, [r7, #104]	; 0x68
 8004176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004184:	3b01      	subs	r3, #1
 8004186:	66bb      	str	r3, [r7, #104]	; 0x68
 8004188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29a      	uxth	r2, r3
 800418e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004190:	b29b      	uxth	r3, r3
 8004192:	029b      	lsls	r3, r3, #10
 8004194:	b29b      	uxth	r3, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	b29b      	uxth	r3, r3
 800419a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800419e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a6:	801a      	strh	r2, [r3, #0]
 80041a8:	e041      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x77c>
 80041aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_PCD_EP_DB_Transmit+0x716>
 80041b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	e032      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x77c>
 80041c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80041d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_PCD_EP_DB_Transmit+0x730>
 80041dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041de:	3301      	adds	r3, #1
 80041e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	029b      	lsls	r3, r3, #10
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	e019      	b.n	800422e <HAL_PCD_EP_DB_Transmit+0x77c>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d115      	bne.n	800422e <HAL_PCD_EP_DB_Transmit+0x77c>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004210:	4413      	add	r3, r2
 8004212:	657b      	str	r3, [r7, #84]	; 0x54
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	00da      	lsls	r2, r3, #3
 800421a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421c:	4413      	add	r3, r2
 800421e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004222:	653b      	str	r3, [r7, #80]	; 0x50
 8004224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004228:	b29a      	uxth	r2, r3
 800422a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6959      	ldr	r1, [r3, #20]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	895a      	ldrh	r2, [r3, #10]
 800423a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800423e:	b29b      	uxth	r3, r3
 8004240:	f004 fe6f 	bl	8008f22 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425e:	82bb      	strh	r3, [r7, #20]
 8004260:	8abb      	ldrh	r3, [r7, #20]
 8004262:	f083 0310 	eor.w	r3, r3, #16
 8004266:	82bb      	strh	r3, [r7, #20]
 8004268:	8abb      	ldrh	r3, [r7, #20]
 800426a:	f083 0320 	eor.w	r3, r3, #32
 800426e:	82bb      	strh	r3, [r7, #20]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	441a      	add	r2, r3
 800427e:	8abb      	ldrh	r3, [r7, #20]
 8004280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004290:	b29b      	uxth	r3, r3
 8004292:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3790      	adds	r7, #144	; 0x90
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800429e:	b480      	push	{r7}
 80042a0:	b087      	sub	sp, #28
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	817b      	strh	r3, [r7, #10]
 80042ac:	4613      	mov	r3, r2
 80042ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042b0:	897b      	ldrh	r3, [r7, #10]
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00b      	beq.n	80042d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042bc:	897b      	ldrh	r3, [r7, #10]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e009      	b.n	80042e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042d4:	897a      	ldrh	r2, [r7, #10]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042e8:	893b      	ldrh	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d107      	bne.n	80042fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2200      	movs	r2, #0
 80042f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	80da      	strh	r2, [r3, #6]
 80042fc:	e00b      	b.n	8004316 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2201      	movs	r2, #1
 8004302:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	b29a      	uxth	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	0c1b      	lsrs	r3, r3, #16
 8004310:	b29a      	uxth	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004348:	b29b      	uxth	r3, r3
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800435c:	b29b      	uxth	r3, r3
 800435e:	f043 0302 	orr.w	r3, r3, #2
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_PWREx_GetVoltageRange+0x18>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40007000 	.word	0x40007000

08004394 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a2:	d130      	bne.n	8004406 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	d038      	beq.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b2:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2232      	movs	r2, #50	; 0x32
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0c9b      	lsrs	r3, r3, #18
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d8:	e002      	b.n	80043e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b01      	subs	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ec:	d102      	bne.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f2      	bne.n	80043da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004400:	d110      	bne.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e00f      	b.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d007      	beq.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004414:	4b07      	ldr	r3, [pc, #28]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800441c:	4a05      	ldr	r2, [pc, #20]	; (8004434 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004422:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40007000 	.word	0x40007000
 8004438:	20000000 	.word	0x20000000
 800443c:	431bde83 	.word	0x431bde83

08004440 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_PWREx_EnableVddUSB+0x1c>)
 800444a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444e:	6053      	str	r3, [r2, #4]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f000 bc4f 	b.w	8004d12 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004474:	4b97      	ldr	r3, [pc, #604]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447e:	4b95      	ldr	r3, [pc, #596]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80e6 	beq.w	8004662 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_RCC_OscConfig+0x4c>
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	f040 808d 	bne.w	80045be <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	f040 8089 	bne.w	80045be <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ac:	4b89      	ldr	r3, [pc, #548]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d006      	beq.n	80044c6 <HAL_RCC_OscConfig+0x66>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f000 bc26 	b.w	8004d12 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ca:	4b82      	ldr	r3, [pc, #520]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <HAL_RCC_OscConfig+0x80>
 80044d6:	4b7f      	ldr	r3, [pc, #508]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044de:	e005      	b.n	80044ec <HAL_RCC_OscConfig+0x8c>
 80044e0:	4b7c      	ldr	r3, [pc, #496]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80044e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d224      	bcs.n	800453a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fda1 	bl	800503c <RCC_SetFlashLatencyFromMSIRange>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	f000 bc06 	b.w	8004d12 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004506:	4b73      	ldr	r3, [pc, #460]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a72      	ldr	r2, [pc, #456]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 800450c:	f043 0308 	orr.w	r3, r3, #8
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b70      	ldr	r3, [pc, #448]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	496d      	ldr	r1, [pc, #436]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004524:	4b6b      	ldr	r3, [pc, #428]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	4968      	ldr	r1, [pc, #416]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
 8004538:	e025      	b.n	8004586 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800453a:	4b66      	ldr	r3, [pc, #408]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a65      	ldr	r2, [pc, #404]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004540:	f043 0308 	orr.w	r3, r3, #8
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b63      	ldr	r3, [pc, #396]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	4960      	ldr	r1, [pc, #384]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004558:	4b5e      	ldr	r3, [pc, #376]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	495b      	ldr	r1, [pc, #364]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fd60 	bl	800503c <RCC_SetFlashLatencyFromMSIRange>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e3c5      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004586:	f000 fccd 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 800458a:	4602      	mov	r2, r0
 800458c:	4b51      	ldr	r3, [pc, #324]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	4950      	ldr	r1, [pc, #320]	; (80046d8 <HAL_RCC_OscConfig+0x278>)
 8004598:	5ccb      	ldrb	r3, [r1, r3]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	fa22 f303 	lsr.w	r3, r2, r3
 80045a2:	4a4e      	ldr	r2, [pc, #312]	; (80046dc <HAL_RCC_OscConfig+0x27c>)
 80045a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045a6:	4b4e      	ldr	r3, [pc, #312]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fd18 	bl	8001fe0 <HAL_InitTick>
 80045b0:	4603      	mov	r3, r0
 80045b2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d052      	beq.n	8004660 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	e3a9      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d032      	beq.n	800462c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c6:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a42      	ldr	r2, [pc, #264]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045d2:	f7fd fd55 	bl	8002080 <HAL_GetTick>
 80045d6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045da:	f7fd fd51 	bl	8002080 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e392      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ec:	4b39      	ldr	r3, [pc, #228]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f8:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a35      	ldr	r2, [pc, #212]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80045fe:	f043 0308 	orr.w	r3, r3, #8
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	4930      	ldr	r1, [pc, #192]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004616:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	492b      	ldr	r1, [pc, #172]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004626:	4313      	orrs	r3, r2
 8004628:	604b      	str	r3, [r1, #4]
 800462a:	e01a      	b.n	8004662 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800462c:	4b29      	ldr	r3, [pc, #164]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a28      	ldr	r2, [pc, #160]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004638:	f7fd fd22 	bl	8002080 <HAL_GetTick>
 800463c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004640:	f7fd fd1e 	bl	8002080 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e35f      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004652:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x1e0>
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004660:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d073      	beq.n	8004756 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d005      	beq.n	8004680 <HAL_RCC_OscConfig+0x220>
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d10e      	bne.n	8004698 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d10b      	bne.n	8004698 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004680:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d063      	beq.n	8004754 <HAL_RCC_OscConfig+0x2f4>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d15f      	bne.n	8004754 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e33c      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a0:	d106      	bne.n	80046b0 <HAL_RCC_OscConfig+0x250>
 80046a2:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a0b      	ldr	r2, [pc, #44]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80046a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e025      	b.n	80046fc <HAL_RCC_OscConfig+0x29c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b8:	d114      	bne.n	80046e4 <HAL_RCC_OscConfig+0x284>
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80046c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a02      	ldr	r2, [pc, #8]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 80046cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e013      	b.n	80046fc <HAL_RCC_OscConfig+0x29c>
 80046d4:	40021000 	.word	0x40021000
 80046d8:	0800f5c8 	.word	0x0800f5c8
 80046dc:	20000000 	.word	0x20000000
 80046e0:	20000004 	.word	0x20000004
 80046e4:	4b8f      	ldr	r3, [pc, #572]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a8e      	ldr	r2, [pc, #568]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b8c      	ldr	r3, [pc, #560]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a8b      	ldr	r2, [pc, #556]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80046f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd fcbc 	bl	8002080 <HAL_GetTick>
 8004708:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470c:	f7fd fcb8 	bl	8002080 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e2f9      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800471e:	4b81      	ldr	r3, [pc, #516]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x2ac>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fd fca8 	bl	8002080 <HAL_GetTick>
 8004730:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004734:	f7fd fca4 	bl	8002080 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e2e5      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004746:	4b77      	ldr	r3, [pc, #476]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x2d4>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d060      	beq.n	8004824 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d005      	beq.n	8004774 <HAL_RCC_OscConfig+0x314>
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d119      	bne.n	80047a2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d116      	bne.n	80047a2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004774:	4b6b      	ldr	r3, [pc, #428]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_RCC_OscConfig+0x32c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e2c2      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b65      	ldr	r3, [pc, #404]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	4962      	ldr	r1, [pc, #392]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	4313      	orrs	r3, r2
 800479e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a0:	e040      	b.n	8004824 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d023      	beq.n	80047f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047aa:	4b5e      	ldr	r3, [pc, #376]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a5d      	ldr	r2, [pc, #372]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fd fc63 	bl	8002080 <HAL_GetTick>
 80047ba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047be:	f7fd fc5f 	bl	8002080 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e2a0      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d0:	4b54      	ldr	r3, [pc, #336]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b51      	ldr	r3, [pc, #324]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	494e      	ldr	r1, [pc, #312]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
 80047f0:	e018      	b.n	8004824 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f2:	4b4c      	ldr	r3, [pc, #304]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a4b      	ldr	r2, [pc, #300]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fd fc3f 	bl	8002080 <HAL_GetTick>
 8004802:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004806:	f7fd fc3b 	bl	8002080 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e27c      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004818:	4b42      	ldr	r3, [pc, #264]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f0      	bne.n	8004806 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8082 	beq.w	8004936 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d05f      	beq.n	80048fa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800483a:	4b3a      	ldr	r3, [pc, #232]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004840:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	429a      	cmp	r2, r3
 800484e:	d037      	beq.n	80048c0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d006      	beq.n	8004868 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e254      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01b      	beq.n	80048aa <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8004872:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 8004874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004878:	4a2a      	ldr	r2, [pc, #168]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004882:	f7fd fbfd 	bl	8002080 <HAL_GetTick>
 8004886:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488a:	f7fd fbf9 	bl	8002080 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b11      	cmp	r3, #17
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e23a      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800489c:	4b21      	ldr	r3, [pc, #132]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 800489e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ef      	bne.n	800488a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80048aa:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b0:	f023 0210 	bic.w	r2, r3, #16
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	491a      	ldr	r1, [pc, #104]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c0:	4b18      	ldr	r3, [pc, #96]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80048c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c6:	4a17      	ldr	r2, [pc, #92]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fd fbd6 	bl	8002080 <HAL_GetTick>
 80048d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fd fbd2 	bl	8002080 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b11      	cmp	r3, #17
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e213      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ea:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80048ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0ef      	beq.n	80048d8 <HAL_RCC_OscConfig+0x478>
 80048f8:	e01d      	b.n	8004936 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004900:	4a08      	ldr	r2, [pc, #32]	; (8004924 <HAL_RCC_OscConfig+0x4c4>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fd fbb9 	bl	8002080 <HAL_GetTick>
 800490e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004912:	f7fd fbb5 	bl	8002080 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b11      	cmp	r3, #17
 800491e:	d903      	bls.n	8004928 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e1f6      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
 8004924:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004928:	4ba9      	ldr	r3, [pc, #676]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 800492a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ed      	bne.n	8004912 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80bd 	beq.w	8004abe <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004944:	2300      	movs	r3, #0
 8004946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800494a:	4ba1      	ldr	r3, [pc, #644]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10e      	bne.n	8004974 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	4b9e      	ldr	r3, [pc, #632]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	4a9d      	ldr	r2, [pc, #628]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6593      	str	r3, [r2, #88]	; 0x58
 8004962:	4b9b      	ldr	r3, [pc, #620]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004974:	4b97      	ldr	r3, [pc, #604]	; (8004bd4 <HAL_RCC_OscConfig+0x774>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d118      	bne.n	80049b2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004980:	4b94      	ldr	r3, [pc, #592]	; (8004bd4 <HAL_RCC_OscConfig+0x774>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a93      	ldr	r2, [pc, #588]	; (8004bd4 <HAL_RCC_OscConfig+0x774>)
 8004986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498c:	f7fd fb78 	bl	8002080 <HAL_GetTick>
 8004990:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004994:	f7fd fb74 	bl	8002080 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e1b5      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a6:	4b8b      	ldr	r3, [pc, #556]	; (8004bd4 <HAL_RCC_OscConfig+0x774>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d02c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80049be:	4b84      	ldr	r3, [pc, #528]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	497f      	ldr	r1, [pc, #508]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d010      	beq.n	8004a06 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049e4:	4b7a      	ldr	r3, [pc, #488]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	4a79      	ldr	r2, [pc, #484]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049f4:	4b76      	ldr	r3, [pc, #472]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	4a75      	ldr	r2, [pc, #468]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a04:	e018      	b.n	8004a38 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a06:	4b72      	ldr	r3, [pc, #456]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	4a70      	ldr	r2, [pc, #448]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a16:	e00f      	b.n	8004a38 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a18:	4b6d      	ldr	r3, [pc, #436]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	4a6c      	ldr	r2, [pc, #432]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a28:	4b69      	ldr	r3, [pc, #420]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	4a68      	ldr	r2, [pc, #416]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d016      	beq.n	8004a6e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fd fb1e 	bl	8002080 <HAL_GetTick>
 8004a44:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fd fb1a 	bl	8002080 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e159      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5e:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ed      	beq.n	8004a48 <HAL_RCC_OscConfig+0x5e8>
 8004a6c:	e01d      	b.n	8004aaa <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6e:	f7fd fb07 	bl	8002080 <HAL_GetTick>
 8004a72:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fd fb03 	bl	8002080 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e142      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a8c:	4b50      	ldr	r3, [pc, #320]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ed      	bne.n	8004a76 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004a9a:	4b4d      	ldr	r3, [pc, #308]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	4a4b      	ldr	r2, [pc, #300]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d105      	bne.n	8004abe <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab2:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	4a46      	ldr	r2, [pc, #280]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004abc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03c      	beq.n	8004b44 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01c      	beq.n	8004b0c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad8:	4a3d      	ldr	r2, [pc, #244]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae2:	f7fd facd 	bl	8002080 <HAL_GetTick>
 8004ae6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aea:	f7fd fac9 	bl	8002080 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e10a      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004afc:	4b34      	ldr	r3, [pc, #208]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0ef      	beq.n	8004aea <HAL_RCC_OscConfig+0x68a>
 8004b0a:	e01b      	b.n	8004b44 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b0c:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b12:	4a2f      	ldr	r2, [pc, #188]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fd fab0 	bl	8002080 <HAL_GetTick>
 8004b20:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b24:	f7fd faac 	bl	8002080 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e0ed      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b36:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ef      	bne.n	8004b24 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80e1 	beq.w	8004d10 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	f040 80b5 	bne.w	8004cc2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f003 0203 	and.w	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d124      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b76:	3b01      	subs	r3, #1
 8004b78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d11b      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d113      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d109      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d05f      	beq.n	8004c76 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d05a      	beq.n	8004c72 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a03      	ldr	r2, [pc, #12]	; (8004bd0 <HAL_RCC_OscConfig+0x770>)
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bc8:	f7fd fa5a 	bl	8002080 <HAL_GetTick>
 8004bcc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bce:	e00c      	b.n	8004bea <HAL_RCC_OscConfig+0x78a>
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fd fa52 	bl	8002080 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e093      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bea:	4b4c      	ldr	r3, [pc, #304]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf6:	4b49      	ldr	r3, [pc, #292]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <HAL_RCC_OscConfig+0x8c0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c06:	3a01      	subs	r2, #1
 8004c08:	0112      	lsls	r2, r2, #4
 8004c0a:	4311      	orrs	r1, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c10:	0212      	lsls	r2, r2, #8
 8004c12:	4311      	orrs	r1, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c18:	0852      	lsrs	r2, r2, #1
 8004c1a:	3a01      	subs	r2, #1
 8004c1c:	0552      	lsls	r2, r2, #21
 8004c1e:	4311      	orrs	r1, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c24:	0852      	lsrs	r2, r2, #1
 8004c26:	3a01      	subs	r2, #1
 8004c28:	0652      	lsls	r2, r2, #25
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	493b      	ldr	r1, [pc, #236]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c32:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c3c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c3e:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	4a36      	ldr	r2, [pc, #216]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c48:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c4a:	f7fd fa19 	bl	8002080 <HAL_GetTick>
 8004c4e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fd fa15 	bl	8002080 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e056      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c64:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c70:	e04e      	b.n	8004d10 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e04d      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c76:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d146      	bne.n	8004d10 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c82:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a25      	ldr	r2, [pc, #148]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c8c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4a22      	ldr	r2, [pc, #136]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c98:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c9a:	f7fd f9f1 	bl	8002080 <HAL_GetTick>
 8004c9e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fd f9ed 	bl	8002080 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e02e      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb4:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x842>
 8004cc0:	e026      	b.n	8004d10 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	2b0c      	cmp	r3, #12
 8004cc6:	d021      	beq.n	8004d0c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc8:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fd f9d4 	bl	8002080 <HAL_GetTick>
 8004cd8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd f9d0 	bl	8002080 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e011      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <HAL_RCC_OscConfig+0x8bc>)
 8004d00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d04:	f023 0303 	bic.w	r3, r3, #3
 8004d08:	60d3      	str	r3, [r2, #12]
 8004d0a:	e001      	b.n	8004d10 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	f99f808c 	.word	0xf99f808c

08004d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0e7      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d38:	4b75      	ldr	r3, [pc, #468]	; (8004f10 <HAL_RCC_ClockConfig+0x1ec>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d910      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b72      	ldr	r3, [pc, #456]	; (8004f10 <HAL_RCC_ClockConfig+0x1ec>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 0207 	bic.w	r2, r3, #7
 8004d4e:	4970      	ldr	r1, [pc, #448]	; (8004f10 <HAL_RCC_ClockConfig+0x1ec>)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b6e      	ldr	r3, [pc, #440]	; (8004f10 <HAL_RCC_ClockConfig+0x1ec>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0cf      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d010      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	4b66      	ldr	r3, [pc, #408]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d908      	bls.n	8004d96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4b63      	ldr	r3, [pc, #396]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4960      	ldr	r1, [pc, #384]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d04c      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004daa:	4b5a      	ldr	r3, [pc, #360]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d121      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e0a6      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d107      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dc2:	4b54      	ldr	r3, [pc, #336]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d115      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e09a      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dda:	4b4e      	ldr	r3, [pc, #312]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e08e      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dea:	4b4a      	ldr	r3, [pc, #296]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e086      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dfa:	4b46      	ldr	r3, [pc, #280]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f023 0203 	bic.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4943      	ldr	r1, [pc, #268]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0c:	f7fd f938 	bl	8002080 <HAL_GetTick>
 8004e10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e12:	e00a      	b.n	8004e2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e14:	f7fd f934 	bl	8002080 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e06e      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	4b3a      	ldr	r3, [pc, #232]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 020c 	and.w	r2, r3, #12
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d1eb      	bne.n	8004e14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d208      	bcs.n	8004e6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e58:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	492b      	ldr	r1, [pc, #172]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e6a:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <HAL_RCC_ClockConfig+0x1ec>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d210      	bcs.n	8004e9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <HAL_RCC_ClockConfig+0x1ec>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 0207 	bic.w	r2, r3, #7
 8004e80:	4923      	ldr	r1, [pc, #140]	; (8004f10 <HAL_RCC_ClockConfig+0x1ec>)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e88:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <HAL_RCC_ClockConfig+0x1ec>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e036      	b.n	8004f08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea6:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4918      	ldr	r1, [pc, #96]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4910      	ldr	r1, [pc, #64]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ed8:	f000 f824 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004edc:	4602      	mov	r2, r0
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	490b      	ldr	r1, [pc, #44]	; (8004f18 <HAL_RCC_ClockConfig+0x1f4>)
 8004eea:	5ccb      	ldrb	r3, [r1, r3]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <HAL_RCC_ClockConfig+0x1f8>)
 8004ef6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ef8:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x1fc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fd f86f 	bl	8001fe0 <HAL_InitTick>
 8004f02:	4603      	mov	r3, r0
 8004f04:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f06:	7afb      	ldrb	r3, [r7, #11]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40022000 	.word	0x40022000
 8004f14:	40021000 	.word	0x40021000
 8004f18:	0800f5c8 	.word	0x0800f5c8
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	20000004 	.word	0x20000004

08004f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b089      	sub	sp, #36	; 0x24
 8004f28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f32:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f3c:	4b3b      	ldr	r3, [pc, #236]	; (800502c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0x34>
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	d121      	bne.n	8004f96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d11e      	bne.n	8004f96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f58:	4b34      	ldr	r3, [pc, #208]	; (800502c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f64:	4b31      	ldr	r3, [pc, #196]	; (800502c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	e005      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f74:	4b2d      	ldr	r3, [pc, #180]	; (800502c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f80:	4a2b      	ldr	r2, [pc, #172]	; (8005030 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d102      	bne.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	e004      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fa8:	4b23      	ldr	r3, [pc, #140]	; (8005038 <HAL_RCC_GetSysClockFreq+0x114>)
 8004faa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d134      	bne.n	800501c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fb2:	4b1e      	ldr	r3, [pc, #120]	; (800502c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d003      	beq.n	8004fca <HAL_RCC_GetSysClockFreq+0xa6>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d003      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xac>
 8004fc8:	e005      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fca:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fcc:	617b      	str	r3, [r7, #20]
      break;
 8004fce:	e005      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fd2:	617b      	str	r3, [r7, #20]
      break;
 8004fd4:	e002      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	617b      	str	r3, [r7, #20]
      break;
 8004fda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fdc:	4b13      	ldr	r3, [pc, #76]	; (800502c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fea:	4b10      	ldr	r3, [pc, #64]	; (800502c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	fb03 f202 	mul.w	r2, r3, r2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <HAL_RCC_GetSysClockFreq+0x108>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	0e5b      	lsrs	r3, r3, #25
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	3301      	adds	r3, #1
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	fbb2 f3f3 	udiv	r3, r2, r3
 800501a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800501c:	69bb      	ldr	r3, [r7, #24]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3724      	adds	r7, #36	; 0x24
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000
 8005030:	0800f5d8 	.word	0x0800f5d8
 8005034:	00f42400 	.word	0x00f42400
 8005038:	007a1200 	.word	0x007a1200

0800503c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005048:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800504a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005054:	f7ff f990 	bl	8004378 <HAL_PWREx_GetVoltageRange>
 8005058:	6178      	str	r0, [r7, #20]
 800505a:	e014      	b.n	8005086 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800505c:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800505e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005060:	4a24      	ldr	r2, [pc, #144]	; (80050f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005066:	6593      	str	r3, [r2, #88]	; 0x58
 8005068:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005074:	f7ff f980 	bl	8004378 <HAL_PWREx_GetVoltageRange>
 8005078:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800507a:	4b1e      	ldr	r3, [pc, #120]	; (80050f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005084:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800508c:	d10b      	bne.n	80050a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b80      	cmp	r3, #128	; 0x80
 8005092:	d919      	bls.n	80050c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2ba0      	cmp	r3, #160	; 0xa0
 8005098:	d902      	bls.n	80050a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800509a:	2302      	movs	r3, #2
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	e013      	b.n	80050c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050a0:	2301      	movs	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	e010      	b.n	80050c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b80      	cmp	r3, #128	; 0x80
 80050aa:	d902      	bls.n	80050b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050ac:	2303      	movs	r3, #3
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	e00a      	b.n	80050c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b80      	cmp	r3, #128	; 0x80
 80050b6:	d102      	bne.n	80050be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050b8:	2302      	movs	r3, #2
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	e004      	b.n	80050c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b70      	cmp	r3, #112	; 0x70
 80050c2:	d101      	bne.n	80050c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050c4:	2301      	movs	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 0207 	bic.w	r2, r3, #7
 80050d0:	4909      	ldr	r1, [pc, #36]	; (80050f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d001      	beq.n	80050ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40022000 	.word	0x40022000

080050fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005104:	2300      	movs	r3, #0
 8005106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005108:	2300      	movs	r3, #0
 800510a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 809e 	beq.w	8005256 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800511a:	2300      	movs	r3, #0
 800511c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800511e:	4b46      	ldr	r3, [pc, #280]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005134:	4b40      	ldr	r3, [pc, #256]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	4a3f      	ldr	r2, [pc, #252]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800513a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513e:	6593      	str	r3, [r2, #88]	; 0x58
 8005140:	4b3d      	ldr	r3, [pc, #244]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800514c:	2301      	movs	r3, #1
 800514e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005150:	4b3a      	ldr	r3, [pc, #232]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a39      	ldr	r2, [pc, #228]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800515c:	f7fc ff90 	bl	8002080 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005162:	e009      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005164:	f7fc ff8c 	bl	8002080 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d902      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	74fb      	strb	r3, [r7, #19]
        break;
 8005176:	e005      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005178:	4b30      	ldr	r3, [pc, #192]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ef      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d15a      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800518a:	4b2b      	ldr	r3, [pc, #172]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005194:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01e      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xde>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d019      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051a6:	4b24      	ldr	r3, [pc, #144]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051b2:	4b21      	ldr	r3, [pc, #132]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c8:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051d2:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d016      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e4:	f7fc ff4c 	bl	8002080 <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ea:	e00b      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ec:	f7fc ff48 	bl	8002080 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d902      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	74fb      	strb	r3, [r7, #19]
            break;
 8005202:	e006      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005204:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0ec      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005212:	7cfb      	ldrb	r3, [r7, #19]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005218:	4b07      	ldr	r3, [pc, #28]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	4904      	ldr	r1, [pc, #16]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800522e:	e009      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	74bb      	strb	r3, [r7, #18]
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005244:	7c7b      	ldrb	r3, [r7, #17]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524a:	4b6e      	ldr	r3, [pc, #440]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	4a6d      	ldr	r2, [pc, #436]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005254:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005262:	4b68      	ldr	r3, [pc, #416]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	f023 0203 	bic.w	r2, r3, #3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	4964      	ldr	r1, [pc, #400]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005284:	4b5f      	ldr	r3, [pc, #380]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f023 020c 	bic.w	r2, r3, #12
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	495c      	ldr	r1, [pc, #368]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052a6:	4b57      	ldr	r3, [pc, #348]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4953      	ldr	r1, [pc, #332]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052c8:	4b4e      	ldr	r3, [pc, #312]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	494b      	ldr	r1, [pc, #300]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ea:	4b46      	ldr	r3, [pc, #280]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4942      	ldr	r1, [pc, #264]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800530c:	4b3d      	ldr	r3, [pc, #244]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	493a      	ldr	r1, [pc, #232]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800532e:	4b35      	ldr	r3, [pc, #212]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005334:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	4931      	ldr	r1, [pc, #196]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005350:	4b2c      	ldr	r3, [pc, #176]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	4929      	ldr	r1, [pc, #164]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	4920      	ldr	r1, [pc, #128]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d015      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005394:	4b1b      	ldr	r3, [pc, #108]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a2:	4918      	ldr	r1, [pc, #96]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b2:	d105      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b4:	4b13      	ldr	r3, [pc, #76]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	4a12      	ldr	r2, [pc, #72]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053be:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d015      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	490a      	ldr	r1, [pc, #40]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ea:	d105      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80053f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000

08005408 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d07f      	beq.n	800551a <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fc fbd0 	bl	8001bd4 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800543a:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005444:	4b37      	ldr	r3, [pc, #220]	; (8005524 <HAL_RTC_Init+0x11c>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b10      	cmp	r3, #16
 800544e:	d05b      	beq.n	8005508 <HAL_RTC_Init+0x100>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	22ca      	movs	r2, #202	; 0xca
 8005456:	625a      	str	r2, [r3, #36]	; 0x24
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2253      	movs	r2, #83	; 0x53
 800545e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fa53 	bl	800590c <RTC_EnterInitMode>
 8005466:	4603      	mov	r3, r0
 8005468:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d127      	bne.n	80054c0 <HAL_RTC_Init+0xb8>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800547e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005482:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6999      	ldr	r1, [r3, #24]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6912      	ldr	r2, [r2, #16]
 80054aa:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6919      	ldr	r1, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	041a      	lsls	r2, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa59 	bl	8005978 <RTC_ExitInitMode>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d116      	bne.n	80054fe <HAL_RTC_Init+0xf6>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80054de:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6999      	ldr	r1, [r3, #24]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	22ff      	movs	r2, #255	; 0xff
 8005504:	625a      	str	r2, [r3, #36]	; 0x24
 8005506:	e001      	b.n	800550c <HAL_RTC_Init+0x104>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <HAL_RTC_Init+0x112>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
  }

  return status;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40002800 	.word	0x40002800

08005528 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_RTC_SetTime+0x1a>
 800553e:	2302      	movs	r3, #2
 8005540:	e08b      	b.n	800565a <HAL_RTC_SetTime+0x132>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	22ca      	movs	r2, #202	; 0xca
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2253      	movs	r2, #83	; 0x53
 8005560:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f9d2 	bl	800590c <RTC_EnterInitMode>
 8005568:	4603      	mov	r3, r0
 800556a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800556c:	7cfb      	ldrb	r3, [r7, #19]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d163      	bne.n	800563a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d126      	bne.n	80055c6 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2200      	movs	r2, #0
 800558a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fa2f 	bl	80059f4 <RTC_ByteToBcd2>
 8005596:	4603      	mov	r3, r0
 8005598:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fa28 	bl	80059f4 <RTC_ByteToBcd2>
 80055a4:	4603      	mov	r3, r0
 80055a6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055a8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	789b      	ldrb	r3, [r3, #2]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fa20 	bl	80059f4 <RTC_ByteToBcd2>
 80055b4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055b6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	78db      	ldrb	r3, [r3, #3]
 80055be:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e018      	b.n	80055f8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d102      	bne.n	80055da <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055e6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055ec:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	78db      	ldrb	r3, [r3, #3]
 80055f2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005602:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005606:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005616:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6999      	ldr	r1, [r3, #24]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	431a      	orrs	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f9a1 	bl	8005978 <RTC_ExitInitMode>
 8005636:	4603      	mov	r3, r0
 8005638:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	22ff      	movs	r2, #255	; 0xff
 8005640:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005642:	7cfb      	ldrb	r3, [r7, #19]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d103      	bne.n	8005650 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8005658:	7cfb      	ldrb	r3, [r7, #19]
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd90      	pop	{r4, r7, pc}

08005662 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005690:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005694:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	0a1b      	lsrs	r3, r3, #8
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	0d9b      	lsrs	r3, r3, #22
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d11a      	bne.n	8005710 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f9a8 	bl	8005a34 <RTC_Bcd2ToByte>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f99f 	bl	8005a34 <RTC_Bcd2ToByte>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	789b      	ldrb	r3, [r3, #2]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f996 	bl	8005a34 <RTC_Bcd2ToByte>
 8005708:	4603      	mov	r3, r0
 800570a:	461a      	mov	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800571a:	b590      	push	{r4, r7, lr}
 800571c:	b087      	sub	sp, #28
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_RTC_SetDate+0x1a>
 8005730:	2302      	movs	r3, #2
 8005732:	e075      	b.n	8005820 <HAL_RTC_SetDate+0x106>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10e      	bne.n	8005768 <HAL_RTC_SetDate+0x4e>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	f023 0310 	bic.w	r3, r3, #16
 800575e:	b2db      	uxtb	r3, r3
 8005760:	330a      	adds	r3, #10
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d11c      	bne.n	80057a8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	78db      	ldrb	r3, [r3, #3]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f93e 	bl	80059f4 <RTC_ByteToBcd2>
 8005778:	4603      	mov	r3, r0
 800577a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f937 	bl	80059f4 <RTC_ByteToBcd2>
 8005786:	4603      	mov	r3, r0
 8005788:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800578a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	789b      	ldrb	r3, [r3, #2]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 f92f 	bl	80059f4 <RTC_ByteToBcd2>
 8005796:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005798:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e00e      	b.n	80057c6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	78db      	ldrb	r3, [r3, #3]
 80057ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057b4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80057ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	22ca      	movs	r2, #202	; 0xca
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2253      	movs	r2, #83	; 0x53
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f898 	bl	800590c <RTC_EnterInitMode>
 80057dc:	4603      	mov	r3, r0
 80057de:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80057e0:	7cfb      	ldrb	r3, [r7, #19]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10c      	bne.n	8005800 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f8be 	bl	8005978 <RTC_ExitInitMode>
 80057fc:	4603      	mov	r3, r0
 80057fe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 800581e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005820:	4618      	mov	r0, r3
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	bd90      	pop	{r4, r7, pc}

08005828 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800583e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005842:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	0c1b      	lsrs	r3, r3, #16
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	b2da      	uxtb	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	0b5b      	lsrs	r3, r3, #13
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	b2da      	uxtb	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d11a      	bne.n	80058b8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	78db      	ldrb	r3, [r3, #3]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f8d4 	bl	8005a34 <RTC_Bcd2ToByte>
 800588c:	4603      	mov	r3, r0
 800588e:	461a      	mov	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f8cb 	bl	8005a34 <RTC_Bcd2ToByte>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	789b      	ldrb	r3, [r3, #2]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f8c2 	bl	8005a34 <RTC_Bcd2ToByte>
 80058b0:	4603      	mov	r3, r0
 80058b2:	461a      	mov	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a0d      	ldr	r2, [pc, #52]	; (8005908 <HAL_RTC_WaitForSynchro+0x44>)
 80058d2:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 80058d4:	f7fc fbd4 	bl	8002080 <HAL_GetTick>
 80058d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80058da:	e009      	b.n	80058f0 <HAL_RTC_WaitForSynchro+0x2c>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058dc:	f7fc fbd0 	bl	8002080 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ea:	d901      	bls.n	80058f0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e007      	b.n	8005900 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0ee      	beq.n	80058dc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	0001005c 	.word	0x0001005c

0800590c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d123      	bne.n	800596e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005934:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005936:	f7fc fba3 	bl	8002080 <HAL_GetTick>
 800593a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800593c:	e00d      	b.n	800595a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800593e:	f7fc fb9f 	bl	8002080 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800594c:	d905      	bls.n	800595a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2203      	movs	r2, #3
 8005956:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <RTC_EnterInitMode+0x62>
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d1e7      	bne.n	800593e <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005984:	4b1a      	ldr	r3, [pc, #104]	; (80059f0 <RTC_ExitInitMode+0x78>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a19      	ldr	r2, [pc, #100]	; (80059f0 <RTC_ExitInitMode+0x78>)
 800598a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800598e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005990:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <RTC_ExitInitMode+0x78>)
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10c      	bne.n	80059b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff ff91 	bl	80058c4 <HAL_RTC_WaitForSynchro>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01e      	beq.n	80059e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2203      	movs	r2, #3
 80059ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	73fb      	strb	r3, [r7, #15]
 80059b4:	e017      	b.n	80059e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059b6:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <RTC_ExitInitMode+0x78>)
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	4a0d      	ldr	r2, [pc, #52]	; (80059f0 <RTC_ExitInitMode+0x78>)
 80059bc:	f023 0320 	bic.w	r3, r3, #32
 80059c0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff ff7e 	bl	80058c4 <HAL_RTC_WaitForSynchro>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2203      	movs	r2, #3
 80059d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059da:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <RTC_ExitInitMode+0x78>)
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	4a04      	ldr	r2, [pc, #16]	; (80059f0 <RTC_ExitInitMode+0x78>)
 80059e0:	f043 0320 	orr.w	r3, r3, #32
 80059e4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40002800 	.word	0x40002800

080059f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005a06:	e005      	b.n	8005a14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	3b0a      	subs	r3, #10
 8005a12:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	2b09      	cmp	r3, #9
 8005a18:	d8f6      	bhi.n	8005a08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	7afb      	ldrb	r3, [r7, #11]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	b2db      	uxtb	r3, r3
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	0092      	lsls	r2, r2, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	4413      	add	r3, r2
 8005a5a:	b2db      	uxtb	r3, r3
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e095      	b.n	8005ba6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d108      	bne.n	8005a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8a:	d009      	beq.n	8005aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61da      	str	r2, [r3, #28]
 8005a92:	e005      	b.n	8005aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fc f8f8 	bl	8001cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ae0:	d902      	bls.n	8005ae8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e002      	b.n	8005aee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005af6:	d007      	beq.n	8005b08 <HAL_SPI_Init+0xa0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b00:	d002      	beq.n	8005b08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4a:	ea42 0103 	orr.w	r1, r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	0c1b      	lsrs	r3, r3, #16
 8005b64:	f003 0204 	and.w	r2, r3, #4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b84:	ea42 0103 	orr.w	r1, r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b088      	sub	sp, #32
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_SPI_Transmit+0x22>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e15f      	b.n	8005e90 <HAL_SPI_Transmit+0x2e2>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bd8:	f7fc fa52 	bl	8002080 <HAL_GetTick>
 8005bdc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bf2:	e148      	b.n	8005e86 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_SPI_Transmit+0x52>
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d102      	bne.n	8005c06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c04:	e13f      	b.n	8005e86 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2203      	movs	r2, #3
 8005c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c50:	d10f      	bne.n	8005c72 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d007      	beq.n	8005c90 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c98:	d94f      	bls.n	8005d3a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_Transmit+0xfa>
 8005ca2:	8afb      	ldrh	r3, [r7, #22]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d142      	bne.n	8005d2e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	881a      	ldrh	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ccc:	e02f      	b.n	8005d2e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d112      	bne.n	8005d02 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	881a      	ldrh	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	1c9a      	adds	r2, r3, #2
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d00:	e015      	b.n	8005d2e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d02:	f7fc f9bd 	bl	8002080 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d803      	bhi.n	8005d1a <HAL_SPI_Transmit+0x16c>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d102      	bne.n	8005d20 <HAL_SPI_Transmit+0x172>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d106      	bne.n	8005d2e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005d2c:	e0ab      	b.n	8005e86 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1ca      	bne.n	8005cce <HAL_SPI_Transmit+0x120>
 8005d38:	e080      	b.n	8005e3c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_SPI_Transmit+0x19a>
 8005d42:	8afb      	ldrh	r3, [r7, #22]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d174      	bne.n	8005e32 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d912      	bls.n	8005d78 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	881a      	ldrh	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b02      	subs	r3, #2
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d76:	e05c      	b.n	8005e32 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	7812      	ldrb	r2, [r2, #0]
 8005d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d9e:	e048      	b.n	8005e32 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d12b      	bne.n	8005e06 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d912      	bls.n	8005dde <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	881a      	ldrh	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	1c9a      	adds	r2, r3, #2
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b02      	subs	r3, #2
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ddc:	e029      	b.n	8005e32 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	7812      	ldrb	r2, [r2, #0]
 8005dea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e04:	e015      	b.n	8005e32 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e06:	f7fc f93b 	bl	8002080 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d803      	bhi.n	8005e1e <HAL_SPI_Transmit+0x270>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d102      	bne.n	8005e24 <HAL_SPI_Transmit+0x276>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005e30:	e029      	b.n	8005e86 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1b1      	bne.n	8005da0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fcf9 	bl	8006838 <SPI_EndRxTxTransaction>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e003      	b.n	8005e86 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3720      	adds	r7, #32
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d002      	beq.n	8005ebe <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ebc:	e11a      	b.n	80060f4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec6:	d112      	bne.n	8005eee <HAL_SPI_Receive+0x56>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10e      	bne.n	8005eee <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 f90e 	bl	8006106 <HAL_SPI_TransmitReceive>
 8005eea:	4603      	mov	r3, r0
 8005eec:	e107      	b.n	80060fe <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_SPI_Receive+0x64>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e100      	b.n	80060fe <HAL_SPI_Receive+0x266>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f04:	f7fc f8bc 	bl	8002080 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_SPI_Receive+0x7e>
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f1a:	e0eb      	b.n	80060f4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2204      	movs	r2, #4
 8005f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f66:	d908      	bls.n	8005f7a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f76:	605a      	str	r2, [r3, #4]
 8005f78:	e007      	b.n	8005f8a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f88:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f92:	d10f      	bne.n	8005fb4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fb2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d007      	beq.n	8005fd2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fda:	d86f      	bhi.n	80060bc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005fdc:	e034      	b.n	8006048 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d117      	bne.n	800601c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f103 020c 	add.w	r2, r3, #12
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800601a:	e015      	b.n	8006048 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800601c:	f7fc f830 	bl	8002080 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d803      	bhi.n	8006034 <HAL_SPI_Receive+0x19c>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d102      	bne.n	800603a <HAL_SPI_Receive+0x1a2>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006046:	e055      	b.n	80060f4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1c4      	bne.n	8005fde <HAL_SPI_Receive+0x146>
 8006054:	e038      	b.n	80060c8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d115      	bne.n	8006090 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	b292      	uxth	r2, r2
 8006070:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	1c9a      	adds	r2, r3, #2
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800608e:	e015      	b.n	80060bc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006090:	f7fb fff6 	bl	8002080 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d803      	bhi.n	80060a8 <HAL_SPI_Receive+0x210>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a6:	d102      	bne.n	80060ae <HAL_SPI_Receive+0x216>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80060ba:	e01b      	b.n	80060f4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1c6      	bne.n	8006056 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fb5b 	bl	8006788 <SPI_EndRxTransaction>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
 80060ea:	e003      	b.n	80060f4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b08a      	sub	sp, #40	; 0x28
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
 8006112:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006114:	2301      	movs	r3, #1
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_SPI_TransmitReceive+0x26>
 8006128:	2302      	movs	r3, #2
 800612a:	e20a      	b.n	8006542 <HAL_SPI_TransmitReceive+0x43c>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006134:	f7fb ffa4 	bl	8002080 <HAL_GetTick>
 8006138:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006140:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006148:	887b      	ldrh	r3, [r7, #2]
 800614a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800614c:	887b      	ldrh	r3, [r7, #2]
 800614e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006150:	7efb      	ldrb	r3, [r7, #27]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d00e      	beq.n	8006174 <HAL_SPI_TransmitReceive+0x6e>
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800615c:	d106      	bne.n	800616c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <HAL_SPI_TransmitReceive+0x66>
 8006166:	7efb      	ldrb	r3, [r7, #27]
 8006168:	2b04      	cmp	r3, #4
 800616a:	d003      	beq.n	8006174 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800616c:	2302      	movs	r3, #2
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006172:	e1e0      	b.n	8006536 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x80>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_TransmitReceive+0x80>
 8006180:	887b      	ldrh	r3, [r7, #2]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800618c:	e1d3      	b.n	8006536 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b04      	cmp	r3, #4
 8006198:	d003      	beq.n	80061a2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2205      	movs	r2, #5
 800619e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	887a      	ldrh	r2, [r7, #2]
 80061b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	887a      	ldrh	r2, [r7, #2]
 80061ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	887a      	ldrh	r2, [r7, #2]
 80061c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	887a      	ldrh	r2, [r7, #2]
 80061ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061e4:	d802      	bhi.n	80061ec <HAL_SPI_TransmitReceive+0xe6>
 80061e6:	8a3b      	ldrh	r3, [r7, #16]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d908      	bls.n	80061fe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	e007      	b.n	800620e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800620c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b40      	cmp	r3, #64	; 0x40
 800621a:	d007      	beq.n	800622c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800622a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006234:	f240 8081 	bls.w	800633a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SPI_TransmitReceive+0x140>
 8006240:	8a7b      	ldrh	r3, [r7, #18]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d16d      	bne.n	8006322 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	881a      	ldrh	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	1c9a      	adds	r2, r3, #2
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800626a:	e05a      	b.n	8006322 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d11b      	bne.n	80062b2 <HAL_SPI_TransmitReceive+0x1ac>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d016      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0x1ac>
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	2b01      	cmp	r3, #1
 8006288:	d113      	bne.n	80062b2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	881a      	ldrh	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	1c9a      	adds	r2, r3, #2
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d11c      	bne.n	80062fa <HAL_SPI_TransmitReceive+0x1f4>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d016      	beq.n	80062fa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	b292      	uxth	r2, r2
 80062d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	1c9a      	adds	r2, r3, #2
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062f6:	2301      	movs	r3, #1
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062fa:	f7fb fec1 	bl	8002080 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006306:	429a      	cmp	r2, r3
 8006308:	d80b      	bhi.n	8006322 <HAL_SPI_TransmitReceive+0x21c>
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d007      	beq.n	8006322 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006320:	e109      	b.n	8006536 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d19f      	bne.n	800626c <HAL_SPI_TransmitReceive+0x166>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d199      	bne.n	800626c <HAL_SPI_TransmitReceive+0x166>
 8006338:	e0e3      	b.n	8006502 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_SPI_TransmitReceive+0x244>
 8006342:	8a7b      	ldrh	r3, [r7, #18]
 8006344:	2b01      	cmp	r3, #1
 8006346:	f040 80cf 	bne.w	80064e8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	d912      	bls.n	800637a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	881a      	ldrh	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b02      	subs	r3, #2
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006378:	e0b6      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	7812      	ldrb	r2, [r2, #0]
 8006386:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a0:	e0a2      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d134      	bne.n	800641a <HAL_SPI_TransmitReceive+0x314>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d02f      	beq.n	800641a <HAL_SPI_TransmitReceive+0x314>
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d12c      	bne.n	800641a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d912      	bls.n	80063f0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	1c9a      	adds	r2, r3, #2
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b02      	subs	r3, #2
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ee:	e012      	b.n	8006416 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	7812      	ldrb	r2, [r2, #0]
 80063fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b01      	cmp	r3, #1
 8006426:	d148      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x3b4>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d042      	beq.n	80064ba <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d923      	bls.n	8006488 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	b292      	uxth	r2, r2
 800644c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	1c9a      	adds	r2, r3, #2
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b02      	subs	r3, #2
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	d81f      	bhi.n	80064b6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	e016      	b.n	80064b6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f103 020c 	add.w	r2, r3, #12
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064b6:	2301      	movs	r3, #1
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064ba:	f7fb fde1 	bl	8002080 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d803      	bhi.n	80064d2 <HAL_SPI_TransmitReceive+0x3cc>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d102      	bne.n	80064d8 <HAL_SPI_TransmitReceive+0x3d2>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d107      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80064e6:	e026      	b.n	8006536 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f47f af57 	bne.w	80063a2 <HAL_SPI_TransmitReceive+0x29c>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f47f af50 	bne.w	80063a2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f996 	bl	8006838 <SPI_EndRxTxTransaction>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652c:	e003      	b.n	8006536 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800653e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006542:	4618      	mov	r0, r3
 8006544:	3728      	adds	r7, #40	; 0x28
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	4613      	mov	r3, r2
 800655a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800655c:	f7fb fd90 	bl	8002080 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	4413      	add	r3, r2
 800656a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800656c:	f7fb fd88 	bl	8002080 <HAL_GetTick>
 8006570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006572:	4b39      	ldr	r3, [pc, #228]	; (8006658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	015b      	lsls	r3, r3, #5
 8006578:	0d1b      	lsrs	r3, r3, #20
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	fb02 f303 	mul.w	r3, r2, r3
 8006580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006582:	e054      	b.n	800662e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d050      	beq.n	800662e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800658c:	f7fb fd78 	bl	8002080 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	429a      	cmp	r2, r3
 800659a:	d902      	bls.n	80065a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d13d      	bne.n	800661e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ba:	d111      	bne.n	80065e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c4:	d004      	beq.n	80065d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ce:	d107      	bne.n	80065e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e8:	d10f      	bne.n	800660a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e017      	b.n	800664e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	3b01      	subs	r3, #1
 800662c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4013      	ands	r3, r2
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	429a      	cmp	r2, r3
 800663c:	bf0c      	ite	eq
 800663e:	2301      	moveq	r3, #1
 8006640:	2300      	movne	r3, #0
 8006642:	b2db      	uxtb	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	429a      	cmp	r2, r3
 800664a:	d19b      	bne.n	8006584 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3720      	adds	r7, #32
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000000 	.word	0x20000000

0800665c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	; 0x28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800666e:	f7fb fd07 	bl	8002080 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4413      	add	r3, r2
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800667e:	f7fb fcff 	bl	8002080 <HAL_GetTick>
 8006682:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800668c:	4b3d      	ldr	r3, [pc, #244]	; (8006784 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	00da      	lsls	r2, r3, #3
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	0d1b      	lsrs	r3, r3, #20
 800669c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066a4:	e060      	b.n	8006768 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066ac:	d107      	bne.n	80066be <SPI_WaitFifoStateUntilTimeout+0x62>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d050      	beq.n	8006768 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066c6:	f7fb fcdb 	bl	8002080 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d902      	bls.n	80066dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d13d      	bne.n	8006758 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f4:	d111      	bne.n	800671a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066fe:	d004      	beq.n	800670a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006708:	d107      	bne.n	800671a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006718:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006722:	d10f      	bne.n	8006744 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006742:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e010      	b.n	800677a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	3b01      	subs	r3, #1
 8006766:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	429a      	cmp	r2, r3
 8006776:	d196      	bne.n	80066a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3728      	adds	r7, #40	; 0x28
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000000 	.word	0x20000000

08006788 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800679c:	d111      	bne.n	80067c2 <SPI_EndRxTransaction+0x3a>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a6:	d004      	beq.n	80067b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b0:	d107      	bne.n	80067c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	2180      	movs	r1, #128	; 0x80
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff febd 	bl	800654c <SPI_WaitFlagStateUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067dc:	f043 0220 	orr.w	r2, r3, #32
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e023      	b.n	8006830 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f0:	d11d      	bne.n	800682e <SPI_EndRxTransaction+0xa6>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fa:	d004      	beq.n	8006806 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006804:	d113      	bne.n	800682e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff ff22 	bl	800665c <SPI_WaitFifoStateUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006822:	f043 0220 	orr.w	r2, r3, #32
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e000      	b.n	8006830 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af02      	add	r7, sp, #8
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2200      	movs	r2, #0
 800684c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff ff03 	bl	800665c <SPI_WaitFifoStateUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006860:	f043 0220 	orr.w	r2, r3, #32
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e027      	b.n	80068bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	2180      	movs	r1, #128	; 0x80
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7ff fe68 	bl	800654c <SPI_WaitFlagStateUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006886:	f043 0220 	orr.w	r2, r3, #32
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e014      	b.n	80068bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2200      	movs	r2, #0
 800689a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff fedc 	bl	800665c <SPI_WaitFifoStateUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ae:	f043 0220 	orr.w	r2, r3, #32
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e000      	b.n	80068bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80068c4:	b084      	sub	sp, #16
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	f107 0014 	add.w	r0, r7, #20
 80068d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	b004      	add	sp, #16
 80068e4:	4770      	bx	lr

080068e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80068f6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80068fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	b29a      	uxth	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800691c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006920:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	b29b      	uxth	r3, r3
 800692e:	43db      	mvns	r3, r3
 8006930:	b29b      	uxth	r3, r3
 8006932:	4013      	ands	r3, r2
 8006934:	b29a      	uxth	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006964:	b084      	sub	sp, #16
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	f107 0014 	add.w	r0, r7, #20
 8006972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	b004      	add	sp, #16
 80069a4:	4770      	bx	lr
	...

080069a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b09d      	sub	sp, #116	; 0x74
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	78db      	ldrb	r3, [r3, #3]
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d81f      	bhi.n	8006a1a <USB_ActivateEndpoint+0x72>
 80069da:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <USB_ActivateEndpoint+0x38>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	08006a0d 	.word	0x08006a0d
 80069e8:	08006a23 	.word	0x08006a23
 80069ec:	080069ff 	.word	0x080069ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80069f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80069f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80069fc:	e012      	b.n	8006a24 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80069fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a02:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006a06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a0a:	e00b      	b.n	8006a24 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a18:	e004      	b.n	8006a24 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006a20:	e000      	b.n	8006a24 <USB_ActivateEndpoint+0x7c>
      break;
 8006a22:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5e:	b21a      	sxth	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b21b      	sxth	r3, r3
 8006a66:	4313      	orrs	r3, r2
 8006a68:	b21b      	sxth	r3, r3
 8006a6a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	7b1b      	ldrb	r3, [r3, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 8178 	bne.w	8006d8a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	785b      	ldrb	r3, [r3, #1]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8084 	beq.w	8006bac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	00da      	lsls	r2, r3, #3
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	88db      	ldrh	r3, [r3, #6]
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	827b      	strh	r3, [r7, #18]
 8006ae6:	8a7b      	ldrh	r3, [r7, #18]
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01b      	beq.n	8006b28 <USB_ActivateEndpoint+0x180>
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	823b      	strh	r3, [r7, #16]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	441a      	add	r2, r3
 8006b12:	8a3b      	ldrh	r3, [r7, #16]
 8006b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	78db      	ldrb	r3, [r3, #3]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d020      	beq.n	8006b72 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b46:	81bb      	strh	r3, [r7, #12]
 8006b48:	89bb      	ldrh	r3, [r7, #12]
 8006b4a:	f083 0320 	eor.w	r3, r3, #32
 8006b4e:	81bb      	strh	r3, [r7, #12]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	441a      	add	r2, r3
 8006b5a:	89bb      	ldrh	r3, [r7, #12]
 8006b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8013      	strh	r3, [r2, #0]
 8006b70:	e2d5      	b.n	800711e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b88:	81fb      	strh	r3, [r7, #14]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	89fb      	ldrh	r3, [r7, #14]
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
 8006baa:	e2b8      	b.n	800711e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	4413      	add	r3, r2
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	00da      	lsls	r2, r3, #3
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	88db      	ldrh	r3, [r3, #6]
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	4413      	add	r3, r2
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	00da      	lsls	r2, r3, #3
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b3e      	cmp	r3, #62	; 0x3e
 8006c1a:	d91d      	bls.n	8006c58 <USB_ActivateEndpoint+0x2b0>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <USB_ActivateEndpoint+0x28e>
 8006c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c32:	3b01      	subs	r3, #1
 8006c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	029b      	lsls	r3, r3, #10
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	801a      	strh	r2, [r3, #0]
 8006c56:	e026      	b.n	8006ca6 <USB_ActivateEndpoint+0x2fe>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <USB_ActivateEndpoint+0x2ce>
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	e017      	b.n	8006ca6 <USB_ActivateEndpoint+0x2fe>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <USB_ActivateEndpoint+0x2e8>
 8006c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	029b      	lsls	r3, r3, #10
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8006cb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d01b      	beq.n	8006cf6 <USB_ActivateEndpoint+0x34e>
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd4:	843b      	strh	r3, [r7, #32]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	8c3b      	ldrh	r3, [r7, #32]
 8006ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d124      	bne.n	8006d48 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d14:	83bb      	strh	r3, [r7, #28]
 8006d16:	8bbb      	ldrh	r3, [r7, #28]
 8006d18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d1c:	83bb      	strh	r3, [r7, #28]
 8006d1e:	8bbb      	ldrh	r3, [r7, #28]
 8006d20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d24:	83bb      	strh	r3, [r7, #28]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8bbb      	ldrh	r3, [r7, #28]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
 8006d46:	e1ea      	b.n	800711e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	83fb      	strh	r3, [r7, #30]
 8006d60:	8bfb      	ldrh	r3, [r7, #30]
 8006d62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d66:	83fb      	strh	r3, [r7, #30]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	8bfb      	ldrh	r3, [r7, #30]
 8006d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	8013      	strh	r3, [r2, #0]
 8006d88:	e1c9      	b.n	800711e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	78db      	ldrb	r3, [r3, #3]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d11e      	bne.n	8006dd0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	8013      	strh	r3, [r2, #0]
 8006dce:	e01d      	b.n	8006e0c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	441a      	add	r2, r3
 8006df4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e1c:	4413      	add	r3, r2
 8006e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	00da      	lsls	r2, r3, #3
 8006e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	891b      	ldrh	r3, [r3, #8]
 8006e34:	085b      	lsrs	r3, r3, #1
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	657b      	str	r3, [r7, #84]	; 0x54
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e50:	4413      	add	r3, r2
 8006e52:	657b      	str	r3, [r7, #84]	; 0x54
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	00da      	lsls	r2, r3, #3
 8006e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e62:	653b      	str	r3, [r7, #80]	; 0x50
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	895b      	ldrh	r3, [r3, #10]
 8006e68:	085b      	lsrs	r3, r3, #1
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f040 8093 	bne.w	8006fa4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006e8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01b      	beq.n	8006ed2 <USB_ActivateEndpoint+0x52a>
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	441a      	add	r2, r3
 8006ebc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006ee0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01b      	beq.n	8006f22 <USB_ActivateEndpoint+0x57a>
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	441a      	add	r2, r3
 8006f0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f40:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f48:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	881b      	ldrh	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	441a      	add	r2, r3
 8006f8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	8013      	strh	r3, [r2, #0]
 8006fa2:	e0bc      	b.n	800711e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01d      	beq.n	8006ffc <USB_ActivateEndpoint+0x654>
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	441a      	add	r2, r3
 8006fe4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800700c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01d      	beq.n	8007054 <USB_ActivateEndpoint+0x6ac>
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	441a      	add	r2, r3
 800703c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007050:	b29b      	uxth	r3, r3
 8007052:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	78db      	ldrb	r3, [r3, #3]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d024      	beq.n	80070a6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29b      	uxth	r3, r3
 800706a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007072:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007076:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800707a:	f083 0320 	eor.w	r3, r3, #32
 800707e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	441a      	add	r2, r3
 800708c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800709c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	8013      	strh	r3, [r2, #0]
 80070a4:	e01d      	b.n	80070e2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	441a      	add	r2, r3
 80070ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80070ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070de:	b29b      	uxth	r3, r3
 80070e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	441a      	add	r2, r3
 8007106:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800710a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711a:	b29b      	uxth	r3, r3
 800711c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800711e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007122:	4618      	mov	r0, r3
 8007124:	3774      	adds	r7, #116	; 0x74
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop

08007130 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007130:	b480      	push	{r7}
 8007132:	b08d      	sub	sp, #52	; 0x34
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	7b1b      	ldrb	r3, [r3, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f040 808e 	bne.w	8007260 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d044      	beq.n	80071d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	81bb      	strh	r3, [r7, #12]
 800715a:	89bb      	ldrh	r3, [r7, #12]
 800715c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01b      	beq.n	800719c <USB_DeactivateEndpoint+0x6c>
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717a:	817b      	strh	r3, [r7, #10]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	897b      	ldrh	r3, [r7, #10]
 8007188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007194:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007198:	b29b      	uxth	r3, r3
 800719a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b2:	813b      	strh	r3, [r7, #8]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	441a      	add	r2, r3
 80071be:	893b      	ldrh	r3, [r7, #8]
 80071c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	8013      	strh	r3, [r2, #0]
 80071d4:	e192      	b.n	80074fc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	827b      	strh	r3, [r7, #18]
 80071e4:	8a7b      	ldrh	r3, [r7, #18]
 80071e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01b      	beq.n	8007226 <USB_DeactivateEndpoint+0xf6>
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007204:	823b      	strh	r3, [r7, #16]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	441a      	add	r2, r3
 8007210:	8a3b      	ldrh	r3, [r7, #16]
 8007212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800721e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007222:	b29b      	uxth	r3, r3
 8007224:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	81fb      	strh	r3, [r7, #14]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	89fb      	ldrh	r3, [r7, #14]
 800724a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725a:	b29b      	uxth	r3, r3
 800725c:	8013      	strh	r3, [r2, #0]
 800725e:	e14d      	b.n	80074fc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f040 80a5 	bne.w	80073b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	843b      	strh	r3, [r7, #32]
 8007278:	8c3b      	ldrh	r3, [r7, #32]
 800727a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01b      	beq.n	80072ba <USB_DeactivateEndpoint+0x18a>
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007298:	83fb      	strh	r3, [r7, #30]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	441a      	add	r2, r3
 80072a4:	8bfb      	ldrh	r3, [r7, #30]
 80072a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	83bb      	strh	r3, [r7, #28]
 80072c8:	8bbb      	ldrh	r3, [r7, #28]
 80072ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01b      	beq.n	800730a <USB_DeactivateEndpoint+0x1da>
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e8:	837b      	strh	r3, [r7, #26]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	8b7b      	ldrh	r3, [r7, #26]
 80072f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007302:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007306:	b29b      	uxth	r3, r3
 8007308:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007320:	833b      	strh	r3, [r7, #24]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	441a      	add	r2, r3
 800732c:	8b3b      	ldrh	r3, [r7, #24]
 800732e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800733a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007358:	82fb      	strh	r3, [r7, #22]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	441a      	add	r2, r3
 8007364:	8afb      	ldrh	r3, [r7, #22]
 8007366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800736a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800736e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007376:	b29b      	uxth	r3, r3
 8007378:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	b29b      	uxth	r3, r3
 8007388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800738c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007390:	82bb      	strh	r3, [r7, #20]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	441a      	add	r2, r3
 800739c:	8abb      	ldrh	r3, [r7, #20]
 800739e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	8013      	strh	r3, [r2, #0]
 80073b2:	e0a3      	b.n	80074fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80073c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80073c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01b      	beq.n	8007404 <USB_DeactivateEndpoint+0x2d4>
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80073f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007400:	b29b      	uxth	r3, r3
 8007402:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007412:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01b      	beq.n	8007454 <USB_DeactivateEndpoint+0x324>
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	853b      	strh	r3, [r7, #40]	; 0x28
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	441a      	add	r2, r3
 800743e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800744c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007450:	b29b      	uxth	r3, r3
 8007452:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29b      	uxth	r3, r3
 8007462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	441a      	add	r2, r3
 8007476:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007488:	b29b      	uxth	r3, r3
 800748a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29b      	uxth	r3, r3
 800749a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800749e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	441a      	add	r2, r3
 80074ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074da:	847b      	strh	r3, [r7, #34]	; 0x22
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	441a      	add	r2, r3
 80074e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3734      	adds	r7, #52	; 0x34
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b0c2      	sub	sp, #264	; 0x108
 800750e:	af00      	add	r7, sp, #0
 8007510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007518:	6018      	str	r0, [r3, #0]
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007522:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	785b      	ldrb	r3, [r3, #1]
 8007530:	2b01      	cmp	r3, #1
 8007532:	f040 86b7 	bne.w	80082a4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	429a      	cmp	r2, r3
 8007550:	d908      	bls.n	8007564 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007562:	e007      	b.n	8007574 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	7b1b      	ldrb	r3, [r3, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d13a      	bne.n	80075fa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6959      	ldr	r1, [r3, #20]
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	88da      	ldrh	r2, [r3, #6]
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075aa:	6800      	ldr	r0, [r0, #0]
 80075ac:	f001 fcb9 	bl	8008f22 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4413      	add	r3, r2
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	00da      	lsls	r2, r3, #3
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	4413      	add	r3, r2
 80075e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	f000 be1f 	b.w	8008238 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80075fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	78db      	ldrb	r3, [r3, #3]
 8007606:	2b02      	cmp	r3, #2
 8007608:	f040 8462 	bne.w	8007ed0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800760c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	429a      	cmp	r2, r3
 8007626:	f240 83df 	bls.w	8007de8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800762a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007650:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	441a      	add	r2, r3
 800766e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800767a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800767e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007682:	b29b      	uxth	r3, r3
 8007684:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a1a      	ldr	r2, [r3, #32]
 8007692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007696:	1ad2      	subs	r2, r2, r3
 8007698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 81c7 	beq.w	8007a5a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	633b      	str	r3, [r7, #48]	; 0x30
 80076d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d177      	bne.n	80077d8 <USB_EPStartXfer+0x2ce>
 80076e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007702:	b29b      	uxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	4413      	add	r3, r2
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
 800770c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	00da      	lsls	r2, r3, #3
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	4413      	add	r3, r2
 800771e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800772e:	b29a      	uxth	r2, r3
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007738:	2b3e      	cmp	r3, #62	; 0x3e
 800773a:	d921      	bls.n	8007780 <USB_EPStartXfer+0x276>
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800774a:	f003 031f 	and.w	r3, r3, #31
 800774e:	2b00      	cmp	r3, #0
 8007750:	d104      	bne.n	800775c <USB_EPStartXfer+0x252>
 8007752:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007756:	3b01      	subs	r3, #1
 8007758:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29a      	uxth	r2, r3
 8007762:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007766:	b29b      	uxth	r3, r3
 8007768:	029b      	lsls	r3, r3, #10
 800776a:	b29b      	uxth	r3, r3
 800776c:	4313      	orrs	r3, r2
 800776e:	b29b      	uxth	r3, r3
 8007770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007778:	b29a      	uxth	r2, r3
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	e050      	b.n	8007822 <USB_EPStartXfer+0x318>
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <USB_EPStartXfer+0x294>
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
 800778e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007796:	b29a      	uxth	r2, r3
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	e041      	b.n	8007822 <USB_EPStartXfer+0x318>
 800779e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <USB_EPStartXfer+0x2b4>
 80077b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077b8:	3301      	adds	r3, #1
 80077ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	029b      	lsls	r3, r3, #10
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	4313      	orrs	r3, r2
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	e024      	b.n	8007822 <USB_EPStartXfer+0x318>
 80077d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	785b      	ldrb	r3, [r3, #1]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d11c      	bne.n	8007822 <USB_EPStartXfer+0x318>
 80077e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	4413      	add	r3, r2
 80077fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	00da      	lsls	r2, r3, #3
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	4413      	add	r3, r2
 8007812:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781c:	b29a      	uxth	r2, r3
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	895b      	ldrh	r3, [r3, #10]
 800782e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6959      	ldr	r1, [r3, #20]
 800783e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007842:	b29b      	uxth	r3, r3
 8007844:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007848:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800784c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007850:	6800      	ldr	r0, [r0, #0]
 8007852:	f001 fb66 	bl	8008f22 <USB_WritePMA>
            ep->xfer_buff += len;
 8007856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695a      	ldr	r2, [r3, #20]
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007866:	441a      	add	r2, r3
 8007868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6a1a      	ldr	r2, [r3, #32]
 8007880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	429a      	cmp	r2, r3
 800788e:	d90f      	bls.n	80078b0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a1a      	ldr	r2, [r3, #32]
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	1ad2      	subs	r2, r2, r3
 80078a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	621a      	str	r2, [r3, #32]
 80078ae:	e00e      	b.n	80078ce <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80078b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80078c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	785b      	ldrb	r3, [r3, #1]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d177      	bne.n	80079ce <USB_EPStartXfer+0x4c4>
 80078de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	4413      	add	r3, r2
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	00da      	lsls	r2, r3, #3
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	4413      	add	r3, r2
 8007914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007924:	b29a      	uxth	r2, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	801a      	strh	r2, [r3, #0]
 800792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792e:	2b3e      	cmp	r3, #62	; 0x3e
 8007930:	d921      	bls.n	8007976 <USB_EPStartXfer+0x46c>
 8007932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007936:	095b      	lsrs	r3, r3, #5
 8007938:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <USB_EPStartXfer+0x448>
 8007948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800794c:	3b01      	subs	r3, #1
 800794e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29a      	uxth	r2, r3
 8007958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800795c:	b29b      	uxth	r3, r3
 800795e:	029b      	lsls	r3, r3, #10
 8007960:	b29b      	uxth	r3, r3
 8007962:	4313      	orrs	r3, r2
 8007964:	b29b      	uxth	r3, r3
 8007966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796e:	b29a      	uxth	r2, r3
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	801a      	strh	r2, [r3, #0]
 8007974:	e056      	b.n	8007a24 <USB_EPStartXfer+0x51a>
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <USB_EPStartXfer+0x48a>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798c:	b29a      	uxth	r2, r3
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	801a      	strh	r2, [r3, #0]
 8007992:	e047      	b.n	8007a24 <USB_EPStartXfer+0x51a>
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007998:	085b      	lsrs	r3, r3, #1
 800799a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <USB_EPStartXfer+0x4aa>
 80079aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ae:	3301      	adds	r3, #1
 80079b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079be:	b29b      	uxth	r3, r3
 80079c0:	029b      	lsls	r3, r3, #10
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	4313      	orrs	r3, r2
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	801a      	strh	r2, [r3, #0]
 80079cc:	e02a      	b.n	8007a24 <USB_EPStartXfer+0x51a>
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d122      	bne.n	8007a24 <USB_EPStartXfer+0x51a>
 80079de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	623b      	str	r3, [r7, #32]
 80079ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	4413      	add	r3, r2
 8007a00:	623b      	str	r3, [r7, #32]
 8007a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	00da      	lsls	r2, r3, #3
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	4413      	add	r3, r2
 8007a14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a18:	61fb      	str	r3, [r7, #28]
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	891b      	ldrh	r3, [r3, #8]
 8007a30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6959      	ldr	r1, [r3, #20]
 8007a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a52:	6800      	ldr	r0, [r0, #0]
 8007a54:	f001 fa65 	bl	8008f22 <USB_WritePMA>
 8007a58:	e3ee      	b.n	8008238 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d177      	bne.n	8007b5a <USB_EPStartXfer+0x650>
 8007a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a8a:	4413      	add	r3, r2
 8007a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	00da      	lsls	r2, r3, #3
 8007a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab4:	801a      	strh	r2, [r3, #0]
 8007ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aba:	2b3e      	cmp	r3, #62	; 0x3e
 8007abc:	d921      	bls.n	8007b02 <USB_EPStartXfer+0x5f8>
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007acc:	f003 031f 	and.w	r3, r3, #31
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <USB_EPStartXfer+0x5d4>
 8007ad4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	029b      	lsls	r3, r3, #10
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	4313      	orrs	r3, r2
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	e056      	b.n	8007bb0 <USB_EPStartXfer+0x6a6>
 8007b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10a      	bne.n	8007b20 <USB_EPStartXfer+0x616>
 8007b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b1c:	801a      	strh	r2, [r3, #0]
 8007b1e:	e047      	b.n	8007bb0 <USB_EPStartXfer+0x6a6>
 8007b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <USB_EPStartXfer+0x636>
 8007b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	029b      	lsls	r3, r3, #10
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	4313      	orrs	r3, r2
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	e02a      	b.n	8007bb0 <USB_EPStartXfer+0x6a6>
 8007b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d122      	bne.n	8007bb0 <USB_EPStartXfer+0x6a6>
 8007b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	653b      	str	r3, [r7, #80]	; 0x50
 8007b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8a:	4413      	add	r3, r2
 8007b8c:	653b      	str	r3, [r7, #80]	; 0x50
 8007b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	00da      	lsls	r2, r3, #3
 8007b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	891b      	ldrh	r3, [r3, #8]
 8007bbc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6959      	ldr	r1, [r3, #20]
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007bd6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007bda:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007bde:	6800      	ldr	r0, [r0, #0]
 8007be0:	f001 f99f 	bl	8008f22 <USB_WritePMA>
            ep->xfer_buff += len;
 8007be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf4:	441a      	add	r2, r3
 8007bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6a1a      	ldr	r2, [r3, #32]
 8007c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d90f      	bls.n	8007c3e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6a1a      	ldr	r2, [r3, #32]
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2e:	1ad2      	subs	r2, r2, r3
 8007c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	621a      	str	r2, [r3, #32]
 8007c3c:	e00e      	b.n	8007c5c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	643b      	str	r3, [r7, #64]	; 0x40
 8007c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	785b      	ldrb	r3, [r3, #1]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d177      	bne.n	8007d68 <USB_EPStartXfer+0x85e>
 8007c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	4413      	add	r3, r2
 8007c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	00da      	lsls	r2, r3, #3
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	4413      	add	r3, r2
 8007cae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc2:	801a      	strh	r2, [r3, #0]
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8007cca:	d921      	bls.n	8007d10 <USB_EPStartXfer+0x806>
 8007ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cda:	f003 031f 	and.w	r3, r3, #31
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d104      	bne.n	8007cec <USB_EPStartXfer+0x7e2>
 8007ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	029b      	lsls	r3, r3, #10
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	e050      	b.n	8007db2 <USB_EPStartXfer+0x8a8>
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <USB_EPStartXfer+0x824>
 8007d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2a:	801a      	strh	r2, [r3, #0]
 8007d2c:	e041      	b.n	8007db2 <USB_EPStartXfer+0x8a8>
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d32:	085b      	lsrs	r3, r3, #1
 8007d34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <USB_EPStartXfer+0x844>
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d48:	3301      	adds	r3, #1
 8007d4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	029b      	lsls	r3, r3, #10
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	e024      	b.n	8007db2 <USB_EPStartXfer+0x8a8>
 8007d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	785b      	ldrb	r3, [r3, #1]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d11c      	bne.n	8007db2 <USB_EPStartXfer+0x8a8>
 8007d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8c:	4413      	add	r3, r2
 8007d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	00da      	lsls	r2, r3, #3
 8007d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da0:	4413      	add	r3, r2
 8007da2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	895b      	ldrh	r3, [r3, #10]
 8007dbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6959      	ldr	r1, [r3, #20]
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007dd8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007ddc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007de0:	6800      	ldr	r0, [r0, #0]
 8007de2:	f001 f89e 	bl	8008f22 <USB_WritePMA>
 8007de6:	e227      	b.n	8008238 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	441a      	add	r2, r3
 8007e3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e74:	4413      	add	r3, r2
 8007e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	00da      	lsls	r2, r3, #3
 8007e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e88:	4413      	add	r3, r2
 8007e8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	891b      	ldrh	r3, [r3, #8]
 8007ea6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6959      	ldr	r1, [r3, #20]
 8007eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ec0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007ec4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ec8:	6800      	ldr	r0, [r0, #0]
 8007eca:	f001 f82a 	bl	8008f22 <USB_WritePMA>
 8007ece:	e1b3      	b.n	8008238 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6a1a      	ldr	r2, [r3, #32]
 8007edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee0:	1ad2      	subs	r2, r2, r3
 8007ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80c6 	beq.w	80080a2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	673b      	str	r3, [r7, #112]	; 0x70
 8007f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	785b      	ldrb	r3, [r3, #1]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d177      	bne.n	8008022 <USB_EPStartXfer+0xb18>
 8007f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f52:	4413      	add	r3, r2
 8007f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	00da      	lsls	r2, r3, #3
 8007f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f66:	4413      	add	r3, r2
 8007f68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f82:	2b3e      	cmp	r3, #62	; 0x3e
 8007f84:	d921      	bls.n	8007fca <USB_EPStartXfer+0xac0>
 8007f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d104      	bne.n	8007fa6 <USB_EPStartXfer+0xa9c>
 8007f9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	029b      	lsls	r3, r3, #10
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc6:	801a      	strh	r2, [r3, #0]
 8007fc8:	e050      	b.n	800806c <USB_EPStartXfer+0xb62>
 8007fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <USB_EPStartXfer+0xade>
 8007fd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	e041      	b.n	800806c <USB_EPStartXfer+0xb62>
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fec:	085b      	lsrs	r3, r3, #1
 8007fee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <USB_EPStartXfer+0xafe>
 8007ffe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008002:	3301      	adds	r3, #1
 8008004:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29a      	uxth	r2, r3
 800800e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008012:	b29b      	uxth	r3, r3
 8008014:	029b      	lsls	r3, r3, #10
 8008016:	b29b      	uxth	r3, r3
 8008018:	4313      	orrs	r3, r2
 800801a:	b29a      	uxth	r2, r3
 800801c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800801e:	801a      	strh	r2, [r3, #0]
 8008020:	e024      	b.n	800806c <USB_EPStartXfer+0xb62>
 8008022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d11c      	bne.n	800806c <USB_EPStartXfer+0xb62>
 8008032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008040:	b29b      	uxth	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008046:	4413      	add	r3, r2
 8008048:	673b      	str	r3, [r7, #112]	; 0x70
 800804a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800804e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	00da      	lsls	r2, r3, #3
 8008058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800805a:	4413      	add	r3, r2
 800805c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008066:	b29a      	uxth	r2, r3
 8008068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800806c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	895b      	ldrh	r3, [r3, #10]
 8008078:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800807c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6959      	ldr	r1, [r3, #20]
 8008088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800808c:	b29b      	uxth	r3, r3
 800808e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008092:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008096:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	f000 ff41 	bl	8008f22 <USB_WritePMA>
 80080a0:	e0ca      	b.n	8008238 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d177      	bne.n	80081a2 <USB_EPStartXfer+0xc98>
 80080b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	461a      	mov	r2, r3
 80080d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080d2:	4413      	add	r3, r2
 80080d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	00da      	lsls	r2, r3, #3
 80080e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80080e6:	4413      	add	r3, r2
 80080e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80080ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080fc:	801a      	strh	r2, [r3, #0]
 80080fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008102:	2b3e      	cmp	r3, #62	; 0x3e
 8008104:	d921      	bls.n	800814a <USB_EPStartXfer+0xc40>
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800810a:	095b      	lsrs	r3, r3, #5
 800810c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008114:	f003 031f 	and.w	r3, r3, #31
 8008118:	2b00      	cmp	r3, #0
 800811a:	d104      	bne.n	8008126 <USB_EPStartXfer+0xc1c>
 800811c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008120:	3b01      	subs	r3, #1
 8008122:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29a      	uxth	r2, r3
 800812c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008130:	b29b      	uxth	r3, r3
 8008132:	029b      	lsls	r3, r3, #10
 8008134:	b29b      	uxth	r3, r3
 8008136:	4313      	orrs	r3, r2
 8008138:	b29b      	uxth	r3, r3
 800813a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008142:	b29a      	uxth	r2, r3
 8008144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008146:	801a      	strh	r2, [r3, #0]
 8008148:	e05c      	b.n	8008204 <USB_EPStartXfer+0xcfa>
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <USB_EPStartXfer+0xc5e>
 8008152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008160:	b29a      	uxth	r2, r3
 8008162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	e04d      	b.n	8008204 <USB_EPStartXfer+0xcfa>
 8008168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800816c:	085b      	lsrs	r3, r3, #1
 800816e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d004      	beq.n	8008188 <USB_EPStartXfer+0xc7e>
 800817e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008182:	3301      	adds	r3, #1
 8008184:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29a      	uxth	r2, r3
 800818e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008192:	b29b      	uxth	r3, r3
 8008194:	029b      	lsls	r3, r3, #10
 8008196:	b29b      	uxth	r3, r3
 8008198:	4313      	orrs	r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800819e:	801a      	strh	r2, [r3, #0]
 80081a0:	e030      	b.n	8008204 <USB_EPStartXfer+0xcfa>
 80081a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	785b      	ldrb	r3, [r3, #1]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d128      	bne.n	8008204 <USB_EPStartXfer+0xcfa>
 80081b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081d6:	4413      	add	r3, r2
 80081d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	00da      	lsls	r2, r3, #3
 80081ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081ee:	4413      	add	r3, r2
 80081f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008202:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	891b      	ldrh	r3, [r3, #8]
 8008210:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6959      	ldr	r1, [r3, #20]
 8008220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008224:	b29b      	uxth	r3, r3
 8008226:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800822a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800822e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008232:	6800      	ldr	r0, [r0, #0]
 8008234:	f000 fe75 	bl	8008f22 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825e:	817b      	strh	r3, [r7, #10]
 8008260:	897b      	ldrh	r3, [r7, #10]
 8008262:	f083 0310 	eor.w	r3, r3, #16
 8008266:	817b      	strh	r3, [r7, #10]
 8008268:	897b      	ldrh	r3, [r7, #10]
 800826a:	f083 0320 	eor.w	r3, r3, #32
 800826e:	817b      	strh	r3, [r7, #10]
 8008270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	441a      	add	r2, r3
 800828a:	897b      	ldrh	r3, [r7, #10]
 800828c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	b29b      	uxth	r3, r3
 800829e:	8013      	strh	r3, [r2, #0]
 80082a0:	f000 bcde 	b.w	8008c60 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	7b1b      	ldrb	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 80bb 	bne.w	800842c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80082b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699a      	ldr	r2, [r3, #24]
 80082c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d917      	bls.n	8008302 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80082d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80082e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f2:	1ad2      	subs	r2, r2, r3
 80082f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	619a      	str	r2, [r3, #24]
 8008300:	e00e      	b.n	8008320 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2200      	movs	r2, #0
 800831e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800832e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800833c:	b29b      	uxth	r3, r3
 800833e:	461a      	mov	r2, r3
 8008340:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008344:	4413      	add	r3, r2
 8008346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800834a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	00da      	lsls	r2, r3, #3
 8008358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800835c:	4413      	add	r3, r2
 800835e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800837e:	2b3e      	cmp	r3, #62	; 0x3e
 8008380:	d924      	bls.n	80083cc <USB_EPStartXfer+0xec2>
 8008382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800838c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008390:	f003 031f 	and.w	r3, r3, #31
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <USB_EPStartXfer+0xe98>
 8008398:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800839c:	3b01      	subs	r3, #1
 800839e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	029b      	lsls	r3, r3, #10
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	4313      	orrs	r3, r2
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	f000 bc10 	b.w	8008bec <USB_EPStartXfer+0x16e2>
 80083cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10c      	bne.n	80083ee <USB_EPStartXfer+0xee4>
 80083d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083ea:	801a      	strh	r2, [r3, #0]
 80083ec:	e3fe      	b.n	8008bec <USB_EPStartXfer+0x16e2>
 80083ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f2:	085b      	lsrs	r3, r3, #1
 80083f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <USB_EPStartXfer+0xf04>
 8008404:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008408:	3301      	adds	r3, #1
 800840a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800840e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	b29a      	uxth	r2, r3
 8008416:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800841a:	b29b      	uxth	r3, r3
 800841c:	029b      	lsls	r3, r3, #10
 800841e:	b29b      	uxth	r3, r3
 8008420:	4313      	orrs	r3, r2
 8008422:	b29a      	uxth	r2, r3
 8008424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008428:	801a      	strh	r2, [r3, #0]
 800842a:	e3df      	b.n	8008bec <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800842c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	78db      	ldrb	r3, [r3, #3]
 8008438:	2b02      	cmp	r3, #2
 800843a:	f040 8218 	bne.w	800886e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800843e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 809d 	bne.w	800858a <USB_EPStartXfer+0x1080>
 8008450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800845e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800846c:	b29b      	uxth	r3, r3
 800846e:	461a      	mov	r2, r3
 8008470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008474:	4413      	add	r3, r2
 8008476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800847a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	00da      	lsls	r2, r3, #3
 8008488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800848c:	4413      	add	r3, r2
 800848e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b29b      	uxth	r3, r3
 800849e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084a8:	801a      	strh	r2, [r3, #0]
 80084aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b3e      	cmp	r3, #62	; 0x3e
 80084b8:	d92b      	bls.n	8008512 <USB_EPStartXfer+0x1008>
 80084ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f003 031f 	and.w	r3, r3, #31
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d104      	bne.n	80084ea <USB_EPStartXfer+0xfe0>
 80084e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e4:	3b01      	subs	r3, #1
 80084e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	029b      	lsls	r3, r3, #10
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	4313      	orrs	r3, r2
 80084fe:	b29b      	uxth	r3, r3
 8008500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008508:	b29a      	uxth	r2, r3
 800850a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800850e:	801a      	strh	r2, [r3, #0]
 8008510:	e070      	b.n	80085f4 <USB_EPStartXfer+0x10ea>
 8008512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10c      	bne.n	800853c <USB_EPStartXfer+0x1032>
 8008522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008532:	b29a      	uxth	r2, r3
 8008534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	e05b      	b.n	80085f4 <USB_EPStartXfer+0x10ea>
 800853c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	085b      	lsrs	r3, r3, #1
 800854a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800854e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d004      	beq.n	800856c <USB_EPStartXfer+0x1062>
 8008562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008566:	3301      	adds	r3, #1
 8008568:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800856c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29a      	uxth	r2, r3
 8008574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008578:	b29b      	uxth	r3, r3
 800857a:	029b      	lsls	r3, r3, #10
 800857c:	b29b      	uxth	r3, r3
 800857e:	4313      	orrs	r3, r2
 8008580:	b29a      	uxth	r2, r3
 8008582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	e034      	b.n	80085f4 <USB_EPStartXfer+0x10ea>
 800858a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800858e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d12c      	bne.n	80085f4 <USB_EPStartXfer+0x10ea>
 800859a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085be:	4413      	add	r3, r2
 80085c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	00da      	lsls	r2, r3, #3
 80085d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085d6:	4413      	add	r3, r2
 80085d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 809d 	bne.w	800874e <USB_EPStartXfer+0x1244>
 8008614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008630:	b29b      	uxth	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008638:	4413      	add	r3, r2
 800863a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800863e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	00da      	lsls	r2, r3, #3
 800864c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008650:	4413      	add	r3, r2
 8008652:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008656:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800865a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	b29b      	uxth	r3, r3
 8008662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008666:	b29a      	uxth	r2, r3
 8008668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b3e      	cmp	r3, #62	; 0x3e
 800867c:	d92b      	bls.n	80086d6 <USB_EPStartXfer+0x11cc>
 800867e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	095b      	lsrs	r3, r3, #5
 800868c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <USB_EPStartXfer+0x11a4>
 80086a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a8:	3b01      	subs	r3, #1
 80086aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	029b      	lsls	r3, r3, #10
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4313      	orrs	r3, r2
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e069      	b.n	80087aa <USB_EPStartXfer+0x12a0>
 80086d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10c      	bne.n	8008700 <USB_EPStartXfer+0x11f6>
 80086e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086ea:	881b      	ldrh	r3, [r3, #0]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086fc:	801a      	strh	r2, [r3, #0]
 80086fe:	e054      	b.n	80087aa <USB_EPStartXfer+0x12a0>
 8008700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d004      	beq.n	8008730 <USB_EPStartXfer+0x1226>
 8008726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872a:	3301      	adds	r3, #1
 800872c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	b29a      	uxth	r2, r3
 8008738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800873c:	b29b      	uxth	r3, r3
 800873e:	029b      	lsls	r3, r3, #10
 8008740:	b29b      	uxth	r3, r3
 8008742:	4313      	orrs	r3, r2
 8008744:	b29a      	uxth	r2, r3
 8008746:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800874a:	801a      	strh	r2, [r3, #0]
 800874c:	e02d      	b.n	80087aa <USB_EPStartXfer+0x12a0>
 800874e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d125      	bne.n	80087aa <USB_EPStartXfer+0x12a0>
 800875e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876c:	b29b      	uxth	r3, r3
 800876e:	461a      	mov	r2, r3
 8008770:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008774:	4413      	add	r3, r2
 8008776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800877a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	00da      	lsls	r2, r3, #3
 8008788:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800878c:	4413      	add	r3, r2
 800878e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087a8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80087aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8218 	beq.w	8008bec <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80087bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80087e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d005      	beq.n	80087f4 <USB_EPStartXfer+0x12ea>
 80087e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80087ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10d      	bne.n	8008810 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80087f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f040 81f5 	bne.w	8008bec <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008802:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	f040 81ee 	bne.w	8008bec <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29b      	uxth	r3, r3
 800882e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008836:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800883a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	441a      	add	r2, r3
 8008854:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800885c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008864:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008868:	b29b      	uxth	r3, r3
 800886a:	8013      	strh	r3, [r2, #0]
 800886c:	e1be      	b.n	8008bec <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800886e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	78db      	ldrb	r3, [r3, #3]
 800887a:	2b01      	cmp	r3, #1
 800887c:	f040 81b4 	bne.w	8008be8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	429a      	cmp	r2, r3
 800889a:	d917      	bls.n	80088cc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800889c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	699a      	ldr	r2, [r3, #24]
 80088b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088bc:	1ad2      	subs	r2, r2, r3
 80088be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	619a      	str	r2, [r3, #24]
 80088ca:	e00e      	b.n	80088ea <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80088cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80088dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2200      	movs	r2, #0
 80088e8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f040 8085 	bne.w	8008a06 <USB_EPStartXfer+0x14fc>
 80088fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800890a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008918:	b29b      	uxth	r3, r3
 800891a:	461a      	mov	r2, r3
 800891c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008920:	4413      	add	r3, r2
 8008922:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800892a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	00da      	lsls	r2, r3, #3
 8008934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008938:	4413      	add	r3, r2
 800893a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800893e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008942:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800894e:	b29a      	uxth	r2, r3
 8008950:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008954:	801a      	strh	r2, [r3, #0]
 8008956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800895a:	2b3e      	cmp	r3, #62	; 0x3e
 800895c:	d923      	bls.n	80089a6 <USB_EPStartXfer+0x149c>
 800895e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896c:	f003 031f 	and.w	r3, r3, #31
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <USB_EPStartXfer+0x1474>
 8008974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008978:	3b01      	subs	r3, #1
 800897a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800897e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29a      	uxth	r2, r3
 8008986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800898a:	b29b      	uxth	r3, r3
 800898c:	029b      	lsls	r3, r3, #10
 800898e:	b29b      	uxth	r3, r3
 8008990:	4313      	orrs	r3, r2
 8008992:	b29b      	uxth	r3, r3
 8008994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800899c:	b29a      	uxth	r2, r3
 800899e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089a2:	801a      	strh	r2, [r3, #0]
 80089a4:	e060      	b.n	8008a68 <USB_EPStartXfer+0x155e>
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10c      	bne.n	80089c8 <USB_EPStartXfer+0x14be>
 80089ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089be:	b29a      	uxth	r2, r3
 80089c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089c4:	801a      	strh	r2, [r3, #0]
 80089c6:	e04f      	b.n	8008a68 <USB_EPStartXfer+0x155e>
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <USB_EPStartXfer+0x14de>
 80089de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e2:	3301      	adds	r3, #1
 80089e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	029b      	lsls	r3, r3, #10
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	4313      	orrs	r3, r2
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a02:	801a      	strh	r2, [r3, #0]
 8008a04:	e030      	b.n	8008a68 <USB_EPStartXfer+0x155e>
 8008a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	785b      	ldrb	r3, [r3, #1]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d128      	bne.n	8008a68 <USB_EPStartXfer+0x155e>
 8008a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	461a      	mov	r2, r3
 8008a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	00da      	lsls	r2, r3, #3
 8008a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a52:	4413      	add	r3, r2
 8008a54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008a66:	801a      	strh	r2, [r3, #0]
 8008a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f040 8085 	bne.w	8008b92 <USB_EPStartXfer+0x1688>
 8008a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008aac:	4413      	add	r3, r2
 8008aae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	00da      	lsls	r2, r3, #3
 8008ac0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ace:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ae0:	801a      	strh	r2, [r3, #0]
 8008ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ae8:	d923      	bls.n	8008b32 <USB_EPStartXfer+0x1628>
 8008aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aee:	095b      	lsrs	r3, r3, #5
 8008af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af8:	f003 031f 	and.w	r3, r3, #31
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d104      	bne.n	8008b0a <USB_EPStartXfer+0x1600>
 8008b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b04:	3b01      	subs	r3, #1
 8008b06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	029b      	lsls	r3, r3, #10
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b2e:	801a      	strh	r2, [r3, #0]
 8008b30:	e05c      	b.n	8008bec <USB_EPStartXfer+0x16e2>
 8008b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10c      	bne.n	8008b54 <USB_EPStartXfer+0x164a>
 8008b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b50:	801a      	strh	r2, [r3, #0]
 8008b52:	e04b      	b.n	8008bec <USB_EPStartXfer+0x16e2>
 8008b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b58:	085b      	lsrs	r3, r3, #1
 8008b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d004      	beq.n	8008b74 <USB_EPStartXfer+0x166a>
 8008b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b6e:	3301      	adds	r3, #1
 8008b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	029b      	lsls	r3, r3, #10
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	4313      	orrs	r3, r2
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b8e:	801a      	strh	r2, [r3, #0]
 8008b90:	e02c      	b.n	8008bec <USB_EPStartXfer+0x16e2>
 8008b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	785b      	ldrb	r3, [r3, #1]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d124      	bne.n	8008bec <USB_EPStartXfer+0x16e2>
 8008ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008bb8:	4413      	add	r3, r2
 8008bba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	00da      	lsls	r2, r3, #3
 8008bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008be4:	801a      	strh	r2, [r3, #0]
 8008be6:	e001      	b.n	8008bec <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e03a      	b.n	8008c62 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c12:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c1e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c2a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	441a      	add	r2, r3
 8008c48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d020      	beq.n	8008cc0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c94:	81bb      	strh	r3, [r7, #12]
 8008c96:	89bb      	ldrh	r3, [r7, #12]
 8008c98:	f083 0310 	eor.w	r3, r3, #16
 8008c9c:	81bb      	strh	r3, [r7, #12]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	441a      	add	r2, r3
 8008ca8:	89bb      	ldrh	r3, [r7, #12]
 8008caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	8013      	strh	r3, [r2, #0]
 8008cbe:	e01f      	b.n	8008d00 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd6:	81fb      	strh	r3, [r7, #14]
 8008cd8:	89fb      	ldrh	r3, [r7, #14]
 8008cda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cde:	81fb      	strh	r3, [r7, #14]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	441a      	add	r2, r3
 8008cea:	89fb      	ldrh	r3, [r7, #14]
 8008cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b087      	sub	sp, #28
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	7b1b      	ldrb	r3, [r3, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f040 809d 	bne.w	8008e5c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d04c      	beq.n	8008dc4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	823b      	strh	r3, [r7, #16]
 8008d38:	8a3b      	ldrh	r3, [r7, #16]
 8008d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d01b      	beq.n	8008d7a <USB_EPClearStall+0x6c>
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d58:	81fb      	strh	r3, [r7, #14]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	441a      	add	r2, r3
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	78db      	ldrb	r3, [r3, #3]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d06c      	beq.n	8008e5c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d98:	81bb      	strh	r3, [r7, #12]
 8008d9a:	89bb      	ldrh	r3, [r7, #12]
 8008d9c:	f083 0320 	eor.w	r3, r3, #32
 8008da0:	81bb      	strh	r3, [r7, #12]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	441a      	add	r2, r3
 8008dac:	89bb      	ldrh	r3, [r7, #12]
 8008dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	8013      	strh	r3, [r2, #0]
 8008dc2:	e04b      	b.n	8008e5c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	82fb      	strh	r3, [r7, #22]
 8008dd2:	8afb      	ldrh	r3, [r7, #22]
 8008dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01b      	beq.n	8008e14 <USB_EPClearStall+0x106>
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	82bb      	strh	r3, [r7, #20]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	441a      	add	r2, r3
 8008dfe:	8abb      	ldrh	r3, [r7, #20]
 8008e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2a:	827b      	strh	r3, [r7, #18]
 8008e2c:	8a7b      	ldrh	r3, [r7, #18]
 8008e2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e32:	827b      	strh	r3, [r7, #18]
 8008e34:	8a7b      	ldrh	r3, [r7, #18]
 8008e36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e3a:	827b      	strh	r3, [r7, #18]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	441a      	add	r2, r3
 8008e46:	8a7b      	ldrh	r3, [r7, #18]
 8008e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e76:	78fb      	ldrb	r3, [r7, #3]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d103      	bne.n	8008e84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2280      	movs	r2, #128	; 0x80
 8008e80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008efc:	68fb      	ldr	r3, [r7, #12]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b08b      	sub	sp, #44	; 0x2c
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	461a      	mov	r2, r3
 8008f30:	460b      	mov	r3, r1
 8008f32:	80fb      	strh	r3, [r7, #6]
 8008f34:	4613      	mov	r3, r2
 8008f36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f38:	88bb      	ldrh	r3, [r7, #4]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	085b      	lsrs	r3, r3, #1
 8008f3e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f48:	88fa      	ldrh	r2, [r7, #6]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f52:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
 8008f58:	e01b      	b.n	8008f92 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	3301      	adds	r3, #1
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	b21a      	sxth	r2, r3
 8008f6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	b21b      	sxth	r3, r3
 8008f72:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	8a7a      	ldrh	r2, [r7, #18]
 8008f78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	3301      	adds	r3, #1
 8008f84:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e0      	bne.n	8008f5a <USB_WritePMA+0x38>
  }
}
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
 8008f9c:	372c      	adds	r7, #44	; 0x2c
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b08b      	sub	sp, #44	; 0x2c
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	80fb      	strh	r3, [r7, #6]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008fbc:	88bb      	ldrh	r3, [r7, #4]
 8008fbe:	085b      	lsrs	r3, r3, #1
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fcc:	88fa      	ldrh	r2, [r7, #6]
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fd6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
 8008fdc:	e018      	b.n	8009010 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	3302      	adds	r3, #2
 8008fea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	0a1b      	lsrs	r3, r3, #8
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	3301      	adds	r3, #1
 8009008:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	3b01      	subs	r3, #1
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e3      	bne.n	8008fde <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009016:	88bb      	ldrh	r3, [r7, #4]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	b29b      	uxth	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d007      	beq.n	8009032 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	b29b      	uxth	r3, r3
 8009028:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	b2da      	uxtb	r2, r3
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	701a      	strb	r2, [r3, #0]
  }
}
 8009032:	bf00      	nop
 8009034:	372c      	adds	r7, #44	; 0x2c
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
	...

08009040 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800904c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009050:	f002 fd6c 	bl	800bb2c <USBD_static_malloc>
 8009054:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d109      	bne.n	8009070 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	32b0      	adds	r2, #176	; 0xb0
 8009066:	2100      	movs	r1, #0
 8009068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800906c:	2302      	movs	r3, #2
 800906e:	e0d4      	b.n	800921a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009070:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009074:	2100      	movs	r1, #0
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f003 fc20 	bl	800c8bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	32b0      	adds	r2, #176	; 0xb0
 8009086:	68f9      	ldr	r1, [r7, #12]
 8009088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	32b0      	adds	r2, #176	; 0xb0
 8009096:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	7c1b      	ldrb	r3, [r3, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d138      	bne.n	800911a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80090a8:	4b5e      	ldr	r3, [pc, #376]	; (8009224 <USBD_CDC_Init+0x1e4>)
 80090aa:	7819      	ldrb	r1, [r3, #0]
 80090ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090b0:	2202      	movs	r2, #2
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f002 fb3c 	bl	800b730 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80090b8:	4b5a      	ldr	r3, [pc, #360]	; (8009224 <USBD_CDC_Init+0x1e4>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	f003 020f 	and.w	r2, r3, #15
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	440b      	add	r3, r1
 80090cc:	3324      	adds	r3, #36	; 0x24
 80090ce:	2201      	movs	r2, #1
 80090d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80090d2:	4b55      	ldr	r3, [pc, #340]	; (8009228 <USBD_CDC_Init+0x1e8>)
 80090d4:	7819      	ldrb	r1, [r3, #0]
 80090d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090da:	2202      	movs	r2, #2
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f002 fb27 	bl	800b730 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80090e2:	4b51      	ldr	r3, [pc, #324]	; (8009228 <USBD_CDC_Init+0x1e8>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	f003 020f 	and.w	r2, r3, #15
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	440b      	add	r3, r1
 80090f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090fa:	2201      	movs	r2, #1
 80090fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80090fe:	4b4b      	ldr	r3, [pc, #300]	; (800922c <USBD_CDC_Init+0x1ec>)
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	f003 020f 	and.w	r2, r3, #15
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	4613      	mov	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	3326      	adds	r3, #38	; 0x26
 8009114:	2210      	movs	r2, #16
 8009116:	801a      	strh	r2, [r3, #0]
 8009118:	e035      	b.n	8009186 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800911a:	4b42      	ldr	r3, [pc, #264]	; (8009224 <USBD_CDC_Init+0x1e4>)
 800911c:	7819      	ldrb	r1, [r3, #0]
 800911e:	2340      	movs	r3, #64	; 0x40
 8009120:	2202      	movs	r2, #2
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f002 fb04 	bl	800b730 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009128:	4b3e      	ldr	r3, [pc, #248]	; (8009224 <USBD_CDC_Init+0x1e4>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	f003 020f 	and.w	r2, r3, #15
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	440b      	add	r3, r1
 800913c:	3324      	adds	r3, #36	; 0x24
 800913e:	2201      	movs	r2, #1
 8009140:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009142:	4b39      	ldr	r3, [pc, #228]	; (8009228 <USBD_CDC_Init+0x1e8>)
 8009144:	7819      	ldrb	r1, [r3, #0]
 8009146:	2340      	movs	r3, #64	; 0x40
 8009148:	2202      	movs	r2, #2
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f002 faf0 	bl	800b730 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009150:	4b35      	ldr	r3, [pc, #212]	; (8009228 <USBD_CDC_Init+0x1e8>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	f003 020f 	and.w	r2, r3, #15
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	440b      	add	r3, r1
 8009164:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009168:	2201      	movs	r2, #1
 800916a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800916c:	4b2f      	ldr	r3, [pc, #188]	; (800922c <USBD_CDC_Init+0x1ec>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	f003 020f 	and.w	r2, r3, #15
 8009174:	6879      	ldr	r1, [r7, #4]
 8009176:	4613      	mov	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4413      	add	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	440b      	add	r3, r1
 8009180:	3326      	adds	r3, #38	; 0x26
 8009182:	2210      	movs	r2, #16
 8009184:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009186:	4b29      	ldr	r3, [pc, #164]	; (800922c <USBD_CDC_Init+0x1ec>)
 8009188:	7819      	ldrb	r1, [r3, #0]
 800918a:	2308      	movs	r3, #8
 800918c:	2203      	movs	r2, #3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f002 face 	bl	800b730 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009194:	4b25      	ldr	r3, [pc, #148]	; (800922c <USBD_CDC_Init+0x1ec>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	f003 020f 	and.w	r2, r3, #15
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	3324      	adds	r3, #36	; 0x24
 80091aa:	2201      	movs	r2, #1
 80091ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	33b0      	adds	r3, #176	; 0xb0
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80091e4:	2302      	movs	r3, #2
 80091e6:	e018      	b.n	800921a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	7c1b      	ldrb	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80091f0:	4b0d      	ldr	r3, [pc, #52]	; (8009228 <USBD_CDC_Init+0x1e8>)
 80091f2:	7819      	ldrb	r1, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f002 fc12 	bl	800ba28 <USBD_LL_PrepareReceive>
 8009204:	e008      	b.n	8009218 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009206:	4b08      	ldr	r3, [pc, #32]	; (8009228 <USBD_CDC_Init+0x1e8>)
 8009208:	7819      	ldrb	r1, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009210:	2340      	movs	r3, #64	; 0x40
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f002 fc08 	bl	800ba28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000093 	.word	0x20000093
 8009228:	20000094 	.word	0x20000094
 800922c:	20000095 	.word	0x20000095

08009230 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800923c:	4b3a      	ldr	r3, [pc, #232]	; (8009328 <USBD_CDC_DeInit+0xf8>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f002 fab2 	bl	800b7ac <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009248:	4b37      	ldr	r3, [pc, #220]	; (8009328 <USBD_CDC_DeInit+0xf8>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	f003 020f 	and.w	r2, r3, #15
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	3324      	adds	r3, #36	; 0x24
 800925e:	2200      	movs	r2, #0
 8009260:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009262:	4b32      	ldr	r3, [pc, #200]	; (800932c <USBD_CDC_DeInit+0xfc>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f002 fa9f 	bl	800b7ac <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800926e:	4b2f      	ldr	r3, [pc, #188]	; (800932c <USBD_CDC_DeInit+0xfc>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	f003 020f 	and.w	r2, r3, #15
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	440b      	add	r3, r1
 8009282:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009286:	2200      	movs	r2, #0
 8009288:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800928a:	4b29      	ldr	r3, [pc, #164]	; (8009330 <USBD_CDC_DeInit+0x100>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f002 fa8b 	bl	800b7ac <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009296:	4b26      	ldr	r3, [pc, #152]	; (8009330 <USBD_CDC_DeInit+0x100>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	f003 020f 	and.w	r2, r3, #15
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	3324      	adds	r3, #36	; 0x24
 80092ac:	2200      	movs	r2, #0
 80092ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80092b0:	4b1f      	ldr	r3, [pc, #124]	; (8009330 <USBD_CDC_DeInit+0x100>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	f003 020f 	and.w	r2, r3, #15
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	4613      	mov	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	440b      	add	r3, r1
 80092c4:	3326      	adds	r3, #38	; 0x26
 80092c6:	2200      	movs	r2, #0
 80092c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	32b0      	adds	r2, #176	; 0xb0
 80092d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01f      	beq.n	800931c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	33b0      	adds	r3, #176	; 0xb0
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	32b0      	adds	r2, #176	; 0xb0
 80092fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fe:	4618      	mov	r0, r3
 8009300:	f002 fc22 	bl	800bb48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	32b0      	adds	r2, #176	; 0xb0
 800930e:	2100      	movs	r1, #0
 8009310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000093 	.word	0x20000093
 800932c:	20000094 	.word	0x20000094
 8009330:	20000095 	.word	0x20000095

08009334 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	32b0      	adds	r2, #176	; 0xb0
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	e0bf      	b.n	80094e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800936c:	2b00      	cmp	r3, #0
 800936e:	d050      	beq.n	8009412 <USBD_CDC_Setup+0xde>
 8009370:	2b20      	cmp	r3, #32
 8009372:	f040 80af 	bne.w	80094d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	88db      	ldrh	r3, [r3, #6]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d03a      	beq.n	80093f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	b25b      	sxtb	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	da1b      	bge.n	80093c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	33b0      	adds	r3, #176	; 0xb0
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800939e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	88d2      	ldrh	r2, [r2, #6]
 80093a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	88db      	ldrh	r3, [r3, #6]
 80093aa:	2b07      	cmp	r3, #7
 80093ac:	bf28      	it	cs
 80093ae:	2307      	movcs	r3, #7
 80093b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	89fa      	ldrh	r2, [r7, #14]
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 fd21 	bl	800ae00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80093be:	e090      	b.n	80094e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	785a      	ldrb	r2, [r3, #1]
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	88db      	ldrh	r3, [r3, #6]
 80093ce:	2b3f      	cmp	r3, #63	; 0x3f
 80093d0:	d803      	bhi.n	80093da <USBD_CDC_Setup+0xa6>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	88db      	ldrh	r3, [r3, #6]
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	e000      	b.n	80093dc <USBD_CDC_Setup+0xa8>
 80093da:	2240      	movs	r2, #64	; 0x40
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80093e2:	6939      	ldr	r1, [r7, #16]
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80093ea:	461a      	mov	r2, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 fd33 	bl	800ae58 <USBD_CtlPrepareRx>
      break;
 80093f2:	e076      	b.n	80094e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	33b0      	adds	r3, #176	; 0xb0
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	7850      	ldrb	r0, [r2, #1]
 800940a:	2200      	movs	r2, #0
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	4798      	blx	r3
      break;
 8009410:	e067      	b.n	80094e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	785b      	ldrb	r3, [r3, #1]
 8009416:	2b0b      	cmp	r3, #11
 8009418:	d851      	bhi.n	80094be <USBD_CDC_Setup+0x18a>
 800941a:	a201      	add	r2, pc, #4	; (adr r2, 8009420 <USBD_CDC_Setup+0xec>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	08009451 	.word	0x08009451
 8009424:	080094cd 	.word	0x080094cd
 8009428:	080094bf 	.word	0x080094bf
 800942c:	080094bf 	.word	0x080094bf
 8009430:	080094bf 	.word	0x080094bf
 8009434:	080094bf 	.word	0x080094bf
 8009438:	080094bf 	.word	0x080094bf
 800943c:	080094bf 	.word	0x080094bf
 8009440:	080094bf 	.word	0x080094bf
 8009444:	080094bf 	.word	0x080094bf
 8009448:	0800947b 	.word	0x0800947b
 800944c:	080094a5 	.word	0x080094a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b03      	cmp	r3, #3
 800945a:	d107      	bne.n	800946c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800945c:	f107 030a 	add.w	r3, r7, #10
 8009460:	2202      	movs	r2, #2
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 fccb 	bl	800ae00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800946a:	e032      	b.n	80094d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 fc55 	bl	800ad1e <USBD_CtlError>
            ret = USBD_FAIL;
 8009474:	2303      	movs	r3, #3
 8009476:	75fb      	strb	r3, [r7, #23]
          break;
 8009478:	e02b      	b.n	80094d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b03      	cmp	r3, #3
 8009484:	d107      	bne.n	8009496 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009486:	f107 030d 	add.w	r3, r7, #13
 800948a:	2201      	movs	r2, #1
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fcb6 	bl	800ae00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009494:	e01d      	b.n	80094d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f001 fc40 	bl	800ad1e <USBD_CtlError>
            ret = USBD_FAIL;
 800949e:	2303      	movs	r3, #3
 80094a0:	75fb      	strb	r3, [r7, #23]
          break;
 80094a2:	e016      	b.n	80094d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d00f      	beq.n	80094d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 fc33 	bl	800ad1e <USBD_CtlError>
            ret = USBD_FAIL;
 80094b8:	2303      	movs	r3, #3
 80094ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80094bc:	e008      	b.n	80094d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 fc2c 	bl	800ad1e <USBD_CtlError>
          ret = USBD_FAIL;
 80094c6:	2303      	movs	r3, #3
 80094c8:	75fb      	strb	r3, [r7, #23]
          break;
 80094ca:	e002      	b.n	80094d2 <USBD_CDC_Setup+0x19e>
          break;
 80094cc:	bf00      	nop
 80094ce:	e008      	b.n	80094e2 <USBD_CDC_Setup+0x1ae>
          break;
 80094d0:	bf00      	nop
      }
      break;
 80094d2:	e006      	b.n	80094e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 fc21 	bl	800ad1e <USBD_CtlError>
      ret = USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	75fb      	strb	r3, [r7, #23]
      break;
 80094e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	32b0      	adds	r2, #176	; 0xb0
 800950a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009512:	2303      	movs	r3, #3
 8009514:	e065      	b.n	80095e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	32b0      	adds	r2, #176	; 0xb0
 8009520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009524:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	f003 020f 	and.w	r2, r3, #15
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	3318      	adds	r3, #24
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d02f      	beq.n	80095a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	f003 020f 	and.w	r2, r3, #15
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	3318      	adds	r3, #24
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	f003 010f 	and.w	r1, r3, #15
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	460b      	mov	r3, r1
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	4403      	add	r3, r0
 8009568:	3338      	adds	r3, #56	; 0x38
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009570:	fb01 f303 	mul.w	r3, r1, r3
 8009574:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009576:	2b00      	cmp	r3, #0
 8009578:	d112      	bne.n	80095a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	f003 020f 	and.w	r2, r3, #15
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	3318      	adds	r3, #24
 800958e:	2200      	movs	r2, #0
 8009590:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009592:	78f9      	ldrb	r1, [r7, #3]
 8009594:	2300      	movs	r3, #0
 8009596:	2200      	movs	r2, #0
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f002 fa0d 	bl	800b9b8 <USBD_LL_Transmit>
 800959e:	e01f      	b.n	80095e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	33b0      	adds	r3, #176	; 0xb0
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d010      	beq.n	80095e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	33b0      	adds	r3, #176	; 0xb0
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80095dc:	78fa      	ldrb	r2, [r7, #3]
 80095de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	32b0      	adds	r2, #176	; 0xb0
 8009600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009604:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	32b0      	adds	r2, #176	; 0xb0
 8009610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	e01a      	b.n	8009652 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f002 fa39 	bl	800ba98 <USBD_LL_GetRxDataSize>
 8009626:	4602      	mov	r2, r0
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	33b0      	adds	r3, #176	; 0xb0
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800964c:	4611      	mov	r1, r2
 800964e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	32b0      	adds	r2, #176	; 0xb0
 800966c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009670:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009678:	2303      	movs	r3, #3
 800967a:	e025      	b.n	80096c8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	33b0      	adds	r3, #176	; 0xb0
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01a      	beq.n	80096c6 <USBD_CDC_EP0_RxReady+0x6c>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009696:	2bff      	cmp	r3, #255	; 0xff
 8009698:	d015      	beq.n	80096c6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	33b0      	adds	r3, #176	; 0xb0
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80096b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80096ba:	b292      	uxth	r2, r2
 80096bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	22ff      	movs	r2, #255	; 0xff
 80096c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096d8:	2182      	movs	r1, #130	; 0x82
 80096da:	4818      	ldr	r0, [pc, #96]	; (800973c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096dc:	f000 fcbd 	bl	800a05a <USBD_GetEpDesc>
 80096e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096e2:	2101      	movs	r1, #1
 80096e4:	4815      	ldr	r0, [pc, #84]	; (800973c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096e6:	f000 fcb8 	bl	800a05a <USBD_GetEpDesc>
 80096ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096ec:	2181      	movs	r1, #129	; 0x81
 80096ee:	4813      	ldr	r0, [pc, #76]	; (800973c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80096f0:	f000 fcb3 	bl	800a05a <USBD_GetEpDesc>
 80096f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2210      	movs	r2, #16
 8009700:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d006      	beq.n	8009716 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	2200      	movs	r2, #0
 800970c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009710:	711a      	strb	r2, [r3, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d006      	beq.n	800972a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009724:	711a      	strb	r2, [r3, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2243      	movs	r2, #67	; 0x43
 800972e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009730:	4b02      	ldr	r3, [pc, #8]	; (800973c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20000050 	.word	0x20000050

08009740 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009748:	2182      	movs	r1, #130	; 0x82
 800974a:	4818      	ldr	r0, [pc, #96]	; (80097ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800974c:	f000 fc85 	bl	800a05a <USBD_GetEpDesc>
 8009750:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009752:	2101      	movs	r1, #1
 8009754:	4815      	ldr	r0, [pc, #84]	; (80097ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009756:	f000 fc80 	bl	800a05a <USBD_GetEpDesc>
 800975a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800975c:	2181      	movs	r1, #129	; 0x81
 800975e:	4813      	ldr	r0, [pc, #76]	; (80097ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009760:	f000 fc7b 	bl	800a05a <USBD_GetEpDesc>
 8009764:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d002      	beq.n	8009772 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2210      	movs	r2, #16
 8009770:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d006      	beq.n	8009786 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	2200      	movs	r2, #0
 800977c:	711a      	strb	r2, [r3, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f042 0202 	orr.w	r2, r2, #2
 8009784:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d006      	beq.n	800979a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	711a      	strb	r2, [r3, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f042 0202 	orr.w	r2, r2, #2
 8009798:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2243      	movs	r2, #67	; 0x43
 800979e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097a0:	4b02      	ldr	r3, [pc, #8]	; (80097ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000050 	.word	0x20000050

080097b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097b8:	2182      	movs	r1, #130	; 0x82
 80097ba:	4818      	ldr	r0, [pc, #96]	; (800981c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097bc:	f000 fc4d 	bl	800a05a <USBD_GetEpDesc>
 80097c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097c2:	2101      	movs	r1, #1
 80097c4:	4815      	ldr	r0, [pc, #84]	; (800981c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097c6:	f000 fc48 	bl	800a05a <USBD_GetEpDesc>
 80097ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097cc:	2181      	movs	r1, #129	; 0x81
 80097ce:	4813      	ldr	r0, [pc, #76]	; (800981c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097d0:	f000 fc43 	bl	800a05a <USBD_GetEpDesc>
 80097d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2210      	movs	r2, #16
 80097e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d006      	beq.n	80097f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097f0:	711a      	strb	r2, [r3, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d006      	beq.n	800980a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009804:	711a      	strb	r2, [r3, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2243      	movs	r2, #67	; 0x43
 800980e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009810:	4b02      	ldr	r3, [pc, #8]	; (800981c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20000050 	.word	0x20000050

08009820 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	220a      	movs	r2, #10
 800982c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800982e:	4b03      	ldr	r3, [pc, #12]	; (800983c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	2000000c 	.word	0x2000000c

08009840 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009850:	2303      	movs	r3, #3
 8009852:	e009      	b.n	8009868 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	33b0      	adds	r3, #176	; 0xb0
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	32b0      	adds	r2, #176	; 0xb0
 800988a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009896:	2303      	movs	r3, #3
 8009898:	e008      	b.n	80098ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	32b0      	adds	r2, #176	; 0xb0
 80098cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80098d8:	2303      	movs	r3, #3
 80098da:	e004      	b.n	80098e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
	...

080098f4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	32b0      	adds	r2, #176	; 0xb0
 8009906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800990c:	2301      	movs	r3, #1
 800990e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009916:	2303      	movs	r3, #3
 8009918:	e025      	b.n	8009966 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009920:	2b00      	cmp	r3, #0
 8009922:	d11f      	bne.n	8009964 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2201      	movs	r2, #1
 8009928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800992c:	4b10      	ldr	r3, [pc, #64]	; (8009970 <USBD_CDC_TransmitPacket+0x7c>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	f003 020f 	and.w	r2, r3, #15
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	4613      	mov	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4403      	add	r3, r0
 8009946:	3318      	adds	r3, #24
 8009948:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800994a:	4b09      	ldr	r3, [pc, #36]	; (8009970 <USBD_CDC_TransmitPacket+0x7c>)
 800994c:	7819      	ldrb	r1, [r3, #0]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f002 f82c 	bl	800b9b8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009964:	7bfb      	ldrb	r3, [r7, #15]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000093 	.word	0x20000093

08009974 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	32b0      	adds	r2, #176	; 0xb0
 8009986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800998a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	32b0      	adds	r2, #176	; 0xb0
 8009996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800999e:	2303      	movs	r3, #3
 80099a0:	e018      	b.n	80099d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	7c1b      	ldrb	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10a      	bne.n	80099c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099aa:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <USBD_CDC_ReceivePacket+0x68>)
 80099ac:	7819      	ldrb	r1, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f002 f835 	bl	800ba28 <USBD_LL_PrepareReceive>
 80099be:	e008      	b.n	80099d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099c0:	4b06      	ldr	r3, [pc, #24]	; (80099dc <USBD_CDC_ReceivePacket+0x68>)
 80099c2:	7819      	ldrb	r1, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099ca:	2340      	movs	r3, #64	; 0x40
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f002 f82b 	bl	800ba28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000094 	.word	0x20000094

080099e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	4613      	mov	r3, r2
 80099ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e01f      	b.n	8009a38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	79fa      	ldrb	r2, [r7, #7]
 8009a2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f001 fdeb 	bl	800b608 <USBD_LL_Init>
 8009a32:	4603      	mov	r3, r0
 8009a34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e025      	b.n	8009aa4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	32ae      	adds	r2, #174	; 0xae
 8009a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00f      	beq.n	8009a94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	32ae      	adds	r2, #174	; 0xae
 8009a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a84:	f107 020e 	add.w	r2, r7, #14
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 fe09 	bl	800b6cc <USBD_LL_Start>
 8009aba:	4603      	mov	r3, r0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009acc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	78fa      	ldrb	r2, [r7, #3]
 8009afe:	4611      	mov	r1, r2
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	4798      	blx	r3
 8009b04:	4603      	mov	r3, r0
 8009b06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	78fa      	ldrb	r2, [r7, #3]
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	4798      	blx	r3
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f001 f8a6 	bl	800acaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b7a:	f003 031f 	and.w	r3, r3, #31
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d01a      	beq.n	8009bb8 <USBD_LL_SetupStage+0x72>
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d822      	bhi.n	8009bcc <USBD_LL_SetupStage+0x86>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <USBD_LL_SetupStage+0x4a>
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d00a      	beq.n	8009ba4 <USBD_LL_SetupStage+0x5e>
 8009b8e:	e01d      	b.n	8009bcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fad3 	bl	800a144 <USBD_StdDevReq>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ba2:	e020      	b.n	8009be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fb3b 	bl	800a228 <USBD_StdItfReq>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb6:	e016      	b.n	8009be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fb9d 	bl	800a300 <USBD_StdEPReq>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8009bca:	e00c      	b.n	8009be6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009bd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 fe1c 	bl	800b818 <USBD_LL_StallEP>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73fb      	strb	r3, [r7, #15]
      break;
 8009be4:	bf00      	nop
  }

  return ret;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009c02:	7afb      	ldrb	r3, [r7, #11]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d16e      	bne.n	8009ce6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009c0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	f040 8098 	bne.w	8009d4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d913      	bls.n	8009c50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	1ad2      	subs	r2, r2, r3
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	bf28      	it	cs
 8009c42:	4613      	movcs	r3, r2
 8009c44:	461a      	mov	r2, r3
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f001 f922 	bl	800ae92 <USBD_CtlContinueRx>
 8009c4e:	e07d      	b.n	8009d4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c56:	f003 031f 	and.w	r3, r3, #31
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d014      	beq.n	8009c88 <USBD_LL_DataOutStage+0x98>
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d81d      	bhi.n	8009c9e <USBD_LL_DataOutStage+0xae>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <USBD_LL_DataOutStage+0x7c>
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d003      	beq.n	8009c72 <USBD_LL_DataOutStage+0x82>
 8009c6a:	e018      	b.n	8009c9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	75bb      	strb	r3, [r7, #22]
            break;
 8009c70:	e018      	b.n	8009ca4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f9d2 	bl	800a026 <USBD_CoreFindIF>
 8009c82:	4603      	mov	r3, r0
 8009c84:	75bb      	strb	r3, [r7, #22]
            break;
 8009c86:	e00d      	b.n	8009ca4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	4619      	mov	r1, r3
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 f9d4 	bl	800a040 <USBD_CoreFindEP>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	75bb      	strb	r3, [r7, #22]
            break;
 8009c9c:	e002      	b.n	8009ca4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	75bb      	strb	r3, [r7, #22]
            break;
 8009ca2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ca4:	7dbb      	ldrb	r3, [r7, #22]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d119      	bne.n	8009cde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d113      	bne.n	8009cde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009cb6:	7dba      	ldrb	r2, [r7, #22]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	32ae      	adds	r2, #174	; 0xae
 8009cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00b      	beq.n	8009cde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009cc6:	7dba      	ldrb	r2, [r7, #22]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009cce:	7dba      	ldrb	r2, [r7, #22]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	32ae      	adds	r2, #174	; 0xae
 8009cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f001 f8e8 	bl	800aeb4 <USBD_CtlSendStatus>
 8009ce4:	e032      	b.n	8009d4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009ce6:	7afb      	ldrb	r3, [r7, #11]
 8009ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	4619      	mov	r1, r3
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f9a5 	bl	800a040 <USBD_CoreFindEP>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cfa:	7dbb      	ldrb	r3, [r7, #22]
 8009cfc:	2bff      	cmp	r3, #255	; 0xff
 8009cfe:	d025      	beq.n	8009d4c <USBD_LL_DataOutStage+0x15c>
 8009d00:	7dbb      	ldrb	r3, [r7, #22]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d122      	bne.n	8009d4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d117      	bne.n	8009d42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009d12:	7dba      	ldrb	r2, [r7, #22]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	32ae      	adds	r2, #174	; 0xae
 8009d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00f      	beq.n	8009d42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009d22:	7dba      	ldrb	r2, [r7, #22]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009d2a:	7dba      	ldrb	r2, [r7, #22]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	32ae      	adds	r2, #174	; 0xae
 8009d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	7afa      	ldrb	r2, [r7, #11]
 8009d38:	4611      	mov	r1, r2
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	4798      	blx	r3
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	e000      	b.n	8009d4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b086      	sub	sp, #24
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	60f8      	str	r0, [r7, #12]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	607a      	str	r2, [r7, #4]
 8009d62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009d64:	7afb      	ldrb	r3, [r7, #11]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d16f      	bne.n	8009e4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3314      	adds	r3, #20
 8009d6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d15a      	bne.n	8009e30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	689a      	ldr	r2, [r3, #8]
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d914      	bls.n	8009db0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f001 f84a 	bl	800ae36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009da2:	2300      	movs	r3, #0
 8009da4:	2200      	movs	r2, #0
 8009da6:	2100      	movs	r1, #0
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f001 fe3d 	bl	800ba28 <USBD_LL_PrepareReceive>
 8009dae:	e03f      	b.n	8009e30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d11c      	bne.n	8009df6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d316      	bcc.n	8009df6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d20f      	bcs.n	8009df6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2100      	movs	r1, #0
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f001 f82b 	bl	800ae36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009de8:	2300      	movs	r3, #0
 8009dea:	2200      	movs	r2, #0
 8009dec:	2100      	movs	r1, #0
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f001 fe1a 	bl	800ba28 <USBD_LL_PrepareReceive>
 8009df4:	e01c      	b.n	8009e30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d10f      	bne.n	8009e22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e22:	2180      	movs	r1, #128	; 0x80
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f001 fcf7 	bl	800b818 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f001 f855 	bl	800aeda <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d03a      	beq.n	8009eb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7ff fe42 	bl	8009ac4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009e48:	e032      	b.n	8009eb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
 8009e4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	4619      	mov	r1, r3
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 f8f3 	bl	800a040 <USBD_CoreFindEP>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	2bff      	cmp	r3, #255	; 0xff
 8009e62:	d025      	beq.n	8009eb0 <USBD_LL_DataInStage+0x15a>
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d122      	bne.n	8009eb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d11c      	bne.n	8009eb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009e76:	7dfa      	ldrb	r2, [r7, #23]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	32ae      	adds	r2, #174	; 0xae
 8009e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d014      	beq.n	8009eb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009e86:	7dfa      	ldrb	r2, [r7, #23]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009e8e:	7dfa      	ldrb	r2, [r7, #23]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	32ae      	adds	r2, #174	; 0xae
 8009e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	7afa      	ldrb	r2, [r7, #11]
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	4798      	blx	r3
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009ea6:	7dbb      	ldrb	r3, [r7, #22]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009eac:	7dbb      	ldrb	r3, [r7, #22]
 8009eae:	e000      	b.n	8009eb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d014      	beq.n	8009f20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00e      	beq.n	8009f20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	6852      	ldr	r2, [r2, #4]
 8009f0e:	b2d2      	uxtb	r2, r2
 8009f10:	4611      	mov	r1, r2
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f20:	2340      	movs	r3, #64	; 0x40
 8009f22:	2200      	movs	r2, #0
 8009f24:	2100      	movs	r1, #0
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 fc02 	bl	800b730 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2240      	movs	r2, #64	; 0x40
 8009f38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f3c:	2340      	movs	r3, #64	; 0x40
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2180      	movs	r1, #128	; 0x80
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 fbf4 	bl	800b730 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2240      	movs	r2, #64	; 0x40
 8009f52:	621a      	str	r2, [r3, #32]

  return ret;
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d006      	beq.n	8009fa0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b04      	cmp	r3, #4
 8009fc8:	d106      	bne.n	8009fd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d110      	bne.n	800a01c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00b      	beq.n	800a01c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a026:	b480      	push	{r7}
 800a028:	b083      	sub	sp, #12
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	460b      	mov	r3, r1
 800a030:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a032:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a04c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a04e:	4618      	mov	r0, r3
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b086      	sub	sp, #24
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	885b      	ldrh	r3, [r3, #2]
 800a076:	b29a      	uxth	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	429a      	cmp	r2, r3
 800a080:	d920      	bls.n	800a0c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	b29b      	uxth	r3, r3
 800a088:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a08a:	e013      	b.n	800a0b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a08c:	f107 030a 	add.w	r3, r7, #10
 800a090:	4619      	mov	r1, r3
 800a092:	6978      	ldr	r0, [r7, #20]
 800a094:	f000 f81b 	bl	800a0ce <USBD_GetNextDesc>
 800a098:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	785b      	ldrb	r3, [r3, #1]
 800a09e:	2b05      	cmp	r3, #5
 800a0a0:	d108      	bne.n	800a0b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	789b      	ldrb	r3, [r3, #2]
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d008      	beq.n	800a0c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	885b      	ldrh	r3, [r3, #2]
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	897b      	ldrh	r3, [r7, #10]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d8e5      	bhi.n	800a08c <USBD_GetEpDesc+0x32>
 800a0c0:	e000      	b.n	800a0c4 <USBD_GetEpDesc+0x6a>
          break;
 800a0c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a0c4:	693b      	ldr	r3, [r7, #16]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	881a      	ldrh	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	4413      	add	r3, r2
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	3301      	adds	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a126:	8a3b      	ldrh	r3, [r7, #16]
 800a128:	021b      	lsls	r3, r3, #8
 800a12a:	b21a      	sxth	r2, r3
 800a12c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a130:	4313      	orrs	r3, r2
 800a132:	b21b      	sxth	r3, r3
 800a134:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a136:	89fb      	ldrh	r3, [r7, #14]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	371c      	adds	r7, #28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a15a:	2b40      	cmp	r3, #64	; 0x40
 800a15c:	d005      	beq.n	800a16a <USBD_StdDevReq+0x26>
 800a15e:	2b40      	cmp	r3, #64	; 0x40
 800a160:	d857      	bhi.n	800a212 <USBD_StdDevReq+0xce>
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00f      	beq.n	800a186 <USBD_StdDevReq+0x42>
 800a166:	2b20      	cmp	r3, #32
 800a168:	d153      	bne.n	800a212 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	32ae      	adds	r2, #174	; 0xae
 800a174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	4798      	blx	r3
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]
      break;
 800a184:	e04a      	b.n	800a21c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	785b      	ldrb	r3, [r3, #1]
 800a18a:	2b09      	cmp	r3, #9
 800a18c:	d83b      	bhi.n	800a206 <USBD_StdDevReq+0xc2>
 800a18e:	a201      	add	r2, pc, #4	; (adr r2, 800a194 <USBD_StdDevReq+0x50>)
 800a190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a194:	0800a1e9 	.word	0x0800a1e9
 800a198:	0800a1fd 	.word	0x0800a1fd
 800a19c:	0800a207 	.word	0x0800a207
 800a1a0:	0800a1f3 	.word	0x0800a1f3
 800a1a4:	0800a207 	.word	0x0800a207
 800a1a8:	0800a1c7 	.word	0x0800a1c7
 800a1ac:	0800a1bd 	.word	0x0800a1bd
 800a1b0:	0800a207 	.word	0x0800a207
 800a1b4:	0800a1df 	.word	0x0800a1df
 800a1b8:	0800a1d1 	.word	0x0800a1d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa3c 	bl	800a63c <USBD_GetDescriptor>
          break;
 800a1c4:	e024      	b.n	800a210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fbcb 	bl	800a964 <USBD_SetAddress>
          break;
 800a1ce:	e01f      	b.n	800a210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fc0a 	bl	800a9ec <USBD_SetConfig>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]
          break;
 800a1dc:	e018      	b.n	800a210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fcad 	bl	800ab40 <USBD_GetConfig>
          break;
 800a1e6:	e013      	b.n	800a210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fcde 	bl	800abac <USBD_GetStatus>
          break;
 800a1f0:	e00e      	b.n	800a210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fd0d 	bl	800ac14 <USBD_SetFeature>
          break;
 800a1fa:	e009      	b.n	800a210 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fd31 	bl	800ac66 <USBD_ClrFeature>
          break;
 800a204:	e004      	b.n	800a210 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fd88 	bl	800ad1e <USBD_CtlError>
          break;
 800a20e:	bf00      	nop
      }
      break;
 800a210:	e004      	b.n	800a21c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fd82 	bl	800ad1e <USBD_CtlError>
      break;
 800a21a:	bf00      	nop
  }

  return ret;
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop

0800a228 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a23e:	2b40      	cmp	r3, #64	; 0x40
 800a240:	d005      	beq.n	800a24e <USBD_StdItfReq+0x26>
 800a242:	2b40      	cmp	r3, #64	; 0x40
 800a244:	d852      	bhi.n	800a2ec <USBD_StdItfReq+0xc4>
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <USBD_StdItfReq+0x26>
 800a24a:	2b20      	cmp	r3, #32
 800a24c:	d14e      	bne.n	800a2ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a254:	b2db      	uxtb	r3, r3
 800a256:	3b01      	subs	r3, #1
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d840      	bhi.n	800a2de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	889b      	ldrh	r3, [r3, #4]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b01      	cmp	r3, #1
 800a264:	d836      	bhi.n	800a2d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	889b      	ldrh	r3, [r3, #4]
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7ff fed9 	bl	800a026 <USBD_CoreFindIF>
 800a274:	4603      	mov	r3, r0
 800a276:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a278:	7bbb      	ldrb	r3, [r7, #14]
 800a27a:	2bff      	cmp	r3, #255	; 0xff
 800a27c:	d01d      	beq.n	800a2ba <USBD_StdItfReq+0x92>
 800a27e:	7bbb      	ldrb	r3, [r7, #14]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d11a      	bne.n	800a2ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a284:	7bba      	ldrb	r2, [r7, #14]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	32ae      	adds	r2, #174	; 0xae
 800a28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00f      	beq.n	800a2b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a294:	7bba      	ldrb	r2, [r7, #14]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a29c:	7bba      	ldrb	r2, [r7, #14]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	32ae      	adds	r2, #174	; 0xae
 800a2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	4798      	blx	r3
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2b2:	e004      	b.n	800a2be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2b8:	e001      	b.n	800a2be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	88db      	ldrh	r3, [r3, #6]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d110      	bne.n	800a2e8 <USBD_StdItfReq+0xc0>
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10d      	bne.n	800a2e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fdf1 	bl	800aeb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a2d2:	e009      	b.n	800a2e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fd21 	bl	800ad1e <USBD_CtlError>
          break;
 800a2dc:	e004      	b.n	800a2e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fd1c 	bl	800ad1e <USBD_CtlError>
          break;
 800a2e6:	e000      	b.n	800a2ea <USBD_StdItfReq+0xc2>
          break;
 800a2e8:	bf00      	nop
      }
      break;
 800a2ea:	e004      	b.n	800a2f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fd15 	bl	800ad1e <USBD_CtlError>
      break;
 800a2f4:	bf00      	nop
  }

  return ret;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	889b      	ldrh	r3, [r3, #4]
 800a312:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a31c:	2b40      	cmp	r3, #64	; 0x40
 800a31e:	d007      	beq.n	800a330 <USBD_StdEPReq+0x30>
 800a320:	2b40      	cmp	r3, #64	; 0x40
 800a322:	f200 817f 	bhi.w	800a624 <USBD_StdEPReq+0x324>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d02a      	beq.n	800a380 <USBD_StdEPReq+0x80>
 800a32a:	2b20      	cmp	r3, #32
 800a32c:	f040 817a 	bne.w	800a624 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff fe83 	bl	800a040 <USBD_CoreFindEP>
 800a33a:	4603      	mov	r3, r0
 800a33c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a33e:	7b7b      	ldrb	r3, [r7, #13]
 800a340:	2bff      	cmp	r3, #255	; 0xff
 800a342:	f000 8174 	beq.w	800a62e <USBD_StdEPReq+0x32e>
 800a346:	7b7b      	ldrb	r3, [r7, #13]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f040 8170 	bne.w	800a62e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a34e:	7b7a      	ldrb	r2, [r7, #13]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a356:	7b7a      	ldrb	r2, [r7, #13]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	32ae      	adds	r2, #174	; 0xae
 800a35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 8163 	beq.w	800a62e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a368:	7b7a      	ldrb	r2, [r7, #13]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	32ae      	adds	r2, #174	; 0xae
 800a36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	4798      	blx	r3
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a37e:	e156      	b.n	800a62e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	785b      	ldrb	r3, [r3, #1]
 800a384:	2b03      	cmp	r3, #3
 800a386:	d008      	beq.n	800a39a <USBD_StdEPReq+0x9a>
 800a388:	2b03      	cmp	r3, #3
 800a38a:	f300 8145 	bgt.w	800a618 <USBD_StdEPReq+0x318>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 809b 	beq.w	800a4ca <USBD_StdEPReq+0x1ca>
 800a394:	2b01      	cmp	r3, #1
 800a396:	d03c      	beq.n	800a412 <USBD_StdEPReq+0x112>
 800a398:	e13e      	b.n	800a618 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d002      	beq.n	800a3ac <USBD_StdEPReq+0xac>
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d016      	beq.n	800a3d8 <USBD_StdEPReq+0xd8>
 800a3aa:	e02c      	b.n	800a406 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3ac:	7bbb      	ldrb	r3, [r7, #14]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00d      	beq.n	800a3ce <USBD_StdEPReq+0xce>
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	2b80      	cmp	r3, #128	; 0x80
 800a3b6:	d00a      	beq.n	800a3ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 fa2b 	bl	800b818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3c2:	2180      	movs	r1, #128	; 0x80
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 fa27 	bl	800b818 <USBD_LL_StallEP>
 800a3ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3cc:	e020      	b.n	800a410 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fca4 	bl	800ad1e <USBD_CtlError>
              break;
 800a3d6:	e01b      	b.n	800a410 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	885b      	ldrh	r3, [r3, #2]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10e      	bne.n	800a3fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00b      	beq.n	800a3fe <USBD_StdEPReq+0xfe>
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
 800a3e8:	2b80      	cmp	r3, #128	; 0x80
 800a3ea:	d008      	beq.n	800a3fe <USBD_StdEPReq+0xfe>
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	88db      	ldrh	r3, [r3, #6]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d104      	bne.n	800a3fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f001 fa0d 	bl	800b818 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fd58 	bl	800aeb4 <USBD_CtlSendStatus>

              break;
 800a404:	e004      	b.n	800a410 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fc88 	bl	800ad1e <USBD_CtlError>
              break;
 800a40e:	bf00      	nop
          }
          break;
 800a410:	e107      	b.n	800a622 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d002      	beq.n	800a424 <USBD_StdEPReq+0x124>
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d016      	beq.n	800a450 <USBD_StdEPReq+0x150>
 800a422:	e04b      	b.n	800a4bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00d      	beq.n	800a446 <USBD_StdEPReq+0x146>
 800a42a:	7bbb      	ldrb	r3, [r7, #14]
 800a42c:	2b80      	cmp	r3, #128	; 0x80
 800a42e:	d00a      	beq.n	800a446 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 f9ef 	bl	800b818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a43a:	2180      	movs	r1, #128	; 0x80
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f001 f9eb 	bl	800b818 <USBD_LL_StallEP>
 800a442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a444:	e040      	b.n	800a4c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fc68 	bl	800ad1e <USBD_CtlError>
              break;
 800a44e:	e03b      	b.n	800a4c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	885b      	ldrh	r3, [r3, #2]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d136      	bne.n	800a4c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a458:	7bbb      	ldrb	r3, [r7, #14]
 800a45a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d004      	beq.n	800a46c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 fa0c 	bl	800b884 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fd21 	bl	800aeb4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff fde2 	bl	800a040 <USBD_CoreFindEP>
 800a47c:	4603      	mov	r3, r0
 800a47e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a480:	7b7b      	ldrb	r3, [r7, #13]
 800a482:	2bff      	cmp	r3, #255	; 0xff
 800a484:	d01f      	beq.n	800a4c6 <USBD_StdEPReq+0x1c6>
 800a486:	7b7b      	ldrb	r3, [r7, #13]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d11c      	bne.n	800a4c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a48c:	7b7a      	ldrb	r2, [r7, #13]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a494:	7b7a      	ldrb	r2, [r7, #13]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	32ae      	adds	r2, #174	; 0xae
 800a49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d010      	beq.n	800a4c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4a4:	7b7a      	ldrb	r2, [r7, #13]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	32ae      	adds	r2, #174	; 0xae
 800a4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	4798      	blx	r3
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a4ba:	e004      	b.n	800a4c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fc2d 	bl	800ad1e <USBD_CtlError>
              break;
 800a4c4:	e000      	b.n	800a4c8 <USBD_StdEPReq+0x1c8>
              break;
 800a4c6:	bf00      	nop
          }
          break;
 800a4c8:	e0ab      	b.n	800a622 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d002      	beq.n	800a4dc <USBD_StdEPReq+0x1dc>
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d032      	beq.n	800a540 <USBD_StdEPReq+0x240>
 800a4da:	e097      	b.n	800a60c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d007      	beq.n	800a4f2 <USBD_StdEPReq+0x1f2>
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	2b80      	cmp	r3, #128	; 0x80
 800a4e6:	d004      	beq.n	800a4f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fc17 	bl	800ad1e <USBD_CtlError>
                break;
 800a4f0:	e091      	b.n	800a616 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	da0b      	bge.n	800a512 <USBD_StdEPReq+0x212>
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	3310      	adds	r3, #16
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	4413      	add	r3, r2
 800a50e:	3304      	adds	r3, #4
 800a510:	e00b      	b.n	800a52a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a512:	7bbb      	ldrb	r3, [r7, #14]
 800a514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	4413      	add	r3, r2
 800a528:	3304      	adds	r3, #4
 800a52a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2202      	movs	r2, #2
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fc61 	bl	800ae00 <USBD_CtlSendData>
              break;
 800a53e:	e06a      	b.n	800a616 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a544:	2b00      	cmp	r3, #0
 800a546:	da11      	bge.n	800a56c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	f003 020f 	and.w	r2, r3, #15
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	440b      	add	r3, r1
 800a55a:	3324      	adds	r3, #36	; 0x24
 800a55c:	881b      	ldrh	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d117      	bne.n	800a592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fbda 	bl	800ad1e <USBD_CtlError>
                  break;
 800a56a:	e054      	b.n	800a616 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	f003 020f 	and.w	r2, r3, #15
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d104      	bne.n	800a592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fbc7 	bl	800ad1e <USBD_CtlError>
                  break;
 800a590:	e041      	b.n	800a616 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a596:	2b00      	cmp	r3, #0
 800a598:	da0b      	bge.n	800a5b2 <USBD_StdEPReq+0x2b2>
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4413      	add	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	3310      	adds	r3, #16
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	e00b      	b.n	800a5ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5b2:	7bbb      	ldrb	r3, [r7, #14]
 800a5b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4413      	add	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d002      	beq.n	800a5d8 <USBD_StdEPReq+0x2d8>
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	2b80      	cmp	r3, #128	; 0x80
 800a5d6:	d103      	bne.n	800a5e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]
 800a5de:	e00e      	b.n	800a5fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f001 f983 	bl	800b8f0 <USBD_LL_IsStallEP>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	e002      	b.n	800a5fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2202      	movs	r2, #2
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fbfb 	bl	800ae00 <USBD_CtlSendData>
              break;
 800a60a:	e004      	b.n	800a616 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fb85 	bl	800ad1e <USBD_CtlError>
              break;
 800a614:	bf00      	nop
          }
          break;
 800a616:	e004      	b.n	800a622 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fb7f 	bl	800ad1e <USBD_CtlError>
          break;
 800a620:	bf00      	nop
      }
      break;
 800a622:	e005      	b.n	800a630 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fb79 	bl	800ad1e <USBD_CtlError>
      break;
 800a62c:	e000      	b.n	800a630 <USBD_StdEPReq+0x330>
      break;
 800a62e:	bf00      	nop
  }

  return ret;
 800a630:	7bfb      	ldrb	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
	...

0800a63c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	885b      	ldrh	r3, [r3, #2]
 800a656:	0a1b      	lsrs	r3, r3, #8
 800a658:	b29b      	uxth	r3, r3
 800a65a:	3b01      	subs	r3, #1
 800a65c:	2b0e      	cmp	r3, #14
 800a65e:	f200 8152 	bhi.w	800a906 <USBD_GetDescriptor+0x2ca>
 800a662:	a201      	add	r2, pc, #4	; (adr r2, 800a668 <USBD_GetDescriptor+0x2c>)
 800a664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a668:	0800a6d9 	.word	0x0800a6d9
 800a66c:	0800a6f1 	.word	0x0800a6f1
 800a670:	0800a731 	.word	0x0800a731
 800a674:	0800a907 	.word	0x0800a907
 800a678:	0800a907 	.word	0x0800a907
 800a67c:	0800a8a7 	.word	0x0800a8a7
 800a680:	0800a8d3 	.word	0x0800a8d3
 800a684:	0800a907 	.word	0x0800a907
 800a688:	0800a907 	.word	0x0800a907
 800a68c:	0800a907 	.word	0x0800a907
 800a690:	0800a907 	.word	0x0800a907
 800a694:	0800a907 	.word	0x0800a907
 800a698:	0800a907 	.word	0x0800a907
 800a69c:	0800a907 	.word	0x0800a907
 800a6a0:	0800a6a5 	.word	0x0800a6a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00b      	beq.n	800a6c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6b6:	69db      	ldr	r3, [r3, #28]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	7c12      	ldrb	r2, [r2, #16]
 800a6bc:	f107 0108 	add.w	r1, r7, #8
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	4798      	blx	r3
 800a6c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6c6:	e126      	b.n	800a916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fb27 	bl	800ad1e <USBD_CtlError>
        err++;
 800a6d0:	7afb      	ldrb	r3, [r7, #11]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	72fb      	strb	r3, [r7, #11]
      break;
 800a6d6:	e11e      	b.n	800a916 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	7c12      	ldrb	r2, [r2, #16]
 800a6e4:	f107 0108 	add.w	r1, r7, #8
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	60f8      	str	r0, [r7, #12]
      break;
 800a6ee:	e112      	b.n	800a916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7c1b      	ldrb	r3, [r3, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10d      	bne.n	800a714 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a700:	f107 0208 	add.w	r2, r7, #8
 800a704:	4610      	mov	r0, r2
 800a706:	4798      	blx	r3
 800a708:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3301      	adds	r3, #1
 800a70e:	2202      	movs	r2, #2
 800a710:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a712:	e100      	b.n	800a916 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71c:	f107 0208 	add.w	r2, r7, #8
 800a720:	4610      	mov	r0, r2
 800a722:	4798      	blx	r3
 800a724:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3301      	adds	r3, #1
 800a72a:	2202      	movs	r2, #2
 800a72c:	701a      	strb	r2, [r3, #0]
      break;
 800a72e:	e0f2      	b.n	800a916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	885b      	ldrh	r3, [r3, #2]
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b05      	cmp	r3, #5
 800a738:	f200 80ac 	bhi.w	800a894 <USBD_GetDescriptor+0x258>
 800a73c:	a201      	add	r2, pc, #4	; (adr r2, 800a744 <USBD_GetDescriptor+0x108>)
 800a73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a742:	bf00      	nop
 800a744:	0800a75d 	.word	0x0800a75d
 800a748:	0800a791 	.word	0x0800a791
 800a74c:	0800a7c5 	.word	0x0800a7c5
 800a750:	0800a7f9 	.word	0x0800a7f9
 800a754:	0800a82d 	.word	0x0800a82d
 800a758:	0800a861 	.word	0x0800a861
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00b      	beq.n	800a780 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7c12      	ldrb	r2, [r2, #16]
 800a774:	f107 0108 	add.w	r1, r7, #8
 800a778:	4610      	mov	r0, r2
 800a77a:	4798      	blx	r3
 800a77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a77e:	e091      	b.n	800a8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 facb 	bl	800ad1e <USBD_CtlError>
            err++;
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	3301      	adds	r3, #1
 800a78c:	72fb      	strb	r3, [r7, #11]
          break;
 800a78e:	e089      	b.n	800a8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00b      	beq.n	800a7b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	7c12      	ldrb	r2, [r2, #16]
 800a7a8:	f107 0108 	add.w	r1, r7, #8
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4798      	blx	r3
 800a7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7b2:	e077      	b.n	800a8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fab1 	bl	800ad1e <USBD_CtlError>
            err++;
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7c2:	e06f      	b.n	800a8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00b      	beq.n	800a7e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	7c12      	ldrb	r2, [r2, #16]
 800a7dc:	f107 0108 	add.w	r1, r7, #8
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	4798      	blx	r3
 800a7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7e6:	e05d      	b.n	800a8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fa97 	bl	800ad1e <USBD_CtlError>
            err++;
 800a7f0:	7afb      	ldrb	r3, [r7, #11]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7f6:	e055      	b.n	800a8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00b      	beq.n	800a81c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	7c12      	ldrb	r2, [r2, #16]
 800a810:	f107 0108 	add.w	r1, r7, #8
 800a814:	4610      	mov	r0, r2
 800a816:	4798      	blx	r3
 800a818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a81a:	e043      	b.n	800a8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fa7d 	bl	800ad1e <USBD_CtlError>
            err++;
 800a824:	7afb      	ldrb	r3, [r7, #11]
 800a826:	3301      	adds	r3, #1
 800a828:	72fb      	strb	r3, [r7, #11]
          break;
 800a82a:	e03b      	b.n	800a8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00b      	beq.n	800a850 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	7c12      	ldrb	r2, [r2, #16]
 800a844:	f107 0108 	add.w	r1, r7, #8
 800a848:	4610      	mov	r0, r2
 800a84a:	4798      	blx	r3
 800a84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a84e:	e029      	b.n	800a8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fa63 	bl	800ad1e <USBD_CtlError>
            err++;
 800a858:	7afb      	ldrb	r3, [r7, #11]
 800a85a:	3301      	adds	r3, #1
 800a85c:	72fb      	strb	r3, [r7, #11]
          break;
 800a85e:	e021      	b.n	800a8a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00b      	beq.n	800a884 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	7c12      	ldrb	r2, [r2, #16]
 800a878:	f107 0108 	add.w	r1, r7, #8
 800a87c:	4610      	mov	r0, r2
 800a87e:	4798      	blx	r3
 800a880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a882:	e00f      	b.n	800a8a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fa49 	bl	800ad1e <USBD_CtlError>
            err++;
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	3301      	adds	r3, #1
 800a890:	72fb      	strb	r3, [r7, #11]
          break;
 800a892:	e007      	b.n	800a8a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa41 	bl	800ad1e <USBD_CtlError>
          err++;
 800a89c:	7afb      	ldrb	r3, [r7, #11]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a8a2:	bf00      	nop
      }
      break;
 800a8a4:	e037      	b.n	800a916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7c1b      	ldrb	r3, [r3, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d109      	bne.n	800a8c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b6:	f107 0208 	add.w	r2, r7, #8
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	4798      	blx	r3
 800a8be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8c0:	e029      	b.n	800a916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fa2a 	bl	800ad1e <USBD_CtlError>
        err++;
 800a8ca:	7afb      	ldrb	r3, [r7, #11]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	72fb      	strb	r3, [r7, #11]
      break;
 800a8d0:	e021      	b.n	800a916 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	7c1b      	ldrb	r3, [r3, #16]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10d      	bne.n	800a8f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e2:	f107 0208 	add.w	r2, r7, #8
 800a8e6:	4610      	mov	r0, r2
 800a8e8:	4798      	blx	r3
 800a8ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	2207      	movs	r2, #7
 800a8f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8f4:	e00f      	b.n	800a916 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fa10 	bl	800ad1e <USBD_CtlError>
        err++;
 800a8fe:	7afb      	ldrb	r3, [r7, #11]
 800a900:	3301      	adds	r3, #1
 800a902:	72fb      	strb	r3, [r7, #11]
      break;
 800a904:	e007      	b.n	800a916 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fa08 	bl	800ad1e <USBD_CtlError>
      err++;
 800a90e:	7afb      	ldrb	r3, [r7, #11]
 800a910:	3301      	adds	r3, #1
 800a912:	72fb      	strb	r3, [r7, #11]
      break;
 800a914:	bf00      	nop
  }

  if (err != 0U)
 800a916:	7afb      	ldrb	r3, [r7, #11]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d11e      	bne.n	800a95a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	88db      	ldrh	r3, [r3, #6]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d016      	beq.n	800a952 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a924:	893b      	ldrh	r3, [r7, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00e      	beq.n	800a948 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	88da      	ldrh	r2, [r3, #6]
 800a92e:	893b      	ldrh	r3, [r7, #8]
 800a930:	4293      	cmp	r3, r2
 800a932:	bf28      	it	cs
 800a934:	4613      	movcs	r3, r2
 800a936:	b29b      	uxth	r3, r3
 800a938:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a93a:	893b      	ldrh	r3, [r7, #8]
 800a93c:	461a      	mov	r2, r3
 800a93e:	68f9      	ldr	r1, [r7, #12]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa5d 	bl	800ae00 <USBD_CtlSendData>
 800a946:	e009      	b.n	800a95c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f9e7 	bl	800ad1e <USBD_CtlError>
 800a950:	e004      	b.n	800a95c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 faae 	bl	800aeb4 <USBD_CtlSendStatus>
 800a958:	e000      	b.n	800a95c <USBD_GetDescriptor+0x320>
    return;
 800a95a:	bf00      	nop
  }
}
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop

0800a964 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	889b      	ldrh	r3, [r3, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d131      	bne.n	800a9da <USBD_SetAddress+0x76>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	88db      	ldrh	r3, [r3, #6]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d12d      	bne.n	800a9da <USBD_SetAddress+0x76>
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	885b      	ldrh	r3, [r3, #2]
 800a982:	2b7f      	cmp	r3, #127	; 0x7f
 800a984:	d829      	bhi.n	800a9da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	885b      	ldrh	r3, [r3, #2]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d104      	bne.n	800a9a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f9bc 	bl	800ad1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9a6:	e01d      	b.n	800a9e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	7bfa      	ldrb	r2, [r7, #15]
 800a9ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 ffc9 	bl	800b94c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fa7a 	bl	800aeb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d004      	beq.n	800a9d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ce:	e009      	b.n	800a9e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9d8:	e004      	b.n	800a9e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f99e 	bl	800ad1e <USBD_CtlError>
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	bf00      	nop
 800a9e6:	3710      	adds	r7, #16
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	885b      	ldrh	r3, [r3, #2]
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	4b4e      	ldr	r3, [pc, #312]	; (800ab3c <USBD_SetConfig+0x150>)
 800aa02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa04:	4b4d      	ldr	r3, [pc, #308]	; (800ab3c <USBD_SetConfig+0x150>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d905      	bls.n	800aa18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f985 	bl	800ad1e <USBD_CtlError>
    return USBD_FAIL;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e08c      	b.n	800ab32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d002      	beq.n	800aa2a <USBD_SetConfig+0x3e>
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d029      	beq.n	800aa7c <USBD_SetConfig+0x90>
 800aa28:	e075      	b.n	800ab16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa2a:	4b44      	ldr	r3, [pc, #272]	; (800ab3c <USBD_SetConfig+0x150>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d020      	beq.n	800aa74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aa32:	4b42      	ldr	r3, [pc, #264]	; (800ab3c <USBD_SetConfig+0x150>)
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa3c:	4b3f      	ldr	r3, [pc, #252]	; (800ab3c <USBD_SetConfig+0x150>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	4619      	mov	r1, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7ff f849 	bl	8009ada <USBD_SetClassConfig>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d008      	beq.n	800aa64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f962 	bl	800ad1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa62:	e065      	b.n	800ab30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fa25 	bl	800aeb4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2203      	movs	r2, #3
 800aa6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa72:	e05d      	b.n	800ab30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fa1d 	bl	800aeb4 <USBD_CtlSendStatus>
      break;
 800aa7a:	e059      	b.n	800ab30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa7c:	4b2f      	ldr	r3, [pc, #188]	; (800ab3c <USBD_SetConfig+0x150>)
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d112      	bne.n	800aaaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2202      	movs	r2, #2
 800aa88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aa8c:	4b2b      	ldr	r3, [pc, #172]	; (800ab3c <USBD_SetConfig+0x150>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa96:	4b29      	ldr	r3, [pc, #164]	; (800ab3c <USBD_SetConfig+0x150>)
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff f838 	bl	8009b12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fa06 	bl	800aeb4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aaa8:	e042      	b.n	800ab30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aaaa:	4b24      	ldr	r3, [pc, #144]	; (800ab3c <USBD_SetConfig+0x150>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d02a      	beq.n	800ab0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff f826 	bl	8009b12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aac6:	4b1d      	ldr	r3, [pc, #116]	; (800ab3c <USBD_SetConfig+0x150>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aad0:	4b1a      	ldr	r3, [pc, #104]	; (800ab3c <USBD_SetConfig+0x150>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7fe ffff 	bl	8009ada <USBD_SetClassConfig>
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00f      	beq.n	800ab06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f918 	bl	800ad1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff f80b 	bl	8009b12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab04:	e014      	b.n	800ab30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f9d4 	bl	800aeb4 <USBD_CtlSendStatus>
      break;
 800ab0c:	e010      	b.n	800ab30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f9d0 	bl	800aeb4 <USBD_CtlSendStatus>
      break;
 800ab14:	e00c      	b.n	800ab30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f900 	bl	800ad1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab1e:	4b07      	ldr	r3, [pc, #28]	; (800ab3c <USBD_SetConfig+0x150>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7fe fff4 	bl	8009b12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab2e:	bf00      	nop
  }

  return ret;
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	2000082c 	.word	0x2000082c

0800ab40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	88db      	ldrh	r3, [r3, #6]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d004      	beq.n	800ab5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f8e2 	bl	800ad1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab5a:	e023      	b.n	800aba4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	dc02      	bgt.n	800ab6e <USBD_GetConfig+0x2e>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	dc03      	bgt.n	800ab74 <USBD_GetConfig+0x34>
 800ab6c:	e015      	b.n	800ab9a <USBD_GetConfig+0x5a>
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d00b      	beq.n	800ab8a <USBD_GetConfig+0x4a>
 800ab72:	e012      	b.n	800ab9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	2201      	movs	r2, #1
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f93c 	bl	800ae00 <USBD_CtlSendData>
        break;
 800ab88:	e00c      	b.n	800aba4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f934 	bl	800ae00 <USBD_CtlSendData>
        break;
 800ab98:	e004      	b.n	800aba4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f8be 	bl	800ad1e <USBD_CtlError>
        break;
 800aba2:	bf00      	nop
}
 800aba4:	bf00      	nop
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	3b01      	subs	r3, #1
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d81e      	bhi.n	800ac02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	88db      	ldrh	r3, [r3, #6]
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d004      	beq.n	800abd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f8a5 	bl	800ad1e <USBD_CtlError>
        break;
 800abd4:	e01a      	b.n	800ac0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d005      	beq.n	800abf2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	f043 0202 	orr.w	r2, r3, #2
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	330c      	adds	r3, #12
 800abf6:	2202      	movs	r2, #2
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f900 	bl	800ae00 <USBD_CtlSendData>
      break;
 800ac00:	e004      	b.n	800ac0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 f88a 	bl	800ad1e <USBD_CtlError>
      break;
 800ac0a:	bf00      	nop
  }
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	885b      	ldrh	r3, [r3, #2]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d107      	bne.n	800ac36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f940 	bl	800aeb4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ac34:	e013      	b.n	800ac5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	885b      	ldrh	r3, [r3, #2]
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d10b      	bne.n	800ac56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	889b      	ldrh	r3, [r3, #4]
 800ac42:	0a1b      	lsrs	r3, r3, #8
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f930 	bl	800aeb4 <USBD_CtlSendStatus>
}
 800ac54:	e003      	b.n	800ac5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f860 	bl	800ad1e <USBD_CtlError>
}
 800ac5e:	bf00      	nop
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b082      	sub	sp, #8
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d80b      	bhi.n	800ac96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	885b      	ldrh	r3, [r3, #2]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d10c      	bne.n	800aca0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f910 	bl	800aeb4 <USBD_CtlSendStatus>
      }
      break;
 800ac94:	e004      	b.n	800aca0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f840 	bl	800ad1e <USBD_CtlError>
      break;
 800ac9e:	e000      	b.n	800aca2 <USBD_ClrFeature+0x3c>
      break;
 800aca0:	bf00      	nop
  }
}
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	781a      	ldrb	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	781a      	ldrb	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3301      	adds	r3, #1
 800acd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7ff fa17 	bl	800a108 <SWAPBYTE>
 800acda:	4603      	mov	r3, r0
 800acdc:	461a      	mov	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3301      	adds	r3, #1
 800ace6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3301      	adds	r3, #1
 800acec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f7ff fa0a 	bl	800a108 <SWAPBYTE>
 800acf4:	4603      	mov	r3, r0
 800acf6:	461a      	mov	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3301      	adds	r3, #1
 800ad00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3301      	adds	r3, #1
 800ad06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f7ff f9fd 	bl	800a108 <SWAPBYTE>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	461a      	mov	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	80da      	strh	r2, [r3, #6]
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b082      	sub	sp, #8
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad28:	2180      	movs	r1, #128	; 0x80
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fd74 	bl	800b818 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad30:	2100      	movs	r1, #0
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fd70 	bl	800b818 <USBD_LL_StallEP>
}
 800ad38:	bf00      	nop
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d036      	beq.n	800adc4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ad5a:	6938      	ldr	r0, [r7, #16]
 800ad5c:	f000 f836 	bl	800adcc <USBD_GetLen>
 800ad60:	4603      	mov	r3, r0
 800ad62:	3301      	adds	r3, #1
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	4413      	add	r3, r2
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7812      	ldrb	r2, [r2, #0]
 800ad78:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad7a:	7dfb      	ldrb	r3, [r7, #23]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad80:	7dfb      	ldrb	r3, [r7, #23]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	4413      	add	r3, r2
 800ad86:	2203      	movs	r2, #3
 800ad88:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad90:	e013      	b.n	800adba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	4413      	add	r3, r2
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	7812      	ldrb	r2, [r2, #0]
 800ad9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	3301      	adds	r3, #1
 800ada2:	613b      	str	r3, [r7, #16]
    idx++;
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	3301      	adds	r3, #1
 800ada8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800adaa:	7dfb      	ldrb	r3, [r7, #23]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	4413      	add	r3, r2
 800adb0:	2200      	movs	r2, #0
 800adb2:	701a      	strb	r2, [r3, #0]
    idx++;
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
 800adb6:	3301      	adds	r3, #1
 800adb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1e7      	bne.n	800ad92 <USBD_GetString+0x52>
 800adc2:	e000      	b.n	800adc6 <USBD_GetString+0x86>
    return;
 800adc4:	bf00      	nop
  }
}
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800addc:	e005      	b.n	800adea <USBD_GetLen+0x1e>
  {
    len++;
 800adde:	7bfb      	ldrb	r3, [r7, #15]
 800ade0:	3301      	adds	r3, #1
 800ade2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	3301      	adds	r3, #1
 800ade8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1f5      	bne.n	800adde <USBD_GetLen+0x12>
  }

  return len;
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3714      	adds	r7, #20
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2202      	movs	r2, #2
 800ae10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	2100      	movs	r1, #0
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 fdc6 	bl	800b9b8 <USBD_LL_Transmit>

  return USBD_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	2100      	movs	r1, #0
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 fdb5 	bl	800b9b8 <USBD_LL_Transmit>

  return USBD_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2203      	movs	r2, #3
 800ae68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	2100      	movs	r1, #0
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f000 fdd0 	bl	800ba28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	60f8      	str	r0, [r7, #12]
 800ae9a:	60b9      	str	r1, [r7, #8]
 800ae9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	2100      	movs	r1, #0
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f000 fdbf 	bl	800ba28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2204      	movs	r2, #4
 800aec0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aec4:	2300      	movs	r3, #0
 800aec6:	2200      	movs	r2, #0
 800aec8:	2100      	movs	r1, #0
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fd74 	bl	800b9b8 <USBD_LL_Transmit>

  return USBD_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2205      	movs	r2, #5
 800aee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aeea:	2300      	movs	r3, #0
 800aeec:	2200      	movs	r2, #0
 800aeee:	2100      	movs	r1, #0
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fd99 	bl	800ba28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af04:	2200      	movs	r2, #0
 800af06:	4912      	ldr	r1, [pc, #72]	; (800af50 <MX_USB_DEVICE_Init+0x50>)
 800af08:	4812      	ldr	r0, [pc, #72]	; (800af54 <MX_USB_DEVICE_Init+0x54>)
 800af0a:	f7fe fd69 	bl	80099e0 <USBD_Init>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af14:	f7f6 fdf9 	bl	8001b0a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af18:	490f      	ldr	r1, [pc, #60]	; (800af58 <MX_USB_DEVICE_Init+0x58>)
 800af1a:	480e      	ldr	r0, [pc, #56]	; (800af54 <MX_USB_DEVICE_Init+0x54>)
 800af1c:	f7fe fd90 	bl	8009a40 <USBD_RegisterClass>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af26:	f7f6 fdf0 	bl	8001b0a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af2a:	490c      	ldr	r1, [pc, #48]	; (800af5c <MX_USB_DEVICE_Init+0x5c>)
 800af2c:	4809      	ldr	r0, [pc, #36]	; (800af54 <MX_USB_DEVICE_Init+0x54>)
 800af2e:	f7fe fc87 	bl	8009840 <USBD_CDC_RegisterInterface>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800af38:	f7f6 fde7 	bl	8001b0a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af3c:	4805      	ldr	r0, [pc, #20]	; (800af54 <MX_USB_DEVICE_Init+0x54>)
 800af3e:	f7fe fdb5 	bl	8009aac <USBD_Start>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800af48:	f7f6 fddf 	bl	8001b0a <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800af4c:	bf00      	nop
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	200000ac 	.word	0x200000ac
 800af54:	20000830 	.word	0x20000830
 800af58:	20000018 	.word	0x20000018
 800af5c:	20000098 	.word	0x20000098

0800af60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af64:	2200      	movs	r2, #0
 800af66:	4905      	ldr	r1, [pc, #20]	; (800af7c <CDC_Init_FS+0x1c>)
 800af68:	4805      	ldr	r0, [pc, #20]	; (800af80 <CDC_Init_FS+0x20>)
 800af6a:	f7fe fc83 	bl	8009874 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af6e:	4905      	ldr	r1, [pc, #20]	; (800af84 <CDC_Init_FS+0x24>)
 800af70:	4803      	ldr	r0, [pc, #12]	; (800af80 <CDC_Init_FS+0x20>)
 800af72:	f7fe fca1 	bl	80098b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af78:	4618      	mov	r0, r3
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	20000f0c 	.word	0x20000f0c
 800af80:	20000830 	.word	0x20000830
 800af84:	20000b0c 	.word	0x20000b0c

0800af88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af88:	b480      	push	{r7}
 800af8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af8e:	4618      	mov	r0, r3
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	4603      	mov	r3, r0
 800afa0:	6039      	str	r1, [r7, #0]
 800afa2:	71fb      	strb	r3, [r7, #7]
 800afa4:	4613      	mov	r3, r2
 800afa6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800afa8:	79fb      	ldrb	r3, [r7, #7]
 800afaa:	2b23      	cmp	r3, #35	; 0x23
 800afac:	d84a      	bhi.n	800b044 <CDC_Control_FS+0xac>
 800afae:	a201      	add	r2, pc, #4	; (adr r2, 800afb4 <CDC_Control_FS+0x1c>)
 800afb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb4:	0800b045 	.word	0x0800b045
 800afb8:	0800b045 	.word	0x0800b045
 800afbc:	0800b045 	.word	0x0800b045
 800afc0:	0800b045 	.word	0x0800b045
 800afc4:	0800b045 	.word	0x0800b045
 800afc8:	0800b045 	.word	0x0800b045
 800afcc:	0800b045 	.word	0x0800b045
 800afd0:	0800b045 	.word	0x0800b045
 800afd4:	0800b045 	.word	0x0800b045
 800afd8:	0800b045 	.word	0x0800b045
 800afdc:	0800b045 	.word	0x0800b045
 800afe0:	0800b045 	.word	0x0800b045
 800afe4:	0800b045 	.word	0x0800b045
 800afe8:	0800b045 	.word	0x0800b045
 800afec:	0800b045 	.word	0x0800b045
 800aff0:	0800b045 	.word	0x0800b045
 800aff4:	0800b045 	.word	0x0800b045
 800aff8:	0800b045 	.word	0x0800b045
 800affc:	0800b045 	.word	0x0800b045
 800b000:	0800b045 	.word	0x0800b045
 800b004:	0800b045 	.word	0x0800b045
 800b008:	0800b045 	.word	0x0800b045
 800b00c:	0800b045 	.word	0x0800b045
 800b010:	0800b045 	.word	0x0800b045
 800b014:	0800b045 	.word	0x0800b045
 800b018:	0800b045 	.word	0x0800b045
 800b01c:	0800b045 	.word	0x0800b045
 800b020:	0800b045 	.word	0x0800b045
 800b024:	0800b045 	.word	0x0800b045
 800b028:	0800b045 	.word	0x0800b045
 800b02c:	0800b045 	.word	0x0800b045
 800b030:	0800b045 	.word	0x0800b045
 800b034:	0800b045 	.word	0x0800b045
 800b038:	0800b045 	.word	0x0800b045
 800b03c:	0800b045 	.word	0x0800b045
 800b040:	0800b045 	.word	0x0800b045
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b044:	bf00      	nop
  }

  return (USBD_OK);
 800b046:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	; 0x38
 800b058:	af04      	add	r7, sp, #16
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	4830      	ldr	r0, [pc, #192]	; (800b124 <CDC_Receive_FS+0xd0>)
 800b062:	f7fe fc29 	bl	80098b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b066:	482f      	ldr	r0, [pc, #188]	; (800b124 <CDC_Receive_FS+0xd0>)
 800b068:	f7fe fc84 	bl	8009974 <USBD_CDC_ReceivePacket>
//  Flag = 1; //receive sth, Flag=1

  // 一个简单的协议: "DD-MM-YYYY HH:MM:SS\r\n"
  // 例如: "16-07-2023 15:40:25\r\n"
//  char received_data[51];
  strncpy(received_data, (char*)Buf, *Len);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	461a      	mov	r2, r3
 800b072:	6879      	ldr	r1, [r7, #4]
 800b074:	482c      	ldr	r0, [pc, #176]	; (800b128 <CDC_Receive_FS+0xd4>)
 800b076:	f001 fc29 	bl	800c8cc <strncpy>

  RTC_TimeTypeDef sTime = {0};
 800b07a:	f107 0310 	add.w	r3, r7, #16
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	605a      	str	r2, [r3, #4]
 800b084:	609a      	str	r2, [r3, #8]
 800b086:	60da      	str	r2, [r3, #12]
 800b088:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800b08a:	2300      	movs	r3, #0
 800b08c:	60fb      	str	r3, [r7, #12]
//
  int tempYear;

  sscanf(received_data, "%04d-%02d-%02d %02d:%02d:%02d",
 800b08e:	f107 030c 	add.w	r3, r7, #12
 800b092:	1c59      	adds	r1, r3, #1
 800b094:	f107 0208 	add.w	r2, r7, #8
 800b098:	f107 0310 	add.w	r3, r7, #16
 800b09c:	3302      	adds	r3, #2
 800b09e:	9303      	str	r3, [sp, #12]
 800b0a0:	f107 0310 	add.w	r3, r7, #16
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	9302      	str	r3, [sp, #8]
 800b0a8:	f107 0310 	add.w	r3, r7, #16
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	f107 030c 	add.w	r3, r7, #12
 800b0b2:	3302      	adds	r3, #2
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	491c      	ldr	r1, [pc, #112]	; (800b12c <CDC_Receive_FS+0xd8>)
 800b0ba:	481b      	ldr	r0, [pc, #108]	; (800b128 <CDC_Receive_FS+0xd4>)
 800b0bc:	f001 faf8 	bl	800c6b0 <siscanf>
         &tempYear, &sDate.Month, &sDate.Date,
         &sTime.Hours, &sTime.Minutes, &sTime.Seconds);

  sDate.Year = tempYear - 2000;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	3330      	adds	r3, #48	; 0x30
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	73fb      	strb	r3, [r7, #15]
//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);

  HAL_StatusTypeDef status;

  status = HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800b0ca:	f107 030c 	add.w	r3, r7, #12
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4817      	ldr	r0, [pc, #92]	; (800b130 <CDC_Receive_FS+0xdc>)
 800b0d4:	f7fa fb21 	bl	800571a <HAL_RTC_SetDate>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b0de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d005      	beq.n	800b0f2 <CDC_Receive_FS+0x9e>
  {
      // handle error for SetDate
      printf("Error setting date! Status code: %d\n", status);
 800b0e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	4811      	ldr	r0, [pc, #68]	; (800b134 <CDC_Receive_FS+0xe0>)
 800b0ee:	f001 fa51 	bl	800c594 <iprintf>
  }

  status = HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800b0f2:	f107 0310 	add.w	r3, r7, #16
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	480d      	ldr	r0, [pc, #52]	; (800b130 <CDC_Receive_FS+0xdc>)
 800b0fc:	f7fa fa14 	bl	8005528 <HAL_RTC_SetTime>
 800b100:	4603      	mov	r3, r0
 800b102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d005      	beq.n	800b11a <CDC_Receive_FS+0xc6>
  {
      // handle error for SetTime
      printf("Error setting time! Status code: %d\n", status);
 800b10e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b112:	4619      	mov	r1, r3
 800b114:	4808      	ldr	r0, [pc, #32]	; (800b138 <CDC_Receive_FS+0xe4>)
 800b116:	f001 fa3d 	bl	800c594 <iprintf>
  }

  return (USBD_OK);
 800b11a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3728      	adds	r7, #40	; 0x28
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	20000830 	.word	0x20000830
 800b128:	20000354 	.word	0x20000354
 800b12c:	0800f504 	.word	0x0800f504
 800b130:	20000794 	.word	0x20000794
 800b134:	0800f524 	.word	0x0800f524
 800b138:	0800f54c 	.word	0x0800f54c

0800b13c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b148:	2300      	movs	r3, #0
 800b14a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b14c:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <CDC_Transmit_FS+0x48>)
 800b14e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b152:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b15e:	2301      	movs	r3, #1
 800b160:	e00b      	b.n	800b17a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b162:	887b      	ldrh	r3, [r7, #2]
 800b164:	461a      	mov	r2, r3
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	4806      	ldr	r0, [pc, #24]	; (800b184 <CDC_Transmit_FS+0x48>)
 800b16a:	f7fe fb83 	bl	8009874 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b16e:	4805      	ldr	r0, [pc, #20]	; (800b184 <CDC_Transmit_FS+0x48>)
 800b170:	f7fe fbc0 	bl	80098f4 <USBD_CDC_TransmitPacket>
 800b174:	4603      	mov	r3, r0
 800b176:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b178:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	20000830 	.word	0x20000830

0800b188 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b188:	b480      	push	{r7}
 800b18a:	b087      	sub	sp, #28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	4613      	mov	r3, r2
 800b194:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b19a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	371c      	adds	r7, #28
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
	...

0800b1ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2212      	movs	r2, #18
 800b1bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b1be:	4b03      	ldr	r3, [pc, #12]	; (800b1cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	200000cc 	.word	0x200000cc

0800b1d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	6039      	str	r1, [r7, #0]
 800b1da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2204      	movs	r2, #4
 800b1e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b1e2:	4b03      	ldr	r3, [pc, #12]	; (800b1f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr
 800b1f0:	200000ec 	.word	0x200000ec

0800b1f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	6039      	str	r1, [r7, #0]
 800b1fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b200:	79fb      	ldrb	r3, [r7, #7]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d105      	bne.n	800b212 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	4907      	ldr	r1, [pc, #28]	; (800b228 <USBD_FS_ProductStrDescriptor+0x34>)
 800b20a:	4808      	ldr	r0, [pc, #32]	; (800b22c <USBD_FS_ProductStrDescriptor+0x38>)
 800b20c:	f7ff fd98 	bl	800ad40 <USBD_GetString>
 800b210:	e004      	b.n	800b21c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	4904      	ldr	r1, [pc, #16]	; (800b228 <USBD_FS_ProductStrDescriptor+0x34>)
 800b216:	4805      	ldr	r0, [pc, #20]	; (800b22c <USBD_FS_ProductStrDescriptor+0x38>)
 800b218:	f7ff fd92 	bl	800ad40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b21c:	4b02      	ldr	r3, [pc, #8]	; (800b228 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	2000130c 	.word	0x2000130c
 800b22c:	0800f574 	.word	0x0800f574

0800b230 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	4603      	mov	r3, r0
 800b238:	6039      	str	r1, [r7, #0]
 800b23a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	4904      	ldr	r1, [pc, #16]	; (800b250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b240:	4804      	ldr	r0, [pc, #16]	; (800b254 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b242:	f7ff fd7d 	bl	800ad40 <USBD_GetString>
  return USBD_StrDesc;
 800b246:	4b02      	ldr	r3, [pc, #8]	; (800b250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	2000130c 	.word	0x2000130c
 800b254:	0800f58c 	.word	0x0800f58c

0800b258 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	6039      	str	r1, [r7, #0]
 800b262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	221a      	movs	r2, #26
 800b268:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b26a:	f000 f855 	bl	800b318 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b26e:	4b02      	ldr	r3, [pc, #8]	; (800b278 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	200000f0 	.word	0x200000f0

0800b27c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	4603      	mov	r3, r0
 800b284:	6039      	str	r1, [r7, #0]
 800b286:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b288:	79fb      	ldrb	r3, [r7, #7]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d105      	bne.n	800b29a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	4907      	ldr	r1, [pc, #28]	; (800b2b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b292:	4808      	ldr	r0, [pc, #32]	; (800b2b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b294:	f7ff fd54 	bl	800ad40 <USBD_GetString>
 800b298:	e004      	b.n	800b2a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	4904      	ldr	r1, [pc, #16]	; (800b2b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b29e:	4805      	ldr	r0, [pc, #20]	; (800b2b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b2a0:	f7ff fd4e 	bl	800ad40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2a4:	4b02      	ldr	r3, [pc, #8]	; (800b2b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	2000130c 	.word	0x2000130c
 800b2b4:	0800f5a0 	.word	0x0800f5a0

0800b2b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	6039      	str	r1, [r7, #0]
 800b2c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2c4:	79fb      	ldrb	r3, [r7, #7]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d105      	bne.n	800b2d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	4907      	ldr	r1, [pc, #28]	; (800b2ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b2ce:	4808      	ldr	r0, [pc, #32]	; (800b2f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b2d0:	f7ff fd36 	bl	800ad40 <USBD_GetString>
 800b2d4:	e004      	b.n	800b2e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	4904      	ldr	r1, [pc, #16]	; (800b2ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b2da:	4805      	ldr	r0, [pc, #20]	; (800b2f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b2dc:	f7ff fd30 	bl	800ad40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2e0:	4b02      	ldr	r3, [pc, #8]	; (800b2ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	2000130c 	.word	0x2000130c
 800b2f0:	0800f5ac 	.word	0x0800f5ac

0800b2f4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	6039      	str	r1, [r7, #0]
 800b2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	220c      	movs	r2, #12
 800b304:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b306:	4b03      	ldr	r3, [pc, #12]	; (800b314 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b308:	4618      	mov	r0, r3
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr
 800b314:	200000e0 	.word	0x200000e0

0800b318 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b31e:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <Get_SerialNum+0x44>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b324:	4b0e      	ldr	r3, [pc, #56]	; (800b360 <Get_SerialNum+0x48>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b32a:	4b0e      	ldr	r3, [pc, #56]	; (800b364 <Get_SerialNum+0x4c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4413      	add	r3, r2
 800b336:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d009      	beq.n	800b352 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b33e:	2208      	movs	r2, #8
 800b340:	4909      	ldr	r1, [pc, #36]	; (800b368 <Get_SerialNum+0x50>)
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f000 f814 	bl	800b370 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b348:	2204      	movs	r2, #4
 800b34a:	4908      	ldr	r1, [pc, #32]	; (800b36c <Get_SerialNum+0x54>)
 800b34c:	68b8      	ldr	r0, [r7, #8]
 800b34e:	f000 f80f 	bl	800b370 <IntToUnicode>
  }
}
 800b352:	bf00      	nop
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	1fff7590 	.word	0x1fff7590
 800b360:	1fff7594 	.word	0x1fff7594
 800b364:	1fff7598 	.word	0x1fff7598
 800b368:	200000f2 	.word	0x200000f2
 800b36c:	20000102 	.word	0x20000102

0800b370 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b370:	b480      	push	{r7}
 800b372:	b087      	sub	sp, #28
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	4613      	mov	r3, r2
 800b37c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b382:	2300      	movs	r3, #0
 800b384:	75fb      	strb	r3, [r7, #23]
 800b386:	e027      	b.n	800b3d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	0f1b      	lsrs	r3, r3, #28
 800b38c:	2b09      	cmp	r3, #9
 800b38e:	d80b      	bhi.n	800b3a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	0f1b      	lsrs	r3, r3, #28
 800b394:	b2da      	uxtb	r2, r3
 800b396:	7dfb      	ldrb	r3, [r7, #23]
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	4619      	mov	r1, r3
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	440b      	add	r3, r1
 800b3a0:	3230      	adds	r2, #48	; 0x30
 800b3a2:	b2d2      	uxtb	r2, r2
 800b3a4:	701a      	strb	r2, [r3, #0]
 800b3a6:	e00a      	b.n	800b3be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	0f1b      	lsrs	r3, r3, #28
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	440b      	add	r3, r1
 800b3b8:	3237      	adds	r2, #55	; 0x37
 800b3ba:	b2d2      	uxtb	r2, r2
 800b3bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	011b      	lsls	r3, r3, #4
 800b3c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	75fb      	strb	r3, [r7, #23]
 800b3d8:	7dfa      	ldrb	r2, [r7, #23]
 800b3da:	79fb      	ldrb	r3, [r7, #7]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d3d3      	bcc.n	800b388 <IntToUnicode+0x18>
  }
}
 800b3e0:	bf00      	nop
 800b3e2:	bf00      	nop
 800b3e4:	371c      	adds	r7, #28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
	...

0800b3f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b096      	sub	sp, #88	; 0x58
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	605a      	str	r2, [r3, #4]
 800b402:	609a      	str	r2, [r3, #8]
 800b404:	60da      	str	r2, [r3, #12]
 800b406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b408:	f107 0310 	add.w	r3, r7, #16
 800b40c:	2234      	movs	r2, #52	; 0x34
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f001 fa53 	bl	800c8bc <memset>
  if(pcdHandle->Instance==USB)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a24      	ldr	r2, [pc, #144]	; (800b4ac <HAL_PCD_MspInit+0xbc>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d141      	bne.n	800b4a4 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b420:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b424:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800b426:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800b42a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b42c:	f107 0310 	add.w	r3, r7, #16
 800b430:	4618      	mov	r0, r3
 800b432:	f7f9 fe63 	bl	80050fc <HAL_RCCEx_PeriphCLKConfig>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b43c:	f7f6 fb65 	bl	8001b0a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b440:	4b1b      	ldr	r3, [pc, #108]	; (800b4b0 <HAL_PCD_MspInit+0xc0>)
 800b442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b444:	4a1a      	ldr	r2, [pc, #104]	; (800b4b0 <HAL_PCD_MspInit+0xc0>)
 800b446:	f043 0301 	orr.w	r3, r3, #1
 800b44a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b44c:	4b18      	ldr	r3, [pc, #96]	; (800b4b0 <HAL_PCD_MspInit+0xc0>)
 800b44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b450:	f003 0301 	and.w	r3, r3, #1
 800b454:	60fb      	str	r3, [r7, #12]
 800b456:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b458:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b45c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b45e:	2302      	movs	r3, #2
 800b460:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b462:	2300      	movs	r3, #0
 800b464:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b466:	2303      	movs	r3, #3
 800b468:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b46a:	230a      	movs	r3, #10
 800b46c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b46e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b472:	4619      	mov	r1, r3
 800b474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b478:	f7f6 ff44 	bl	8002304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b47c:	4b0c      	ldr	r3, [pc, #48]	; (800b4b0 <HAL_PCD_MspInit+0xc0>)
 800b47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b480:	4a0b      	ldr	r2, [pc, #44]	; (800b4b0 <HAL_PCD_MspInit+0xc0>)
 800b482:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b486:	6593      	str	r3, [r2, #88]	; 0x58
 800b488:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <HAL_PCD_MspInit+0xc0>)
 800b48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b48c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b490:	60bb      	str	r3, [r7, #8]
 800b492:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b494:	2200      	movs	r2, #0
 800b496:	2100      	movs	r1, #0
 800b498:	2043      	movs	r0, #67	; 0x43
 800b49a:	f7f6 fefc 	bl	8002296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b49e:	2043      	movs	r0, #67	; 0x43
 800b4a0:	f7f6 ff15 	bl	80022ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4a4:	bf00      	nop
 800b4a6:	3758      	adds	r7, #88	; 0x58
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	40006800 	.word	0x40006800
 800b4b0:	40021000 	.word	0x40021000

0800b4b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4610      	mov	r0, r2
 800b4cc:	f7fe fb3b 	bl	8009b46 <USBD_LL_SetupStage>
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b4ea:	78fa      	ldrb	r2, [r7, #3]
 800b4ec:	6879      	ldr	r1, [r7, #4]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4413      	add	r3, r2
 800b4f4:	00db      	lsls	r3, r3, #3
 800b4f6:	440b      	add	r3, r1
 800b4f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	78fb      	ldrb	r3, [r7, #3]
 800b500:	4619      	mov	r1, r3
 800b502:	f7fe fb75 	bl	8009bf0 <USBD_LL_DataOutStage>
}
 800b506:	bf00      	nop
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b082      	sub	sp, #8
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	460b      	mov	r3, r1
 800b518:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 800b520:	78fa      	ldrb	r2, [r7, #3]
 800b522:	6879      	ldr	r1, [r7, #4]
 800b524:	4613      	mov	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4413      	add	r3, r2
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	440b      	add	r3, r1
 800b52e:	333c      	adds	r3, #60	; 0x3c
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	78fb      	ldrb	r3, [r7, #3]
 800b534:	4619      	mov	r1, r3
 800b536:	f7fe fc0e 	bl	8009d56 <USBD_LL_DataInStage>
}
 800b53a:	bf00      	nop
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe fd48 	bl	8009fe6 <USBD_LL_SOF>
}
 800b556:	bf00      	nop
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b084      	sub	sp, #16
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b566:	2301      	movs	r3, #1
 800b568:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d001      	beq.n	800b576 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b572:	f7f6 faca 	bl	8001b0a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b57c:	7bfa      	ldrb	r2, [r7, #15]
 800b57e:	4611      	mov	r1, r2
 800b580:	4618      	mov	r0, r3
 800b582:	f7fe fcec 	bl	8009f5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe fc94 	bl	8009eba <USBD_LL_Reset>
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fe fce7 	bl	8009f7e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d005      	beq.n	800b5c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5b8:	4b04      	ldr	r3, [pc, #16]	; (800b5cc <HAL_PCD_SuspendCallback+0x30>)
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	4a03      	ldr	r2, [pc, #12]	; (800b5cc <HAL_PCD_SuspendCallback+0x30>)
 800b5be:	f043 0306 	orr.w	r3, r3, #6
 800b5c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	e000ed00 	.word	0xe000ed00

0800b5d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d007      	beq.n	800b5f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5e0:	4b08      	ldr	r3, [pc, #32]	; (800b604 <HAL_PCD_ResumeCallback+0x34>)
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	4a07      	ldr	r2, [pc, #28]	; (800b604 <HAL_PCD_ResumeCallback+0x34>)
 800b5e6:	f023 0306 	bic.w	r3, r3, #6
 800b5ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b5ec:	f000 fab6 	bl	800bb5c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fe fcdd 	bl	8009fb6 <USBD_LL_Resume>
}
 800b5fc:	bf00      	nop
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	e000ed00 	.word	0xe000ed00

0800b608 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800b610:	f7f8 ff16 	bl	8004440 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b614:	4a2b      	ldr	r2, [pc, #172]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a29      	ldr	r2, [pc, #164]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b620:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 800b624:	4b27      	ldr	r3, [pc, #156]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b626:	4a28      	ldr	r2, [pc, #160]	; (800b6c8 <USBD_LL_Init+0xc0>)
 800b628:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b62a:	4b26      	ldr	r3, [pc, #152]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b62c:	2208      	movs	r2, #8
 800b62e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b630:	4b24      	ldr	r3, [pc, #144]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b632:	2202      	movs	r2, #2
 800b634:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b636:	4b23      	ldr	r3, [pc, #140]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b638:	2202      	movs	r2, #2
 800b63a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b63c:	4b21      	ldr	r3, [pc, #132]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b63e:	2200      	movs	r2, #0
 800b640:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b642:	4b20      	ldr	r3, [pc, #128]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b644:	2200      	movs	r2, #0
 800b646:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b648:	4b1e      	ldr	r3, [pc, #120]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b64e:	4b1d      	ldr	r3, [pc, #116]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b650:	2200      	movs	r2, #0
 800b652:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b654:	481b      	ldr	r0, [pc, #108]	; (800b6c4 <USBD_LL_Init+0xbc>)
 800b656:	f7f7 f911 	bl	800287c <HAL_PCD_Init>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800b660:	f7f6 fa53 	bl	8001b0a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b66a:	2318      	movs	r3, #24
 800b66c:	2200      	movs	r2, #0
 800b66e:	2100      	movs	r1, #0
 800b670:	f7f8 fe15 	bl	800429e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b67a:	2358      	movs	r3, #88	; 0x58
 800b67c:	2200      	movs	r2, #0
 800b67e:	2180      	movs	r1, #128	; 0x80
 800b680:	f7f8 fe0d 	bl	800429e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b68a:	23c0      	movs	r3, #192	; 0xc0
 800b68c:	2200      	movs	r2, #0
 800b68e:	2181      	movs	r1, #129	; 0x81
 800b690:	f7f8 fe05 	bl	800429e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b69a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	f7f8 fdfc 	bl	800429e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b6ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2182      	movs	r1, #130	; 0x82
 800b6b4:	f7f8 fdf3 	bl	800429e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	2000150c 	.word	0x2000150c
 800b6c8:	40006800 	.word	0x40006800

0800b6cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7f7 f9d0 	bl	8002a88 <HAL_PCD_Start>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d816      	bhi.n	800b720 <USBD_LL_Start+0x54>
 800b6f2:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <USBD_LL_Start+0x2c>)
 800b6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f8:	0800b709 	.word	0x0800b709
 800b6fc:	0800b70f 	.word	0x0800b70f
 800b700:	0800b715 	.word	0x0800b715
 800b704:	0800b71b 	.word	0x0800b71b
    case HAL_OK :
      usb_status = USBD_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
    break;
 800b70c:	e00b      	b.n	800b726 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b70e:	2303      	movs	r3, #3
 800b710:	73fb      	strb	r3, [r7, #15]
    break;
 800b712:	e008      	b.n	800b726 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b714:	2301      	movs	r3, #1
 800b716:	73fb      	strb	r3, [r7, #15]
    break;
 800b718:	e005      	b.n	800b726 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b71a:	2303      	movs	r3, #3
 800b71c:	73fb      	strb	r3, [r7, #15]
    break;
 800b71e:	e002      	b.n	800b726 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b720:	2303      	movs	r3, #3
 800b722:	73fb      	strb	r3, [r7, #15]
    break;
 800b724:	bf00      	nop
  }
  return usb_status;
 800b726:	7bfb      	ldrb	r3, [r7, #15]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	4608      	mov	r0, r1
 800b73a:	4611      	mov	r1, r2
 800b73c:	461a      	mov	r2, r3
 800b73e:	4603      	mov	r3, r0
 800b740:	70fb      	strb	r3, [r7, #3]
 800b742:	460b      	mov	r3, r1
 800b744:	70bb      	strb	r3, [r7, #2]
 800b746:	4613      	mov	r3, r2
 800b748:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b758:	78bb      	ldrb	r3, [r7, #2]
 800b75a:	883a      	ldrh	r2, [r7, #0]
 800b75c:	78f9      	ldrb	r1, [r7, #3]
 800b75e:	f7f7 fb01 	bl	8002d64 <HAL_PCD_EP_Open>
 800b762:	4603      	mov	r3, r0
 800b764:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b766:	7bbb      	ldrb	r3, [r7, #14]
 800b768:	2b03      	cmp	r3, #3
 800b76a:	d817      	bhi.n	800b79c <USBD_LL_OpenEP+0x6c>
 800b76c:	a201      	add	r2, pc, #4	; (adr r2, 800b774 <USBD_LL_OpenEP+0x44>)
 800b76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b772:	bf00      	nop
 800b774:	0800b785 	.word	0x0800b785
 800b778:	0800b78b 	.word	0x0800b78b
 800b77c:	0800b791 	.word	0x0800b791
 800b780:	0800b797 	.word	0x0800b797
    case HAL_OK :
      usb_status = USBD_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	73fb      	strb	r3, [r7, #15]
    break;
 800b788:	e00b      	b.n	800b7a2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b78a:	2303      	movs	r3, #3
 800b78c:	73fb      	strb	r3, [r7, #15]
    break;
 800b78e:	e008      	b.n	800b7a2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b790:	2301      	movs	r3, #1
 800b792:	73fb      	strb	r3, [r7, #15]
    break;
 800b794:	e005      	b.n	800b7a2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b796:	2303      	movs	r3, #3
 800b798:	73fb      	strb	r3, [r7, #15]
    break;
 800b79a:	e002      	b.n	800b7a2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b79c:	2303      	movs	r3, #3
 800b79e:	73fb      	strb	r3, [r7, #15]
    break;
 800b7a0:	bf00      	nop
  }
  return usb_status;
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7c6:	78fa      	ldrb	r2, [r7, #3]
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7f7 fb27 	bl	8002e1e <HAL_PCD_EP_Close>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d816      	bhi.n	800b808 <USBD_LL_CloseEP+0x5c>
 800b7da:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <USBD_LL_CloseEP+0x34>)
 800b7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e0:	0800b7f1 	.word	0x0800b7f1
 800b7e4:	0800b7f7 	.word	0x0800b7f7
 800b7e8:	0800b7fd 	.word	0x0800b7fd
 800b7ec:	0800b803 	.word	0x0800b803
    case HAL_OK :
      usb_status = USBD_OK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7f4:	e00b      	b.n	800b80e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b7fa:	e008      	b.n	800b80e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b800:	e005      	b.n	800b80e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b802:	2303      	movs	r3, #3
 800b804:	73fb      	strb	r3, [r7, #15]
    break;
 800b806:	e002      	b.n	800b80e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b808:	2303      	movs	r3, #3
 800b80a:	73fb      	strb	r3, [r7, #15]
    break;
 800b80c:	bf00      	nop
  }
  return usb_status;
 800b80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b824:	2300      	movs	r3, #0
 800b826:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b832:	78fa      	ldrb	r2, [r7, #3]
 800b834:	4611      	mov	r1, r2
 800b836:	4618      	mov	r0, r3
 800b838:	f7f7 fbb9 	bl	8002fae <HAL_PCD_EP_SetStall>
 800b83c:	4603      	mov	r3, r0
 800b83e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	2b03      	cmp	r3, #3
 800b844:	d816      	bhi.n	800b874 <USBD_LL_StallEP+0x5c>
 800b846:	a201      	add	r2, pc, #4	; (adr r2, 800b84c <USBD_LL_StallEP+0x34>)
 800b848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84c:	0800b85d 	.word	0x0800b85d
 800b850:	0800b863 	.word	0x0800b863
 800b854:	0800b869 	.word	0x0800b869
 800b858:	0800b86f 	.word	0x0800b86f
    case HAL_OK :
      usb_status = USBD_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]
    break;
 800b860:	e00b      	b.n	800b87a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b862:	2303      	movs	r3, #3
 800b864:	73fb      	strb	r3, [r7, #15]
    break;
 800b866:	e008      	b.n	800b87a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b868:	2301      	movs	r3, #1
 800b86a:	73fb      	strb	r3, [r7, #15]
    break;
 800b86c:	e005      	b.n	800b87a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b86e:	2303      	movs	r3, #3
 800b870:	73fb      	strb	r3, [r7, #15]
    break;
 800b872:	e002      	b.n	800b87a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b874:	2303      	movs	r3, #3
 800b876:	73fb      	strb	r3, [r7, #15]
    break;
 800b878:	bf00      	nop
  }
  return usb_status;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b89e:	78fa      	ldrb	r2, [r7, #3]
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7f7 fbe3 	bl	800306e <HAL_PCD_EP_ClrStall>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b8ac:	7bbb      	ldrb	r3, [r7, #14]
 800b8ae:	2b03      	cmp	r3, #3
 800b8b0:	d816      	bhi.n	800b8e0 <USBD_LL_ClearStallEP+0x5c>
 800b8b2:	a201      	add	r2, pc, #4	; (adr r2, 800b8b8 <USBD_LL_ClearStallEP+0x34>)
 800b8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b8:	0800b8c9 	.word	0x0800b8c9
 800b8bc:	0800b8cf 	.word	0x0800b8cf
 800b8c0:	0800b8d5 	.word	0x0800b8d5
 800b8c4:	0800b8db 	.word	0x0800b8db
    case HAL_OK :
      usb_status = USBD_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b8cc:	e00b      	b.n	800b8e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8d2:	e008      	b.n	800b8e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8d8:	e005      	b.n	800b8e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b8de:	e002      	b.n	800b8e6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e4:	bf00      	nop
  }
  return usb_status;
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	da0c      	bge.n	800b926 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b90c:	78fb      	ldrb	r3, [r7, #3]
 800b90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b912:	68f9      	ldr	r1, [r7, #12]
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	4613      	mov	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	00db      	lsls	r3, r3, #3
 800b91e:	440b      	add	r3, r1
 800b920:	3302      	adds	r3, #2
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	e00b      	b.n	800b93e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b926:	78fb      	ldrb	r3, [r7, #3]
 800b928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b92c:	68f9      	ldr	r1, [r7, #12]
 800b92e:	4613      	mov	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	440b      	add	r3, r1
 800b938:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b93c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3714      	adds	r7, #20
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
	...

0800b94c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	460b      	mov	r3, r1
 800b956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b958:	2300      	movs	r3, #0
 800b95a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b966:	78fa      	ldrb	r2, [r7, #3]
 800b968:	4611      	mov	r1, r2
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7f7 f9d5 	bl	8002d1a <HAL_PCD_SetAddress>
 800b970:	4603      	mov	r3, r0
 800b972:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	2b03      	cmp	r3, #3
 800b978:	d816      	bhi.n	800b9a8 <USBD_LL_SetUSBAddress+0x5c>
 800b97a:	a201      	add	r2, pc, #4	; (adr r2, 800b980 <USBD_LL_SetUSBAddress+0x34>)
 800b97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b980:	0800b991 	.word	0x0800b991
 800b984:	0800b997 	.word	0x0800b997
 800b988:	0800b99d 	.word	0x0800b99d
 800b98c:	0800b9a3 	.word	0x0800b9a3
    case HAL_OK :
      usb_status = USBD_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
    break;
 800b994:	e00b      	b.n	800b9ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b996:	2303      	movs	r3, #3
 800b998:	73fb      	strb	r3, [r7, #15]
    break;
 800b99a:	e008      	b.n	800b9ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b99c:	2301      	movs	r3, #1
 800b99e:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a0:	e005      	b.n	800b9ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a6:	e002      	b.n	800b9ae <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ac:	bf00      	nop
  }
  return usb_status;
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	607a      	str	r2, [r7, #4]
 800b9c2:	603b      	str	r3, [r7, #0]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9d6:	7af9      	ldrb	r1, [r7, #11]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	f7f7 fab0 	bl	8002f40 <HAL_PCD_EP_Transmit>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b9e4:	7dbb      	ldrb	r3, [r7, #22]
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	d816      	bhi.n	800ba18 <USBD_LL_Transmit+0x60>
 800b9ea:	a201      	add	r2, pc, #4	; (adr r2, 800b9f0 <USBD_LL_Transmit+0x38>)
 800b9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f0:	0800ba01 	.word	0x0800ba01
 800b9f4:	0800ba07 	.word	0x0800ba07
 800b9f8:	0800ba0d 	.word	0x0800ba0d
 800b9fc:	0800ba13 	.word	0x0800ba13
    case HAL_OK :
      usb_status = USBD_OK;
 800ba00:	2300      	movs	r3, #0
 800ba02:	75fb      	strb	r3, [r7, #23]
    break;
 800ba04:	e00b      	b.n	800ba1e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba06:	2303      	movs	r3, #3
 800ba08:	75fb      	strb	r3, [r7, #23]
    break;
 800ba0a:	e008      	b.n	800ba1e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	75fb      	strb	r3, [r7, #23]
    break;
 800ba10:	e005      	b.n	800ba1e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba12:	2303      	movs	r3, #3
 800ba14:	75fb      	strb	r3, [r7, #23]
    break;
 800ba16:	e002      	b.n	800ba1e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	75fb      	strb	r3, [r7, #23]
    break;
 800ba1c:	bf00      	nop
  }
  return usb_status;
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	607a      	str	r2, [r7, #4]
 800ba32:	603b      	str	r3, [r7, #0]
 800ba34:	460b      	mov	r3, r1
 800ba36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba46:	7af9      	ldrb	r1, [r7, #11]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	f7f7 fa2f 	bl	8002eae <HAL_PCD_EP_Receive>
 800ba50:	4603      	mov	r3, r0
 800ba52:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ba54:	7dbb      	ldrb	r3, [r7, #22]
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d816      	bhi.n	800ba88 <USBD_LL_PrepareReceive+0x60>
 800ba5a:	a201      	add	r2, pc, #4	; (adr r2, 800ba60 <USBD_LL_PrepareReceive+0x38>)
 800ba5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba60:	0800ba71 	.word	0x0800ba71
 800ba64:	0800ba77 	.word	0x0800ba77
 800ba68:	0800ba7d 	.word	0x0800ba7d
 800ba6c:	0800ba83 	.word	0x0800ba83
    case HAL_OK :
      usb_status = USBD_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	75fb      	strb	r3, [r7, #23]
    break;
 800ba74:	e00b      	b.n	800ba8e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba76:	2303      	movs	r3, #3
 800ba78:	75fb      	strb	r3, [r7, #23]
    break;
 800ba7a:	e008      	b.n	800ba8e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	75fb      	strb	r3, [r7, #23]
    break;
 800ba80:	e005      	b.n	800ba8e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba82:	2303      	movs	r3, #3
 800ba84:	75fb      	strb	r3, [r7, #23]
    break;
 800ba86:	e002      	b.n	800ba8e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	75fb      	strb	r3, [r7, #23]
    break;
 800ba8c:	bf00      	nop
  }
  return usb_status;
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800baaa:	78fa      	ldrb	r2, [r7, #3]
 800baac:	4611      	mov	r1, r2
 800baae:	4618      	mov	r0, r3
 800bab0:	f7f7 fa2e 	bl	8002f10 <HAL_PCD_EP_GetRxCount>
 800bab4:	4603      	mov	r3, r0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
	...

0800bac0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bacc:	78fb      	ldrb	r3, [r7, #3]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d002      	beq.n	800bad8 <HAL_PCDEx_LPM_Callback+0x18>
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d013      	beq.n	800bafe <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bad6:	e023      	b.n	800bb20 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d007      	beq.n	800baf0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bae0:	f000 f83c 	bl	800bb5c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bae4:	4b10      	ldr	r3, [pc, #64]	; (800bb28 <HAL_PCDEx_LPM_Callback+0x68>)
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	4a0f      	ldr	r2, [pc, #60]	; (800bb28 <HAL_PCDEx_LPM_Callback+0x68>)
 800baea:	f023 0306 	bic.w	r3, r3, #6
 800baee:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe fa5d 	bl	8009fb6 <USBD_LL_Resume>
    break;
 800bafc:	e010      	b.n	800bb20 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fe fa3a 	bl	8009f7e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d005      	beq.n	800bb1e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb12:	4b05      	ldr	r3, [pc, #20]	; (800bb28 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	4a04      	ldr	r2, [pc, #16]	; (800bb28 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb18:	f043 0306 	orr.w	r3, r3, #6
 800bb1c:	6113      	str	r3, [r2, #16]
    break;
 800bb1e:	bf00      	nop
}
 800bb20:	bf00      	nop
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	e000ed00 	.word	0xe000ed00

0800bb2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb34:	4b03      	ldr	r3, [pc, #12]	; (800bb44 <USBD_static_malloc+0x18>)
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	20001804 	.word	0x20001804

0800bb48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]

}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bb60:	f7f5 ff60 	bl	8001a24 <SystemClock_Config>
}
 800bb64:	bf00      	nop
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <__cvt>:
 800bb68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb6c:	ec55 4b10 	vmov	r4, r5, d0
 800bb70:	2d00      	cmp	r5, #0
 800bb72:	460e      	mov	r6, r1
 800bb74:	4619      	mov	r1, r3
 800bb76:	462b      	mov	r3, r5
 800bb78:	bfbb      	ittet	lt
 800bb7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb7e:	461d      	movlt	r5, r3
 800bb80:	2300      	movge	r3, #0
 800bb82:	232d      	movlt	r3, #45	; 0x2d
 800bb84:	700b      	strb	r3, [r1, #0]
 800bb86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb8c:	4691      	mov	r9, r2
 800bb8e:	f023 0820 	bic.w	r8, r3, #32
 800bb92:	bfbc      	itt	lt
 800bb94:	4622      	movlt	r2, r4
 800bb96:	4614      	movlt	r4, r2
 800bb98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb9c:	d005      	beq.n	800bbaa <__cvt+0x42>
 800bb9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bba2:	d100      	bne.n	800bba6 <__cvt+0x3e>
 800bba4:	3601      	adds	r6, #1
 800bba6:	2102      	movs	r1, #2
 800bba8:	e000      	b.n	800bbac <__cvt+0x44>
 800bbaa:	2103      	movs	r1, #3
 800bbac:	ab03      	add	r3, sp, #12
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	ab02      	add	r3, sp, #8
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	ec45 4b10 	vmov	d0, r4, r5
 800bbb8:	4653      	mov	r3, sl
 800bbba:	4632      	mov	r2, r6
 800bbbc:	f000 ffa8 	bl	800cb10 <_dtoa_r>
 800bbc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bbc4:	4607      	mov	r7, r0
 800bbc6:	d102      	bne.n	800bbce <__cvt+0x66>
 800bbc8:	f019 0f01 	tst.w	r9, #1
 800bbcc:	d022      	beq.n	800bc14 <__cvt+0xac>
 800bbce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bbd2:	eb07 0906 	add.w	r9, r7, r6
 800bbd6:	d110      	bne.n	800bbfa <__cvt+0x92>
 800bbd8:	783b      	ldrb	r3, [r7, #0]
 800bbda:	2b30      	cmp	r3, #48	; 0x30
 800bbdc:	d10a      	bne.n	800bbf4 <__cvt+0x8c>
 800bbde:	2200      	movs	r2, #0
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	f7f4 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbea:	b918      	cbnz	r0, 800bbf4 <__cvt+0x8c>
 800bbec:	f1c6 0601 	rsb	r6, r6, #1
 800bbf0:	f8ca 6000 	str.w	r6, [sl]
 800bbf4:	f8da 3000 	ldr.w	r3, [sl]
 800bbf8:	4499      	add	r9, r3
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4620      	mov	r0, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	f7f4 ff61 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc06:	b108      	cbz	r0, 800bc0c <__cvt+0xa4>
 800bc08:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc0c:	2230      	movs	r2, #48	; 0x30
 800bc0e:	9b03      	ldr	r3, [sp, #12]
 800bc10:	454b      	cmp	r3, r9
 800bc12:	d307      	bcc.n	800bc24 <__cvt+0xbc>
 800bc14:	9b03      	ldr	r3, [sp, #12]
 800bc16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc18:	1bdb      	subs	r3, r3, r7
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	b004      	add	sp, #16
 800bc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc24:	1c59      	adds	r1, r3, #1
 800bc26:	9103      	str	r1, [sp, #12]
 800bc28:	701a      	strb	r2, [r3, #0]
 800bc2a:	e7f0      	b.n	800bc0e <__cvt+0xa6>

0800bc2c <__exponent>:
 800bc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2900      	cmp	r1, #0
 800bc32:	bfb8      	it	lt
 800bc34:	4249      	neglt	r1, r1
 800bc36:	f803 2b02 	strb.w	r2, [r3], #2
 800bc3a:	bfb4      	ite	lt
 800bc3c:	222d      	movlt	r2, #45	; 0x2d
 800bc3e:	222b      	movge	r2, #43	; 0x2b
 800bc40:	2909      	cmp	r1, #9
 800bc42:	7042      	strb	r2, [r0, #1]
 800bc44:	dd2a      	ble.n	800bc9c <__exponent+0x70>
 800bc46:	f10d 0207 	add.w	r2, sp, #7
 800bc4a:	4617      	mov	r7, r2
 800bc4c:	260a      	movs	r6, #10
 800bc4e:	4694      	mov	ip, r2
 800bc50:	fb91 f5f6 	sdiv	r5, r1, r6
 800bc54:	fb06 1415 	mls	r4, r6, r5, r1
 800bc58:	3430      	adds	r4, #48	; 0x30
 800bc5a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bc5e:	460c      	mov	r4, r1
 800bc60:	2c63      	cmp	r4, #99	; 0x63
 800bc62:	f102 32ff 	add.w	r2, r2, #4294967295
 800bc66:	4629      	mov	r1, r5
 800bc68:	dcf1      	bgt.n	800bc4e <__exponent+0x22>
 800bc6a:	3130      	adds	r1, #48	; 0x30
 800bc6c:	f1ac 0402 	sub.w	r4, ip, #2
 800bc70:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bc74:	1c41      	adds	r1, r0, #1
 800bc76:	4622      	mov	r2, r4
 800bc78:	42ba      	cmp	r2, r7
 800bc7a:	d30a      	bcc.n	800bc92 <__exponent+0x66>
 800bc7c:	f10d 0209 	add.w	r2, sp, #9
 800bc80:	eba2 020c 	sub.w	r2, r2, ip
 800bc84:	42bc      	cmp	r4, r7
 800bc86:	bf88      	it	hi
 800bc88:	2200      	movhi	r2, #0
 800bc8a:	4413      	add	r3, r2
 800bc8c:	1a18      	subs	r0, r3, r0
 800bc8e:	b003      	add	sp, #12
 800bc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc92:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bc96:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bc9a:	e7ed      	b.n	800bc78 <__exponent+0x4c>
 800bc9c:	2330      	movs	r3, #48	; 0x30
 800bc9e:	3130      	adds	r1, #48	; 0x30
 800bca0:	7083      	strb	r3, [r0, #2]
 800bca2:	70c1      	strb	r1, [r0, #3]
 800bca4:	1d03      	adds	r3, r0, #4
 800bca6:	e7f1      	b.n	800bc8c <__exponent+0x60>

0800bca8 <_printf_float>:
 800bca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcac:	ed2d 8b02 	vpush	{d8}
 800bcb0:	b08d      	sub	sp, #52	; 0x34
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bcb8:	4616      	mov	r6, r2
 800bcba:	461f      	mov	r7, r3
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	f000 fe19 	bl	800c8f4 <_localeconv_r>
 800bcc2:	f8d0 a000 	ldr.w	sl, [r0]
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	f7f4 fad2 	bl	8000270 <strlen>
 800bccc:	2300      	movs	r3, #0
 800bcce:	930a      	str	r3, [sp, #40]	; 0x28
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	9305      	str	r3, [sp, #20]
 800bcd4:	f8d8 3000 	ldr.w	r3, [r8]
 800bcd8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bcdc:	3307      	adds	r3, #7
 800bcde:	f023 0307 	bic.w	r3, r3, #7
 800bce2:	f103 0208 	add.w	r2, r3, #8
 800bce6:	f8c8 2000 	str.w	r2, [r8]
 800bcea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bcf2:	9307      	str	r3, [sp, #28]
 800bcf4:	f8cd 8018 	str.w	r8, [sp, #24]
 800bcf8:	ee08 0a10 	vmov	s16, r0
 800bcfc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bd00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd04:	4b9e      	ldr	r3, [pc, #632]	; (800bf80 <_printf_float+0x2d8>)
 800bd06:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0a:	f7f4 ff0f 	bl	8000b2c <__aeabi_dcmpun>
 800bd0e:	bb88      	cbnz	r0, 800bd74 <_printf_float+0xcc>
 800bd10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd14:	4b9a      	ldr	r3, [pc, #616]	; (800bf80 <_printf_float+0x2d8>)
 800bd16:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1a:	f7f4 fee9 	bl	8000af0 <__aeabi_dcmple>
 800bd1e:	bb48      	cbnz	r0, 800bd74 <_printf_float+0xcc>
 800bd20:	2200      	movs	r2, #0
 800bd22:	2300      	movs	r3, #0
 800bd24:	4640      	mov	r0, r8
 800bd26:	4649      	mov	r1, r9
 800bd28:	f7f4 fed8 	bl	8000adc <__aeabi_dcmplt>
 800bd2c:	b110      	cbz	r0, 800bd34 <_printf_float+0x8c>
 800bd2e:	232d      	movs	r3, #45	; 0x2d
 800bd30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd34:	4a93      	ldr	r2, [pc, #588]	; (800bf84 <_printf_float+0x2dc>)
 800bd36:	4b94      	ldr	r3, [pc, #592]	; (800bf88 <_printf_float+0x2e0>)
 800bd38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bd3c:	bf94      	ite	ls
 800bd3e:	4690      	movls	r8, r2
 800bd40:	4698      	movhi	r8, r3
 800bd42:	2303      	movs	r3, #3
 800bd44:	6123      	str	r3, [r4, #16]
 800bd46:	9b05      	ldr	r3, [sp, #20]
 800bd48:	f023 0304 	bic.w	r3, r3, #4
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	f04f 0900 	mov.w	r9, #0
 800bd52:	9700      	str	r7, [sp, #0]
 800bd54:	4633      	mov	r3, r6
 800bd56:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd58:	4621      	mov	r1, r4
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f000 f9da 	bl	800c114 <_printf_common>
 800bd60:	3001      	adds	r0, #1
 800bd62:	f040 8090 	bne.w	800be86 <_printf_float+0x1de>
 800bd66:	f04f 30ff 	mov.w	r0, #4294967295
 800bd6a:	b00d      	add	sp, #52	; 0x34
 800bd6c:	ecbd 8b02 	vpop	{d8}
 800bd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd74:	4642      	mov	r2, r8
 800bd76:	464b      	mov	r3, r9
 800bd78:	4640      	mov	r0, r8
 800bd7a:	4649      	mov	r1, r9
 800bd7c:	f7f4 fed6 	bl	8000b2c <__aeabi_dcmpun>
 800bd80:	b140      	cbz	r0, 800bd94 <_printf_float+0xec>
 800bd82:	464b      	mov	r3, r9
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	bfbc      	itt	lt
 800bd88:	232d      	movlt	r3, #45	; 0x2d
 800bd8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd8e:	4a7f      	ldr	r2, [pc, #508]	; (800bf8c <_printf_float+0x2e4>)
 800bd90:	4b7f      	ldr	r3, [pc, #508]	; (800bf90 <_printf_float+0x2e8>)
 800bd92:	e7d1      	b.n	800bd38 <_printf_float+0x90>
 800bd94:	6863      	ldr	r3, [r4, #4]
 800bd96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd9a:	9206      	str	r2, [sp, #24]
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	d13f      	bne.n	800be20 <_printf_float+0x178>
 800bda0:	2306      	movs	r3, #6
 800bda2:	6063      	str	r3, [r4, #4]
 800bda4:	9b05      	ldr	r3, [sp, #20]
 800bda6:	6861      	ldr	r1, [r4, #4]
 800bda8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bdac:	2300      	movs	r3, #0
 800bdae:	9303      	str	r3, [sp, #12]
 800bdb0:	ab0a      	add	r3, sp, #40	; 0x28
 800bdb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bdb6:	ab09      	add	r3, sp, #36	; 0x24
 800bdb8:	ec49 8b10 	vmov	d0, r8, r9
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	6022      	str	r2, [r4, #0]
 800bdc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	f7ff fecf 	bl	800bb68 <__cvt>
 800bdca:	9b06      	ldr	r3, [sp, #24]
 800bdcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdce:	2b47      	cmp	r3, #71	; 0x47
 800bdd0:	4680      	mov	r8, r0
 800bdd2:	d108      	bne.n	800bde6 <_printf_float+0x13e>
 800bdd4:	1cc8      	adds	r0, r1, #3
 800bdd6:	db02      	blt.n	800bdde <_printf_float+0x136>
 800bdd8:	6863      	ldr	r3, [r4, #4]
 800bdda:	4299      	cmp	r1, r3
 800bddc:	dd41      	ble.n	800be62 <_printf_float+0x1ba>
 800bdde:	f1ab 0302 	sub.w	r3, fp, #2
 800bde2:	fa5f fb83 	uxtb.w	fp, r3
 800bde6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdea:	d820      	bhi.n	800be2e <_printf_float+0x186>
 800bdec:	3901      	subs	r1, #1
 800bdee:	465a      	mov	r2, fp
 800bdf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bdf4:	9109      	str	r1, [sp, #36]	; 0x24
 800bdf6:	f7ff ff19 	bl	800bc2c <__exponent>
 800bdfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdfc:	1813      	adds	r3, r2, r0
 800bdfe:	2a01      	cmp	r2, #1
 800be00:	4681      	mov	r9, r0
 800be02:	6123      	str	r3, [r4, #16]
 800be04:	dc02      	bgt.n	800be0c <_printf_float+0x164>
 800be06:	6822      	ldr	r2, [r4, #0]
 800be08:	07d2      	lsls	r2, r2, #31
 800be0a:	d501      	bpl.n	800be10 <_printf_float+0x168>
 800be0c:	3301      	adds	r3, #1
 800be0e:	6123      	str	r3, [r4, #16]
 800be10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800be14:	2b00      	cmp	r3, #0
 800be16:	d09c      	beq.n	800bd52 <_printf_float+0xaa>
 800be18:	232d      	movs	r3, #45	; 0x2d
 800be1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be1e:	e798      	b.n	800bd52 <_printf_float+0xaa>
 800be20:	9a06      	ldr	r2, [sp, #24]
 800be22:	2a47      	cmp	r2, #71	; 0x47
 800be24:	d1be      	bne.n	800bda4 <_printf_float+0xfc>
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1bc      	bne.n	800bda4 <_printf_float+0xfc>
 800be2a:	2301      	movs	r3, #1
 800be2c:	e7b9      	b.n	800bda2 <_printf_float+0xfa>
 800be2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800be32:	d118      	bne.n	800be66 <_printf_float+0x1be>
 800be34:	2900      	cmp	r1, #0
 800be36:	6863      	ldr	r3, [r4, #4]
 800be38:	dd0b      	ble.n	800be52 <_printf_float+0x1aa>
 800be3a:	6121      	str	r1, [r4, #16]
 800be3c:	b913      	cbnz	r3, 800be44 <_printf_float+0x19c>
 800be3e:	6822      	ldr	r2, [r4, #0]
 800be40:	07d0      	lsls	r0, r2, #31
 800be42:	d502      	bpl.n	800be4a <_printf_float+0x1a2>
 800be44:	3301      	adds	r3, #1
 800be46:	440b      	add	r3, r1
 800be48:	6123      	str	r3, [r4, #16]
 800be4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800be4c:	f04f 0900 	mov.w	r9, #0
 800be50:	e7de      	b.n	800be10 <_printf_float+0x168>
 800be52:	b913      	cbnz	r3, 800be5a <_printf_float+0x1b2>
 800be54:	6822      	ldr	r2, [r4, #0]
 800be56:	07d2      	lsls	r2, r2, #31
 800be58:	d501      	bpl.n	800be5e <_printf_float+0x1b6>
 800be5a:	3302      	adds	r3, #2
 800be5c:	e7f4      	b.n	800be48 <_printf_float+0x1a0>
 800be5e:	2301      	movs	r3, #1
 800be60:	e7f2      	b.n	800be48 <_printf_float+0x1a0>
 800be62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800be66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be68:	4299      	cmp	r1, r3
 800be6a:	db05      	blt.n	800be78 <_printf_float+0x1d0>
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	6121      	str	r1, [r4, #16]
 800be70:	07d8      	lsls	r0, r3, #31
 800be72:	d5ea      	bpl.n	800be4a <_printf_float+0x1a2>
 800be74:	1c4b      	adds	r3, r1, #1
 800be76:	e7e7      	b.n	800be48 <_printf_float+0x1a0>
 800be78:	2900      	cmp	r1, #0
 800be7a:	bfd4      	ite	le
 800be7c:	f1c1 0202 	rsble	r2, r1, #2
 800be80:	2201      	movgt	r2, #1
 800be82:	4413      	add	r3, r2
 800be84:	e7e0      	b.n	800be48 <_printf_float+0x1a0>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	055a      	lsls	r2, r3, #21
 800be8a:	d407      	bmi.n	800be9c <_printf_float+0x1f4>
 800be8c:	6923      	ldr	r3, [r4, #16]
 800be8e:	4642      	mov	r2, r8
 800be90:	4631      	mov	r1, r6
 800be92:	4628      	mov	r0, r5
 800be94:	47b8      	blx	r7
 800be96:	3001      	adds	r0, #1
 800be98:	d12c      	bne.n	800bef4 <_printf_float+0x24c>
 800be9a:	e764      	b.n	800bd66 <_printf_float+0xbe>
 800be9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bea0:	f240 80e0 	bls.w	800c064 <_printf_float+0x3bc>
 800bea4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bea8:	2200      	movs	r2, #0
 800beaa:	2300      	movs	r3, #0
 800beac:	f7f4 fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d034      	beq.n	800bf1e <_printf_float+0x276>
 800beb4:	4a37      	ldr	r2, [pc, #220]	; (800bf94 <_printf_float+0x2ec>)
 800beb6:	2301      	movs	r3, #1
 800beb8:	4631      	mov	r1, r6
 800beba:	4628      	mov	r0, r5
 800bebc:	47b8      	blx	r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	f43f af51 	beq.w	800bd66 <_printf_float+0xbe>
 800bec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bec8:	429a      	cmp	r2, r3
 800beca:	db02      	blt.n	800bed2 <_printf_float+0x22a>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	07d8      	lsls	r0, r3, #31
 800bed0:	d510      	bpl.n	800bef4 <_printf_float+0x24c>
 800bed2:	ee18 3a10 	vmov	r3, s16
 800bed6:	4652      	mov	r2, sl
 800bed8:	4631      	mov	r1, r6
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	f43f af41 	beq.w	800bd66 <_printf_float+0xbe>
 800bee4:	f04f 0800 	mov.w	r8, #0
 800bee8:	f104 091a 	add.w	r9, r4, #26
 800beec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beee:	3b01      	subs	r3, #1
 800bef0:	4543      	cmp	r3, r8
 800bef2:	dc09      	bgt.n	800bf08 <_printf_float+0x260>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	079b      	lsls	r3, r3, #30
 800bef8:	f100 8107 	bmi.w	800c10a <_printf_float+0x462>
 800befc:	68e0      	ldr	r0, [r4, #12]
 800befe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf00:	4298      	cmp	r0, r3
 800bf02:	bfb8      	it	lt
 800bf04:	4618      	movlt	r0, r3
 800bf06:	e730      	b.n	800bd6a <_printf_float+0xc2>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	464a      	mov	r2, r9
 800bf0c:	4631      	mov	r1, r6
 800bf0e:	4628      	mov	r0, r5
 800bf10:	47b8      	blx	r7
 800bf12:	3001      	adds	r0, #1
 800bf14:	f43f af27 	beq.w	800bd66 <_printf_float+0xbe>
 800bf18:	f108 0801 	add.w	r8, r8, #1
 800bf1c:	e7e6      	b.n	800beec <_printf_float+0x244>
 800bf1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	dc39      	bgt.n	800bf98 <_printf_float+0x2f0>
 800bf24:	4a1b      	ldr	r2, [pc, #108]	; (800bf94 <_printf_float+0x2ec>)
 800bf26:	2301      	movs	r3, #1
 800bf28:	4631      	mov	r1, r6
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	47b8      	blx	r7
 800bf2e:	3001      	adds	r0, #1
 800bf30:	f43f af19 	beq.w	800bd66 <_printf_float+0xbe>
 800bf34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	d102      	bne.n	800bf42 <_printf_float+0x29a>
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	07d9      	lsls	r1, r3, #31
 800bf40:	d5d8      	bpl.n	800bef4 <_printf_float+0x24c>
 800bf42:	ee18 3a10 	vmov	r3, s16
 800bf46:	4652      	mov	r2, sl
 800bf48:	4631      	mov	r1, r6
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	47b8      	blx	r7
 800bf4e:	3001      	adds	r0, #1
 800bf50:	f43f af09 	beq.w	800bd66 <_printf_float+0xbe>
 800bf54:	f04f 0900 	mov.w	r9, #0
 800bf58:	f104 0a1a 	add.w	sl, r4, #26
 800bf5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf5e:	425b      	negs	r3, r3
 800bf60:	454b      	cmp	r3, r9
 800bf62:	dc01      	bgt.n	800bf68 <_printf_float+0x2c0>
 800bf64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf66:	e792      	b.n	800be8e <_printf_float+0x1e6>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	4652      	mov	r2, sl
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	4628      	mov	r0, r5
 800bf70:	47b8      	blx	r7
 800bf72:	3001      	adds	r0, #1
 800bf74:	f43f aef7 	beq.w	800bd66 <_printf_float+0xbe>
 800bf78:	f109 0901 	add.w	r9, r9, #1
 800bf7c:	e7ee      	b.n	800bf5c <_printf_float+0x2b4>
 800bf7e:	bf00      	nop
 800bf80:	7fefffff 	.word	0x7fefffff
 800bf84:	0800f608 	.word	0x0800f608
 800bf88:	0800f60c 	.word	0x0800f60c
 800bf8c:	0800f610 	.word	0x0800f610
 800bf90:	0800f614 	.word	0x0800f614
 800bf94:	0800f843 	.word	0x0800f843
 800bf98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	bfa8      	it	ge
 800bfa0:	461a      	movge	r2, r3
 800bfa2:	2a00      	cmp	r2, #0
 800bfa4:	4691      	mov	r9, r2
 800bfa6:	dc37      	bgt.n	800c018 <_printf_float+0x370>
 800bfa8:	f04f 0b00 	mov.w	fp, #0
 800bfac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfb0:	f104 021a 	add.w	r2, r4, #26
 800bfb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bfb6:	9305      	str	r3, [sp, #20]
 800bfb8:	eba3 0309 	sub.w	r3, r3, r9
 800bfbc:	455b      	cmp	r3, fp
 800bfbe:	dc33      	bgt.n	800c028 <_printf_float+0x380>
 800bfc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	db3b      	blt.n	800c040 <_printf_float+0x398>
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	07da      	lsls	r2, r3, #31
 800bfcc:	d438      	bmi.n	800c040 <_printf_float+0x398>
 800bfce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bfd2:	eba2 0903 	sub.w	r9, r2, r3
 800bfd6:	9b05      	ldr	r3, [sp, #20]
 800bfd8:	1ad2      	subs	r2, r2, r3
 800bfda:	4591      	cmp	r9, r2
 800bfdc:	bfa8      	it	ge
 800bfde:	4691      	movge	r9, r2
 800bfe0:	f1b9 0f00 	cmp.w	r9, #0
 800bfe4:	dc35      	bgt.n	800c052 <_printf_float+0x3aa>
 800bfe6:	f04f 0800 	mov.w	r8, #0
 800bfea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfee:	f104 0a1a 	add.w	sl, r4, #26
 800bff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bff6:	1a9b      	subs	r3, r3, r2
 800bff8:	eba3 0309 	sub.w	r3, r3, r9
 800bffc:	4543      	cmp	r3, r8
 800bffe:	f77f af79 	ble.w	800bef4 <_printf_float+0x24c>
 800c002:	2301      	movs	r3, #1
 800c004:	4652      	mov	r2, sl
 800c006:	4631      	mov	r1, r6
 800c008:	4628      	mov	r0, r5
 800c00a:	47b8      	blx	r7
 800c00c:	3001      	adds	r0, #1
 800c00e:	f43f aeaa 	beq.w	800bd66 <_printf_float+0xbe>
 800c012:	f108 0801 	add.w	r8, r8, #1
 800c016:	e7ec      	b.n	800bff2 <_printf_float+0x34a>
 800c018:	4613      	mov	r3, r2
 800c01a:	4631      	mov	r1, r6
 800c01c:	4642      	mov	r2, r8
 800c01e:	4628      	mov	r0, r5
 800c020:	47b8      	blx	r7
 800c022:	3001      	adds	r0, #1
 800c024:	d1c0      	bne.n	800bfa8 <_printf_float+0x300>
 800c026:	e69e      	b.n	800bd66 <_printf_float+0xbe>
 800c028:	2301      	movs	r3, #1
 800c02a:	4631      	mov	r1, r6
 800c02c:	4628      	mov	r0, r5
 800c02e:	9205      	str	r2, [sp, #20]
 800c030:	47b8      	blx	r7
 800c032:	3001      	adds	r0, #1
 800c034:	f43f ae97 	beq.w	800bd66 <_printf_float+0xbe>
 800c038:	9a05      	ldr	r2, [sp, #20]
 800c03a:	f10b 0b01 	add.w	fp, fp, #1
 800c03e:	e7b9      	b.n	800bfb4 <_printf_float+0x30c>
 800c040:	ee18 3a10 	vmov	r3, s16
 800c044:	4652      	mov	r2, sl
 800c046:	4631      	mov	r1, r6
 800c048:	4628      	mov	r0, r5
 800c04a:	47b8      	blx	r7
 800c04c:	3001      	adds	r0, #1
 800c04e:	d1be      	bne.n	800bfce <_printf_float+0x326>
 800c050:	e689      	b.n	800bd66 <_printf_float+0xbe>
 800c052:	9a05      	ldr	r2, [sp, #20]
 800c054:	464b      	mov	r3, r9
 800c056:	4442      	add	r2, r8
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b8      	blx	r7
 800c05e:	3001      	adds	r0, #1
 800c060:	d1c1      	bne.n	800bfe6 <_printf_float+0x33e>
 800c062:	e680      	b.n	800bd66 <_printf_float+0xbe>
 800c064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c066:	2a01      	cmp	r2, #1
 800c068:	dc01      	bgt.n	800c06e <_printf_float+0x3c6>
 800c06a:	07db      	lsls	r3, r3, #31
 800c06c:	d53a      	bpl.n	800c0e4 <_printf_float+0x43c>
 800c06e:	2301      	movs	r3, #1
 800c070:	4642      	mov	r2, r8
 800c072:	4631      	mov	r1, r6
 800c074:	4628      	mov	r0, r5
 800c076:	47b8      	blx	r7
 800c078:	3001      	adds	r0, #1
 800c07a:	f43f ae74 	beq.w	800bd66 <_printf_float+0xbe>
 800c07e:	ee18 3a10 	vmov	r3, s16
 800c082:	4652      	mov	r2, sl
 800c084:	4631      	mov	r1, r6
 800c086:	4628      	mov	r0, r5
 800c088:	47b8      	blx	r7
 800c08a:	3001      	adds	r0, #1
 800c08c:	f43f ae6b 	beq.w	800bd66 <_printf_float+0xbe>
 800c090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c094:	2200      	movs	r2, #0
 800c096:	2300      	movs	r3, #0
 800c098:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c09c:	f7f4 fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0a0:	b9d8      	cbnz	r0, 800c0da <_printf_float+0x432>
 800c0a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c0a6:	f108 0201 	add.w	r2, r8, #1
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	47b8      	blx	r7
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	d10e      	bne.n	800c0d2 <_printf_float+0x42a>
 800c0b4:	e657      	b.n	800bd66 <_printf_float+0xbe>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	4652      	mov	r2, sl
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	4628      	mov	r0, r5
 800c0be:	47b8      	blx	r7
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	f43f ae50 	beq.w	800bd66 <_printf_float+0xbe>
 800c0c6:	f108 0801 	add.w	r8, r8, #1
 800c0ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	4543      	cmp	r3, r8
 800c0d0:	dcf1      	bgt.n	800c0b6 <_printf_float+0x40e>
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c0d8:	e6da      	b.n	800be90 <_printf_float+0x1e8>
 800c0da:	f04f 0800 	mov.w	r8, #0
 800c0de:	f104 0a1a 	add.w	sl, r4, #26
 800c0e2:	e7f2      	b.n	800c0ca <_printf_float+0x422>
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	4642      	mov	r2, r8
 800c0e8:	e7df      	b.n	800c0aa <_printf_float+0x402>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	464a      	mov	r2, r9
 800c0ee:	4631      	mov	r1, r6
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	47b8      	blx	r7
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	f43f ae36 	beq.w	800bd66 <_printf_float+0xbe>
 800c0fa:	f108 0801 	add.w	r8, r8, #1
 800c0fe:	68e3      	ldr	r3, [r4, #12]
 800c100:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c102:	1a5b      	subs	r3, r3, r1
 800c104:	4543      	cmp	r3, r8
 800c106:	dcf0      	bgt.n	800c0ea <_printf_float+0x442>
 800c108:	e6f8      	b.n	800befc <_printf_float+0x254>
 800c10a:	f04f 0800 	mov.w	r8, #0
 800c10e:	f104 0919 	add.w	r9, r4, #25
 800c112:	e7f4      	b.n	800c0fe <_printf_float+0x456>

0800c114 <_printf_common>:
 800c114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c118:	4616      	mov	r6, r2
 800c11a:	4699      	mov	r9, r3
 800c11c:	688a      	ldr	r2, [r1, #8]
 800c11e:	690b      	ldr	r3, [r1, #16]
 800c120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c124:	4293      	cmp	r3, r2
 800c126:	bfb8      	it	lt
 800c128:	4613      	movlt	r3, r2
 800c12a:	6033      	str	r3, [r6, #0]
 800c12c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c130:	4607      	mov	r7, r0
 800c132:	460c      	mov	r4, r1
 800c134:	b10a      	cbz	r2, 800c13a <_printf_common+0x26>
 800c136:	3301      	adds	r3, #1
 800c138:	6033      	str	r3, [r6, #0]
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	0699      	lsls	r1, r3, #26
 800c13e:	bf42      	ittt	mi
 800c140:	6833      	ldrmi	r3, [r6, #0]
 800c142:	3302      	addmi	r3, #2
 800c144:	6033      	strmi	r3, [r6, #0]
 800c146:	6825      	ldr	r5, [r4, #0]
 800c148:	f015 0506 	ands.w	r5, r5, #6
 800c14c:	d106      	bne.n	800c15c <_printf_common+0x48>
 800c14e:	f104 0a19 	add.w	sl, r4, #25
 800c152:	68e3      	ldr	r3, [r4, #12]
 800c154:	6832      	ldr	r2, [r6, #0]
 800c156:	1a9b      	subs	r3, r3, r2
 800c158:	42ab      	cmp	r3, r5
 800c15a:	dc26      	bgt.n	800c1aa <_printf_common+0x96>
 800c15c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c160:	1e13      	subs	r3, r2, #0
 800c162:	6822      	ldr	r2, [r4, #0]
 800c164:	bf18      	it	ne
 800c166:	2301      	movne	r3, #1
 800c168:	0692      	lsls	r2, r2, #26
 800c16a:	d42b      	bmi.n	800c1c4 <_printf_common+0xb0>
 800c16c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c170:	4649      	mov	r1, r9
 800c172:	4638      	mov	r0, r7
 800c174:	47c0      	blx	r8
 800c176:	3001      	adds	r0, #1
 800c178:	d01e      	beq.n	800c1b8 <_printf_common+0xa4>
 800c17a:	6823      	ldr	r3, [r4, #0]
 800c17c:	6922      	ldr	r2, [r4, #16]
 800c17e:	f003 0306 	and.w	r3, r3, #6
 800c182:	2b04      	cmp	r3, #4
 800c184:	bf02      	ittt	eq
 800c186:	68e5      	ldreq	r5, [r4, #12]
 800c188:	6833      	ldreq	r3, [r6, #0]
 800c18a:	1aed      	subeq	r5, r5, r3
 800c18c:	68a3      	ldr	r3, [r4, #8]
 800c18e:	bf0c      	ite	eq
 800c190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c194:	2500      	movne	r5, #0
 800c196:	4293      	cmp	r3, r2
 800c198:	bfc4      	itt	gt
 800c19a:	1a9b      	subgt	r3, r3, r2
 800c19c:	18ed      	addgt	r5, r5, r3
 800c19e:	2600      	movs	r6, #0
 800c1a0:	341a      	adds	r4, #26
 800c1a2:	42b5      	cmp	r5, r6
 800c1a4:	d11a      	bne.n	800c1dc <_printf_common+0xc8>
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	e008      	b.n	800c1bc <_printf_common+0xa8>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	4652      	mov	r2, sl
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	47c0      	blx	r8
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d103      	bne.n	800c1c0 <_printf_common+0xac>
 800c1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c0:	3501      	adds	r5, #1
 800c1c2:	e7c6      	b.n	800c152 <_printf_common+0x3e>
 800c1c4:	18e1      	adds	r1, r4, r3
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	2030      	movs	r0, #48	; 0x30
 800c1ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1ce:	4422      	add	r2, r4
 800c1d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1d8:	3302      	adds	r3, #2
 800c1da:	e7c7      	b.n	800c16c <_printf_common+0x58>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	4622      	mov	r2, r4
 800c1e0:	4649      	mov	r1, r9
 800c1e2:	4638      	mov	r0, r7
 800c1e4:	47c0      	blx	r8
 800c1e6:	3001      	adds	r0, #1
 800c1e8:	d0e6      	beq.n	800c1b8 <_printf_common+0xa4>
 800c1ea:	3601      	adds	r6, #1
 800c1ec:	e7d9      	b.n	800c1a2 <_printf_common+0x8e>
	...

0800c1f0 <_printf_i>:
 800c1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f4:	7e0f      	ldrb	r7, [r1, #24]
 800c1f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1f8:	2f78      	cmp	r7, #120	; 0x78
 800c1fa:	4691      	mov	r9, r2
 800c1fc:	4680      	mov	r8, r0
 800c1fe:	460c      	mov	r4, r1
 800c200:	469a      	mov	sl, r3
 800c202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c206:	d807      	bhi.n	800c218 <_printf_i+0x28>
 800c208:	2f62      	cmp	r7, #98	; 0x62
 800c20a:	d80a      	bhi.n	800c222 <_printf_i+0x32>
 800c20c:	2f00      	cmp	r7, #0
 800c20e:	f000 80d4 	beq.w	800c3ba <_printf_i+0x1ca>
 800c212:	2f58      	cmp	r7, #88	; 0x58
 800c214:	f000 80c0 	beq.w	800c398 <_printf_i+0x1a8>
 800c218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c21c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c220:	e03a      	b.n	800c298 <_printf_i+0xa8>
 800c222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c226:	2b15      	cmp	r3, #21
 800c228:	d8f6      	bhi.n	800c218 <_printf_i+0x28>
 800c22a:	a101      	add	r1, pc, #4	; (adr r1, 800c230 <_printf_i+0x40>)
 800c22c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c230:	0800c289 	.word	0x0800c289
 800c234:	0800c29d 	.word	0x0800c29d
 800c238:	0800c219 	.word	0x0800c219
 800c23c:	0800c219 	.word	0x0800c219
 800c240:	0800c219 	.word	0x0800c219
 800c244:	0800c219 	.word	0x0800c219
 800c248:	0800c29d 	.word	0x0800c29d
 800c24c:	0800c219 	.word	0x0800c219
 800c250:	0800c219 	.word	0x0800c219
 800c254:	0800c219 	.word	0x0800c219
 800c258:	0800c219 	.word	0x0800c219
 800c25c:	0800c3a1 	.word	0x0800c3a1
 800c260:	0800c2c9 	.word	0x0800c2c9
 800c264:	0800c35b 	.word	0x0800c35b
 800c268:	0800c219 	.word	0x0800c219
 800c26c:	0800c219 	.word	0x0800c219
 800c270:	0800c3c3 	.word	0x0800c3c3
 800c274:	0800c219 	.word	0x0800c219
 800c278:	0800c2c9 	.word	0x0800c2c9
 800c27c:	0800c219 	.word	0x0800c219
 800c280:	0800c219 	.word	0x0800c219
 800c284:	0800c363 	.word	0x0800c363
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	1d1a      	adds	r2, r3, #4
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	602a      	str	r2, [r5, #0]
 800c290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c298:	2301      	movs	r3, #1
 800c29a:	e09f      	b.n	800c3dc <_printf_i+0x1ec>
 800c29c:	6820      	ldr	r0, [r4, #0]
 800c29e:	682b      	ldr	r3, [r5, #0]
 800c2a0:	0607      	lsls	r7, r0, #24
 800c2a2:	f103 0104 	add.w	r1, r3, #4
 800c2a6:	6029      	str	r1, [r5, #0]
 800c2a8:	d501      	bpl.n	800c2ae <_printf_i+0xbe>
 800c2aa:	681e      	ldr	r6, [r3, #0]
 800c2ac:	e003      	b.n	800c2b6 <_printf_i+0xc6>
 800c2ae:	0646      	lsls	r6, r0, #25
 800c2b0:	d5fb      	bpl.n	800c2aa <_printf_i+0xba>
 800c2b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c2b6:	2e00      	cmp	r6, #0
 800c2b8:	da03      	bge.n	800c2c2 <_printf_i+0xd2>
 800c2ba:	232d      	movs	r3, #45	; 0x2d
 800c2bc:	4276      	negs	r6, r6
 800c2be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2c2:	485a      	ldr	r0, [pc, #360]	; (800c42c <_printf_i+0x23c>)
 800c2c4:	230a      	movs	r3, #10
 800c2c6:	e012      	b.n	800c2ee <_printf_i+0xfe>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	6820      	ldr	r0, [r4, #0]
 800c2cc:	1d19      	adds	r1, r3, #4
 800c2ce:	6029      	str	r1, [r5, #0]
 800c2d0:	0605      	lsls	r5, r0, #24
 800c2d2:	d501      	bpl.n	800c2d8 <_printf_i+0xe8>
 800c2d4:	681e      	ldr	r6, [r3, #0]
 800c2d6:	e002      	b.n	800c2de <_printf_i+0xee>
 800c2d8:	0641      	lsls	r1, r0, #25
 800c2da:	d5fb      	bpl.n	800c2d4 <_printf_i+0xe4>
 800c2dc:	881e      	ldrh	r6, [r3, #0]
 800c2de:	4853      	ldr	r0, [pc, #332]	; (800c42c <_printf_i+0x23c>)
 800c2e0:	2f6f      	cmp	r7, #111	; 0x6f
 800c2e2:	bf0c      	ite	eq
 800c2e4:	2308      	moveq	r3, #8
 800c2e6:	230a      	movne	r3, #10
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2ee:	6865      	ldr	r5, [r4, #4]
 800c2f0:	60a5      	str	r5, [r4, #8]
 800c2f2:	2d00      	cmp	r5, #0
 800c2f4:	bfa2      	ittt	ge
 800c2f6:	6821      	ldrge	r1, [r4, #0]
 800c2f8:	f021 0104 	bicge.w	r1, r1, #4
 800c2fc:	6021      	strge	r1, [r4, #0]
 800c2fe:	b90e      	cbnz	r6, 800c304 <_printf_i+0x114>
 800c300:	2d00      	cmp	r5, #0
 800c302:	d04b      	beq.n	800c39c <_printf_i+0x1ac>
 800c304:	4615      	mov	r5, r2
 800c306:	fbb6 f1f3 	udiv	r1, r6, r3
 800c30a:	fb03 6711 	mls	r7, r3, r1, r6
 800c30e:	5dc7      	ldrb	r7, [r0, r7]
 800c310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c314:	4637      	mov	r7, r6
 800c316:	42bb      	cmp	r3, r7
 800c318:	460e      	mov	r6, r1
 800c31a:	d9f4      	bls.n	800c306 <_printf_i+0x116>
 800c31c:	2b08      	cmp	r3, #8
 800c31e:	d10b      	bne.n	800c338 <_printf_i+0x148>
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	07de      	lsls	r6, r3, #31
 800c324:	d508      	bpl.n	800c338 <_printf_i+0x148>
 800c326:	6923      	ldr	r3, [r4, #16]
 800c328:	6861      	ldr	r1, [r4, #4]
 800c32a:	4299      	cmp	r1, r3
 800c32c:	bfde      	ittt	le
 800c32e:	2330      	movle	r3, #48	; 0x30
 800c330:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c334:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c338:	1b52      	subs	r2, r2, r5
 800c33a:	6122      	str	r2, [r4, #16]
 800c33c:	f8cd a000 	str.w	sl, [sp]
 800c340:	464b      	mov	r3, r9
 800c342:	aa03      	add	r2, sp, #12
 800c344:	4621      	mov	r1, r4
 800c346:	4640      	mov	r0, r8
 800c348:	f7ff fee4 	bl	800c114 <_printf_common>
 800c34c:	3001      	adds	r0, #1
 800c34e:	d14a      	bne.n	800c3e6 <_printf_i+0x1f6>
 800c350:	f04f 30ff 	mov.w	r0, #4294967295
 800c354:	b004      	add	sp, #16
 800c356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35a:	6823      	ldr	r3, [r4, #0]
 800c35c:	f043 0320 	orr.w	r3, r3, #32
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	4833      	ldr	r0, [pc, #204]	; (800c430 <_printf_i+0x240>)
 800c364:	2778      	movs	r7, #120	; 0x78
 800c366:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	6829      	ldr	r1, [r5, #0]
 800c36e:	061f      	lsls	r7, r3, #24
 800c370:	f851 6b04 	ldr.w	r6, [r1], #4
 800c374:	d402      	bmi.n	800c37c <_printf_i+0x18c>
 800c376:	065f      	lsls	r7, r3, #25
 800c378:	bf48      	it	mi
 800c37a:	b2b6      	uxthmi	r6, r6
 800c37c:	07df      	lsls	r7, r3, #31
 800c37e:	bf48      	it	mi
 800c380:	f043 0320 	orrmi.w	r3, r3, #32
 800c384:	6029      	str	r1, [r5, #0]
 800c386:	bf48      	it	mi
 800c388:	6023      	strmi	r3, [r4, #0]
 800c38a:	b91e      	cbnz	r6, 800c394 <_printf_i+0x1a4>
 800c38c:	6823      	ldr	r3, [r4, #0]
 800c38e:	f023 0320 	bic.w	r3, r3, #32
 800c392:	6023      	str	r3, [r4, #0]
 800c394:	2310      	movs	r3, #16
 800c396:	e7a7      	b.n	800c2e8 <_printf_i+0xf8>
 800c398:	4824      	ldr	r0, [pc, #144]	; (800c42c <_printf_i+0x23c>)
 800c39a:	e7e4      	b.n	800c366 <_printf_i+0x176>
 800c39c:	4615      	mov	r5, r2
 800c39e:	e7bd      	b.n	800c31c <_printf_i+0x12c>
 800c3a0:	682b      	ldr	r3, [r5, #0]
 800c3a2:	6826      	ldr	r6, [r4, #0]
 800c3a4:	6961      	ldr	r1, [r4, #20]
 800c3a6:	1d18      	adds	r0, r3, #4
 800c3a8:	6028      	str	r0, [r5, #0]
 800c3aa:	0635      	lsls	r5, r6, #24
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	d501      	bpl.n	800c3b4 <_printf_i+0x1c4>
 800c3b0:	6019      	str	r1, [r3, #0]
 800c3b2:	e002      	b.n	800c3ba <_printf_i+0x1ca>
 800c3b4:	0670      	lsls	r0, r6, #25
 800c3b6:	d5fb      	bpl.n	800c3b0 <_printf_i+0x1c0>
 800c3b8:	8019      	strh	r1, [r3, #0]
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	6123      	str	r3, [r4, #16]
 800c3be:	4615      	mov	r5, r2
 800c3c0:	e7bc      	b.n	800c33c <_printf_i+0x14c>
 800c3c2:	682b      	ldr	r3, [r5, #0]
 800c3c4:	1d1a      	adds	r2, r3, #4
 800c3c6:	602a      	str	r2, [r5, #0]
 800c3c8:	681d      	ldr	r5, [r3, #0]
 800c3ca:	6862      	ldr	r2, [r4, #4]
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	f7f3 fefe 	bl	80001d0 <memchr>
 800c3d4:	b108      	cbz	r0, 800c3da <_printf_i+0x1ea>
 800c3d6:	1b40      	subs	r0, r0, r5
 800c3d8:	6060      	str	r0, [r4, #4]
 800c3da:	6863      	ldr	r3, [r4, #4]
 800c3dc:	6123      	str	r3, [r4, #16]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3e4:	e7aa      	b.n	800c33c <_printf_i+0x14c>
 800c3e6:	6923      	ldr	r3, [r4, #16]
 800c3e8:	462a      	mov	r2, r5
 800c3ea:	4649      	mov	r1, r9
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	47d0      	blx	sl
 800c3f0:	3001      	adds	r0, #1
 800c3f2:	d0ad      	beq.n	800c350 <_printf_i+0x160>
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	079b      	lsls	r3, r3, #30
 800c3f8:	d413      	bmi.n	800c422 <_printf_i+0x232>
 800c3fa:	68e0      	ldr	r0, [r4, #12]
 800c3fc:	9b03      	ldr	r3, [sp, #12]
 800c3fe:	4298      	cmp	r0, r3
 800c400:	bfb8      	it	lt
 800c402:	4618      	movlt	r0, r3
 800c404:	e7a6      	b.n	800c354 <_printf_i+0x164>
 800c406:	2301      	movs	r3, #1
 800c408:	4632      	mov	r2, r6
 800c40a:	4649      	mov	r1, r9
 800c40c:	4640      	mov	r0, r8
 800c40e:	47d0      	blx	sl
 800c410:	3001      	adds	r0, #1
 800c412:	d09d      	beq.n	800c350 <_printf_i+0x160>
 800c414:	3501      	adds	r5, #1
 800c416:	68e3      	ldr	r3, [r4, #12]
 800c418:	9903      	ldr	r1, [sp, #12]
 800c41a:	1a5b      	subs	r3, r3, r1
 800c41c:	42ab      	cmp	r3, r5
 800c41e:	dcf2      	bgt.n	800c406 <_printf_i+0x216>
 800c420:	e7eb      	b.n	800c3fa <_printf_i+0x20a>
 800c422:	2500      	movs	r5, #0
 800c424:	f104 0619 	add.w	r6, r4, #25
 800c428:	e7f5      	b.n	800c416 <_printf_i+0x226>
 800c42a:	bf00      	nop
 800c42c:	0800f618 	.word	0x0800f618
 800c430:	0800f629 	.word	0x0800f629

0800c434 <std>:
 800c434:	2300      	movs	r3, #0
 800c436:	b510      	push	{r4, lr}
 800c438:	4604      	mov	r4, r0
 800c43a:	e9c0 3300 	strd	r3, r3, [r0]
 800c43e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c442:	6083      	str	r3, [r0, #8]
 800c444:	8181      	strh	r1, [r0, #12]
 800c446:	6643      	str	r3, [r0, #100]	; 0x64
 800c448:	81c2      	strh	r2, [r0, #14]
 800c44a:	6183      	str	r3, [r0, #24]
 800c44c:	4619      	mov	r1, r3
 800c44e:	2208      	movs	r2, #8
 800c450:	305c      	adds	r0, #92	; 0x5c
 800c452:	f000 fa33 	bl	800c8bc <memset>
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <std+0x38>)
 800c458:	6263      	str	r3, [r4, #36]	; 0x24
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <std+0x3c>)
 800c45c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <std+0x40>)
 800c460:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c462:	4b05      	ldr	r3, [pc, #20]	; (800c478 <std+0x44>)
 800c464:	6224      	str	r4, [r4, #32]
 800c466:	6323      	str	r3, [r4, #48]	; 0x30
 800c468:	bd10      	pop	{r4, pc}
 800c46a:	bf00      	nop
 800c46c:	0800c709 	.word	0x0800c709
 800c470:	0800c72f 	.word	0x0800c72f
 800c474:	0800c767 	.word	0x0800c767
 800c478:	0800c78b 	.word	0x0800c78b

0800c47c <stdio_exit_handler>:
 800c47c:	4a02      	ldr	r2, [pc, #8]	; (800c488 <stdio_exit_handler+0xc>)
 800c47e:	4903      	ldr	r1, [pc, #12]	; (800c48c <stdio_exit_handler+0x10>)
 800c480:	4803      	ldr	r0, [pc, #12]	; (800c490 <stdio_exit_handler+0x14>)
 800c482:	f000 b869 	b.w	800c558 <_fwalk_sglue>
 800c486:	bf00      	nop
 800c488:	2000010c 	.word	0x2000010c
 800c48c:	0800ec71 	.word	0x0800ec71
 800c490:	20000118 	.word	0x20000118

0800c494 <cleanup_stdio>:
 800c494:	6841      	ldr	r1, [r0, #4]
 800c496:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <cleanup_stdio+0x34>)
 800c498:	4299      	cmp	r1, r3
 800c49a:	b510      	push	{r4, lr}
 800c49c:	4604      	mov	r4, r0
 800c49e:	d001      	beq.n	800c4a4 <cleanup_stdio+0x10>
 800c4a0:	f002 fbe6 	bl	800ec70 <_fflush_r>
 800c4a4:	68a1      	ldr	r1, [r4, #8]
 800c4a6:	4b09      	ldr	r3, [pc, #36]	; (800c4cc <cleanup_stdio+0x38>)
 800c4a8:	4299      	cmp	r1, r3
 800c4aa:	d002      	beq.n	800c4b2 <cleanup_stdio+0x1e>
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f002 fbdf 	bl	800ec70 <_fflush_r>
 800c4b2:	68e1      	ldr	r1, [r4, #12]
 800c4b4:	4b06      	ldr	r3, [pc, #24]	; (800c4d0 <cleanup_stdio+0x3c>)
 800c4b6:	4299      	cmp	r1, r3
 800c4b8:	d004      	beq.n	800c4c4 <cleanup_stdio+0x30>
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4c0:	f002 bbd6 	b.w	800ec70 <_fflush_r>
 800c4c4:	bd10      	pop	{r4, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20001a24 	.word	0x20001a24
 800c4cc:	20001a8c 	.word	0x20001a8c
 800c4d0:	20001af4 	.word	0x20001af4

0800c4d4 <global_stdio_init.part.0>:
 800c4d4:	b510      	push	{r4, lr}
 800c4d6:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <global_stdio_init.part.0+0x30>)
 800c4d8:	4c0b      	ldr	r4, [pc, #44]	; (800c508 <global_stdio_init.part.0+0x34>)
 800c4da:	4a0c      	ldr	r2, [pc, #48]	; (800c50c <global_stdio_init.part.0+0x38>)
 800c4dc:	601a      	str	r2, [r3, #0]
 800c4de:	4620      	mov	r0, r4
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	2104      	movs	r1, #4
 800c4e4:	f7ff ffa6 	bl	800c434 <std>
 800c4e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	2109      	movs	r1, #9
 800c4f0:	f7ff ffa0 	bl	800c434 <std>
 800c4f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c4f8:	2202      	movs	r2, #2
 800c4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4fe:	2112      	movs	r1, #18
 800c500:	f7ff bf98 	b.w	800c434 <std>
 800c504:	20001b5c 	.word	0x20001b5c
 800c508:	20001a24 	.word	0x20001a24
 800c50c:	0800c47d 	.word	0x0800c47d

0800c510 <__sfp_lock_acquire>:
 800c510:	4801      	ldr	r0, [pc, #4]	; (800c518 <__sfp_lock_acquire+0x8>)
 800c512:	f000 ba63 	b.w	800c9dc <__retarget_lock_acquire_recursive>
 800c516:	bf00      	nop
 800c518:	20001b65 	.word	0x20001b65

0800c51c <__sfp_lock_release>:
 800c51c:	4801      	ldr	r0, [pc, #4]	; (800c524 <__sfp_lock_release+0x8>)
 800c51e:	f000 ba5e 	b.w	800c9de <__retarget_lock_release_recursive>
 800c522:	bf00      	nop
 800c524:	20001b65 	.word	0x20001b65

0800c528 <__sinit>:
 800c528:	b510      	push	{r4, lr}
 800c52a:	4604      	mov	r4, r0
 800c52c:	f7ff fff0 	bl	800c510 <__sfp_lock_acquire>
 800c530:	6a23      	ldr	r3, [r4, #32]
 800c532:	b11b      	cbz	r3, 800c53c <__sinit+0x14>
 800c534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c538:	f7ff bff0 	b.w	800c51c <__sfp_lock_release>
 800c53c:	4b04      	ldr	r3, [pc, #16]	; (800c550 <__sinit+0x28>)
 800c53e:	6223      	str	r3, [r4, #32]
 800c540:	4b04      	ldr	r3, [pc, #16]	; (800c554 <__sinit+0x2c>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1f5      	bne.n	800c534 <__sinit+0xc>
 800c548:	f7ff ffc4 	bl	800c4d4 <global_stdio_init.part.0>
 800c54c:	e7f2      	b.n	800c534 <__sinit+0xc>
 800c54e:	bf00      	nop
 800c550:	0800c495 	.word	0x0800c495
 800c554:	20001b5c 	.word	0x20001b5c

0800c558 <_fwalk_sglue>:
 800c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c55c:	4607      	mov	r7, r0
 800c55e:	4688      	mov	r8, r1
 800c560:	4614      	mov	r4, r2
 800c562:	2600      	movs	r6, #0
 800c564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c568:	f1b9 0901 	subs.w	r9, r9, #1
 800c56c:	d505      	bpl.n	800c57a <_fwalk_sglue+0x22>
 800c56e:	6824      	ldr	r4, [r4, #0]
 800c570:	2c00      	cmp	r4, #0
 800c572:	d1f7      	bne.n	800c564 <_fwalk_sglue+0xc>
 800c574:	4630      	mov	r0, r6
 800c576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57a:	89ab      	ldrh	r3, [r5, #12]
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d907      	bls.n	800c590 <_fwalk_sglue+0x38>
 800c580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c584:	3301      	adds	r3, #1
 800c586:	d003      	beq.n	800c590 <_fwalk_sglue+0x38>
 800c588:	4629      	mov	r1, r5
 800c58a:	4638      	mov	r0, r7
 800c58c:	47c0      	blx	r8
 800c58e:	4306      	orrs	r6, r0
 800c590:	3568      	adds	r5, #104	; 0x68
 800c592:	e7e9      	b.n	800c568 <_fwalk_sglue+0x10>

0800c594 <iprintf>:
 800c594:	b40f      	push	{r0, r1, r2, r3}
 800c596:	b507      	push	{r0, r1, r2, lr}
 800c598:	4906      	ldr	r1, [pc, #24]	; (800c5b4 <iprintf+0x20>)
 800c59a:	ab04      	add	r3, sp, #16
 800c59c:	6808      	ldr	r0, [r1, #0]
 800c59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5a2:	6881      	ldr	r1, [r0, #8]
 800c5a4:	9301      	str	r3, [sp, #4]
 800c5a6:	f002 f875 	bl	800e694 <_vfiprintf_r>
 800c5aa:	b003      	add	sp, #12
 800c5ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5b0:	b004      	add	sp, #16
 800c5b2:	4770      	bx	lr
 800c5b4:	20000164 	.word	0x20000164

0800c5b8 <_puts_r>:
 800c5b8:	6a03      	ldr	r3, [r0, #32]
 800c5ba:	b570      	push	{r4, r5, r6, lr}
 800c5bc:	6884      	ldr	r4, [r0, #8]
 800c5be:	4605      	mov	r5, r0
 800c5c0:	460e      	mov	r6, r1
 800c5c2:	b90b      	cbnz	r3, 800c5c8 <_puts_r+0x10>
 800c5c4:	f7ff ffb0 	bl	800c528 <__sinit>
 800c5c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5ca:	07db      	lsls	r3, r3, #31
 800c5cc:	d405      	bmi.n	800c5da <_puts_r+0x22>
 800c5ce:	89a3      	ldrh	r3, [r4, #12]
 800c5d0:	0598      	lsls	r0, r3, #22
 800c5d2:	d402      	bmi.n	800c5da <_puts_r+0x22>
 800c5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5d6:	f000 fa01 	bl	800c9dc <__retarget_lock_acquire_recursive>
 800c5da:	89a3      	ldrh	r3, [r4, #12]
 800c5dc:	0719      	lsls	r1, r3, #28
 800c5de:	d513      	bpl.n	800c608 <_puts_r+0x50>
 800c5e0:	6923      	ldr	r3, [r4, #16]
 800c5e2:	b18b      	cbz	r3, 800c608 <_puts_r+0x50>
 800c5e4:	3e01      	subs	r6, #1
 800c5e6:	68a3      	ldr	r3, [r4, #8]
 800c5e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	60a3      	str	r3, [r4, #8]
 800c5f0:	b9e9      	cbnz	r1, 800c62e <_puts_r+0x76>
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	da2e      	bge.n	800c654 <_puts_r+0x9c>
 800c5f6:	4622      	mov	r2, r4
 800c5f8:	210a      	movs	r1, #10
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f000 f8c9 	bl	800c792 <__swbuf_r>
 800c600:	3001      	adds	r0, #1
 800c602:	d007      	beq.n	800c614 <_puts_r+0x5c>
 800c604:	250a      	movs	r5, #10
 800c606:	e007      	b.n	800c618 <_puts_r+0x60>
 800c608:	4621      	mov	r1, r4
 800c60a:	4628      	mov	r0, r5
 800c60c:	f000 f8fe 	bl	800c80c <__swsetup_r>
 800c610:	2800      	cmp	r0, #0
 800c612:	d0e7      	beq.n	800c5e4 <_puts_r+0x2c>
 800c614:	f04f 35ff 	mov.w	r5, #4294967295
 800c618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c61a:	07da      	lsls	r2, r3, #31
 800c61c:	d405      	bmi.n	800c62a <_puts_r+0x72>
 800c61e:	89a3      	ldrh	r3, [r4, #12]
 800c620:	059b      	lsls	r3, r3, #22
 800c622:	d402      	bmi.n	800c62a <_puts_r+0x72>
 800c624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c626:	f000 f9da 	bl	800c9de <__retarget_lock_release_recursive>
 800c62a:	4628      	mov	r0, r5
 800c62c:	bd70      	pop	{r4, r5, r6, pc}
 800c62e:	2b00      	cmp	r3, #0
 800c630:	da04      	bge.n	800c63c <_puts_r+0x84>
 800c632:	69a2      	ldr	r2, [r4, #24]
 800c634:	429a      	cmp	r2, r3
 800c636:	dc06      	bgt.n	800c646 <_puts_r+0x8e>
 800c638:	290a      	cmp	r1, #10
 800c63a:	d004      	beq.n	800c646 <_puts_r+0x8e>
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	6022      	str	r2, [r4, #0]
 800c642:	7019      	strb	r1, [r3, #0]
 800c644:	e7cf      	b.n	800c5e6 <_puts_r+0x2e>
 800c646:	4622      	mov	r2, r4
 800c648:	4628      	mov	r0, r5
 800c64a:	f000 f8a2 	bl	800c792 <__swbuf_r>
 800c64e:	3001      	adds	r0, #1
 800c650:	d1c9      	bne.n	800c5e6 <_puts_r+0x2e>
 800c652:	e7df      	b.n	800c614 <_puts_r+0x5c>
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	250a      	movs	r5, #10
 800c658:	1c5a      	adds	r2, r3, #1
 800c65a:	6022      	str	r2, [r4, #0]
 800c65c:	701d      	strb	r5, [r3, #0]
 800c65e:	e7db      	b.n	800c618 <_puts_r+0x60>

0800c660 <puts>:
 800c660:	4b02      	ldr	r3, [pc, #8]	; (800c66c <puts+0xc>)
 800c662:	4601      	mov	r1, r0
 800c664:	6818      	ldr	r0, [r3, #0]
 800c666:	f7ff bfa7 	b.w	800c5b8 <_puts_r>
 800c66a:	bf00      	nop
 800c66c:	20000164 	.word	0x20000164

0800c670 <siprintf>:
 800c670:	b40e      	push	{r1, r2, r3}
 800c672:	b500      	push	{lr}
 800c674:	b09c      	sub	sp, #112	; 0x70
 800c676:	ab1d      	add	r3, sp, #116	; 0x74
 800c678:	9002      	str	r0, [sp, #8]
 800c67a:	9006      	str	r0, [sp, #24]
 800c67c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c680:	4809      	ldr	r0, [pc, #36]	; (800c6a8 <siprintf+0x38>)
 800c682:	9107      	str	r1, [sp, #28]
 800c684:	9104      	str	r1, [sp, #16]
 800c686:	4909      	ldr	r1, [pc, #36]	; (800c6ac <siprintf+0x3c>)
 800c688:	f853 2b04 	ldr.w	r2, [r3], #4
 800c68c:	9105      	str	r1, [sp, #20]
 800c68e:	6800      	ldr	r0, [r0, #0]
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	a902      	add	r1, sp, #8
 800c694:	f001 fd04 	bl	800e0a0 <_svfiprintf_r>
 800c698:	9b02      	ldr	r3, [sp, #8]
 800c69a:	2200      	movs	r2, #0
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	b01c      	add	sp, #112	; 0x70
 800c6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a4:	b003      	add	sp, #12
 800c6a6:	4770      	bx	lr
 800c6a8:	20000164 	.word	0x20000164
 800c6ac:	ffff0208 	.word	0xffff0208

0800c6b0 <siscanf>:
 800c6b0:	b40e      	push	{r1, r2, r3}
 800c6b2:	b510      	push	{r4, lr}
 800c6b4:	b09f      	sub	sp, #124	; 0x7c
 800c6b6:	ac21      	add	r4, sp, #132	; 0x84
 800c6b8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c6bc:	f854 2b04 	ldr.w	r2, [r4], #4
 800c6c0:	9201      	str	r2, [sp, #4]
 800c6c2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c6c6:	9004      	str	r0, [sp, #16]
 800c6c8:	9008      	str	r0, [sp, #32]
 800c6ca:	f7f3 fdd1 	bl	8000270 <strlen>
 800c6ce:	4b0c      	ldr	r3, [pc, #48]	; (800c700 <siscanf+0x50>)
 800c6d0:	9005      	str	r0, [sp, #20]
 800c6d2:	9009      	str	r0, [sp, #36]	; 0x24
 800c6d4:	930d      	str	r3, [sp, #52]	; 0x34
 800c6d6:	480b      	ldr	r0, [pc, #44]	; (800c704 <siscanf+0x54>)
 800c6d8:	9a01      	ldr	r2, [sp, #4]
 800c6da:	6800      	ldr	r0, [r0, #0]
 800c6dc:	9403      	str	r4, [sp, #12]
 800c6de:	2300      	movs	r3, #0
 800c6e0:	9311      	str	r3, [sp, #68]	; 0x44
 800c6e2:	9316      	str	r3, [sp, #88]	; 0x58
 800c6e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c6ec:	a904      	add	r1, sp, #16
 800c6ee:	4623      	mov	r3, r4
 800c6f0:	f001 fe2e 	bl	800e350 <__ssvfiscanf_r>
 800c6f4:	b01f      	add	sp, #124	; 0x7c
 800c6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6fa:	b003      	add	sp, #12
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	0800c72b 	.word	0x0800c72b
 800c704:	20000164 	.word	0x20000164

0800c708 <__sread>:
 800c708:	b510      	push	{r4, lr}
 800c70a:	460c      	mov	r4, r1
 800c70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c710:	f000 f916 	bl	800c940 <_read_r>
 800c714:	2800      	cmp	r0, #0
 800c716:	bfab      	itete	ge
 800c718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c71a:	89a3      	ldrhlt	r3, [r4, #12]
 800c71c:	181b      	addge	r3, r3, r0
 800c71e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c722:	bfac      	ite	ge
 800c724:	6563      	strge	r3, [r4, #84]	; 0x54
 800c726:	81a3      	strhlt	r3, [r4, #12]
 800c728:	bd10      	pop	{r4, pc}

0800c72a <__seofread>:
 800c72a:	2000      	movs	r0, #0
 800c72c:	4770      	bx	lr

0800c72e <__swrite>:
 800c72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c732:	461f      	mov	r7, r3
 800c734:	898b      	ldrh	r3, [r1, #12]
 800c736:	05db      	lsls	r3, r3, #23
 800c738:	4605      	mov	r5, r0
 800c73a:	460c      	mov	r4, r1
 800c73c:	4616      	mov	r6, r2
 800c73e:	d505      	bpl.n	800c74c <__swrite+0x1e>
 800c740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c744:	2302      	movs	r3, #2
 800c746:	2200      	movs	r2, #0
 800c748:	f000 f8e8 	bl	800c91c <_lseek_r>
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	4632      	mov	r2, r6
 800c75a:	463b      	mov	r3, r7
 800c75c:	4628      	mov	r0, r5
 800c75e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c762:	f000 b8ff 	b.w	800c964 <_write_r>

0800c766 <__sseek>:
 800c766:	b510      	push	{r4, lr}
 800c768:	460c      	mov	r4, r1
 800c76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c76e:	f000 f8d5 	bl	800c91c <_lseek_r>
 800c772:	1c43      	adds	r3, r0, #1
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	bf15      	itete	ne
 800c778:	6560      	strne	r0, [r4, #84]	; 0x54
 800c77a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c77e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c782:	81a3      	strheq	r3, [r4, #12]
 800c784:	bf18      	it	ne
 800c786:	81a3      	strhne	r3, [r4, #12]
 800c788:	bd10      	pop	{r4, pc}

0800c78a <__sclose>:
 800c78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c78e:	f000 b8b5 	b.w	800c8fc <_close_r>

0800c792 <__swbuf_r>:
 800c792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c794:	460e      	mov	r6, r1
 800c796:	4614      	mov	r4, r2
 800c798:	4605      	mov	r5, r0
 800c79a:	b118      	cbz	r0, 800c7a4 <__swbuf_r+0x12>
 800c79c:	6a03      	ldr	r3, [r0, #32]
 800c79e:	b90b      	cbnz	r3, 800c7a4 <__swbuf_r+0x12>
 800c7a0:	f7ff fec2 	bl	800c528 <__sinit>
 800c7a4:	69a3      	ldr	r3, [r4, #24]
 800c7a6:	60a3      	str	r3, [r4, #8]
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	071a      	lsls	r2, r3, #28
 800c7ac:	d525      	bpl.n	800c7fa <__swbuf_r+0x68>
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	b31b      	cbz	r3, 800c7fa <__swbuf_r+0x68>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	6922      	ldr	r2, [r4, #16]
 800c7b6:	1a98      	subs	r0, r3, r2
 800c7b8:	6963      	ldr	r3, [r4, #20]
 800c7ba:	b2f6      	uxtb	r6, r6
 800c7bc:	4283      	cmp	r3, r0
 800c7be:	4637      	mov	r7, r6
 800c7c0:	dc04      	bgt.n	800c7cc <__swbuf_r+0x3a>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f002 fa53 	bl	800ec70 <_fflush_r>
 800c7ca:	b9e0      	cbnz	r0, 800c806 <__swbuf_r+0x74>
 800c7cc:	68a3      	ldr	r3, [r4, #8]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	60a3      	str	r3, [r4, #8]
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	6022      	str	r2, [r4, #0]
 800c7d8:	701e      	strb	r6, [r3, #0]
 800c7da:	6962      	ldr	r2, [r4, #20]
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d004      	beq.n	800c7ec <__swbuf_r+0x5a>
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	07db      	lsls	r3, r3, #31
 800c7e6:	d506      	bpl.n	800c7f6 <__swbuf_r+0x64>
 800c7e8:	2e0a      	cmp	r6, #10
 800c7ea:	d104      	bne.n	800c7f6 <__swbuf_r+0x64>
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	f002 fa3e 	bl	800ec70 <_fflush_r>
 800c7f4:	b938      	cbnz	r0, 800c806 <__swbuf_r+0x74>
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f000 f805 	bl	800c80c <__swsetup_r>
 800c802:	2800      	cmp	r0, #0
 800c804:	d0d5      	beq.n	800c7b2 <__swbuf_r+0x20>
 800c806:	f04f 37ff 	mov.w	r7, #4294967295
 800c80a:	e7f4      	b.n	800c7f6 <__swbuf_r+0x64>

0800c80c <__swsetup_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4b2a      	ldr	r3, [pc, #168]	; (800c8b8 <__swsetup_r+0xac>)
 800c810:	4605      	mov	r5, r0
 800c812:	6818      	ldr	r0, [r3, #0]
 800c814:	460c      	mov	r4, r1
 800c816:	b118      	cbz	r0, 800c820 <__swsetup_r+0x14>
 800c818:	6a03      	ldr	r3, [r0, #32]
 800c81a:	b90b      	cbnz	r3, 800c820 <__swsetup_r+0x14>
 800c81c:	f7ff fe84 	bl	800c528 <__sinit>
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c826:	0718      	lsls	r0, r3, #28
 800c828:	d422      	bmi.n	800c870 <__swsetup_r+0x64>
 800c82a:	06d9      	lsls	r1, r3, #27
 800c82c:	d407      	bmi.n	800c83e <__swsetup_r+0x32>
 800c82e:	2309      	movs	r3, #9
 800c830:	602b      	str	r3, [r5, #0]
 800c832:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	e034      	b.n	800c8a8 <__swsetup_r+0x9c>
 800c83e:	0758      	lsls	r0, r3, #29
 800c840:	d512      	bpl.n	800c868 <__swsetup_r+0x5c>
 800c842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c844:	b141      	cbz	r1, 800c858 <__swsetup_r+0x4c>
 800c846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c84a:	4299      	cmp	r1, r3
 800c84c:	d002      	beq.n	800c854 <__swsetup_r+0x48>
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 ff50 	bl	800d6f4 <_free_r>
 800c854:	2300      	movs	r3, #0
 800c856:	6363      	str	r3, [r4, #52]	; 0x34
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	2300      	movs	r3, #0
 800c862:	6063      	str	r3, [r4, #4]
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	6023      	str	r3, [r4, #0]
 800c868:	89a3      	ldrh	r3, [r4, #12]
 800c86a:	f043 0308 	orr.w	r3, r3, #8
 800c86e:	81a3      	strh	r3, [r4, #12]
 800c870:	6923      	ldr	r3, [r4, #16]
 800c872:	b94b      	cbnz	r3, 800c888 <__swsetup_r+0x7c>
 800c874:	89a3      	ldrh	r3, [r4, #12]
 800c876:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c87a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c87e:	d003      	beq.n	800c888 <__swsetup_r+0x7c>
 800c880:	4621      	mov	r1, r4
 800c882:	4628      	mov	r0, r5
 800c884:	f002 fa42 	bl	800ed0c <__smakebuf_r>
 800c888:	89a0      	ldrh	r0, [r4, #12]
 800c88a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c88e:	f010 0301 	ands.w	r3, r0, #1
 800c892:	d00a      	beq.n	800c8aa <__swsetup_r+0x9e>
 800c894:	2300      	movs	r3, #0
 800c896:	60a3      	str	r3, [r4, #8]
 800c898:	6963      	ldr	r3, [r4, #20]
 800c89a:	425b      	negs	r3, r3
 800c89c:	61a3      	str	r3, [r4, #24]
 800c89e:	6923      	ldr	r3, [r4, #16]
 800c8a0:	b943      	cbnz	r3, 800c8b4 <__swsetup_r+0xa8>
 800c8a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8a6:	d1c4      	bne.n	800c832 <__swsetup_r+0x26>
 800c8a8:	bd38      	pop	{r3, r4, r5, pc}
 800c8aa:	0781      	lsls	r1, r0, #30
 800c8ac:	bf58      	it	pl
 800c8ae:	6963      	ldrpl	r3, [r4, #20]
 800c8b0:	60a3      	str	r3, [r4, #8]
 800c8b2:	e7f4      	b.n	800c89e <__swsetup_r+0x92>
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	e7f7      	b.n	800c8a8 <__swsetup_r+0x9c>
 800c8b8:	20000164 	.word	0x20000164

0800c8bc <memset>:
 800c8bc:	4402      	add	r2, r0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d100      	bne.n	800c8c6 <memset+0xa>
 800c8c4:	4770      	bx	lr
 800c8c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ca:	e7f9      	b.n	800c8c0 <memset+0x4>

0800c8cc <strncpy>:
 800c8cc:	b510      	push	{r4, lr}
 800c8ce:	3901      	subs	r1, #1
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	b132      	cbz	r2, 800c8e2 <strncpy+0x16>
 800c8d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c8d8:	f803 4b01 	strb.w	r4, [r3], #1
 800c8dc:	3a01      	subs	r2, #1
 800c8de:	2c00      	cmp	r4, #0
 800c8e0:	d1f7      	bne.n	800c8d2 <strncpy+0x6>
 800c8e2:	441a      	add	r2, r3
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d100      	bne.n	800c8ec <strncpy+0x20>
 800c8ea:	bd10      	pop	{r4, pc}
 800c8ec:	f803 1b01 	strb.w	r1, [r3], #1
 800c8f0:	e7f9      	b.n	800c8e6 <strncpy+0x1a>
	...

0800c8f4 <_localeconv_r>:
 800c8f4:	4800      	ldr	r0, [pc, #0]	; (800c8f8 <_localeconv_r+0x4>)
 800c8f6:	4770      	bx	lr
 800c8f8:	20000258 	.word	0x20000258

0800c8fc <_close_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4d06      	ldr	r5, [pc, #24]	; (800c918 <_close_r+0x1c>)
 800c900:	2300      	movs	r3, #0
 800c902:	4604      	mov	r4, r0
 800c904:	4608      	mov	r0, r1
 800c906:	602b      	str	r3, [r5, #0]
 800c908:	f7f5 faab 	bl	8001e62 <_close>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	d102      	bne.n	800c916 <_close_r+0x1a>
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	b103      	cbz	r3, 800c916 <_close_r+0x1a>
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	bd38      	pop	{r3, r4, r5, pc}
 800c918:	20001b60 	.word	0x20001b60

0800c91c <_lseek_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d07      	ldr	r5, [pc, #28]	; (800c93c <_lseek_r+0x20>)
 800c920:	4604      	mov	r4, r0
 800c922:	4608      	mov	r0, r1
 800c924:	4611      	mov	r1, r2
 800c926:	2200      	movs	r2, #0
 800c928:	602a      	str	r2, [r5, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	f7f5 fac0 	bl	8001eb0 <_lseek>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d102      	bne.n	800c93a <_lseek_r+0x1e>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	b103      	cbz	r3, 800c93a <_lseek_r+0x1e>
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	20001b60 	.word	0x20001b60

0800c940 <_read_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	; (800c960 <_read_r+0x20>)
 800c944:	4604      	mov	r4, r0
 800c946:	4608      	mov	r0, r1
 800c948:	4611      	mov	r1, r2
 800c94a:	2200      	movs	r2, #0
 800c94c:	602a      	str	r2, [r5, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	f7f5 fa6a 	bl	8001e28 <_read>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_read_r+0x1e>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_read_r+0x1e>
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	20001b60 	.word	0x20001b60

0800c964 <_write_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4d07      	ldr	r5, [pc, #28]	; (800c984 <_write_r+0x20>)
 800c968:	4604      	mov	r4, r0
 800c96a:	4608      	mov	r0, r1
 800c96c:	4611      	mov	r1, r2
 800c96e:	2200      	movs	r2, #0
 800c970:	602a      	str	r2, [r5, #0]
 800c972:	461a      	mov	r2, r3
 800c974:	f7f5 f8ad 	bl	8001ad2 <_write>
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	d102      	bne.n	800c982 <_write_r+0x1e>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	b103      	cbz	r3, 800c982 <_write_r+0x1e>
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	bd38      	pop	{r3, r4, r5, pc}
 800c984:	20001b60 	.word	0x20001b60

0800c988 <__errno>:
 800c988:	4b01      	ldr	r3, [pc, #4]	; (800c990 <__errno+0x8>)
 800c98a:	6818      	ldr	r0, [r3, #0]
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20000164 	.word	0x20000164

0800c994 <__libc_init_array>:
 800c994:	b570      	push	{r4, r5, r6, lr}
 800c996:	4d0d      	ldr	r5, [pc, #52]	; (800c9cc <__libc_init_array+0x38>)
 800c998:	4c0d      	ldr	r4, [pc, #52]	; (800c9d0 <__libc_init_array+0x3c>)
 800c99a:	1b64      	subs	r4, r4, r5
 800c99c:	10a4      	asrs	r4, r4, #2
 800c99e:	2600      	movs	r6, #0
 800c9a0:	42a6      	cmp	r6, r4
 800c9a2:	d109      	bne.n	800c9b8 <__libc_init_array+0x24>
 800c9a4:	4d0b      	ldr	r5, [pc, #44]	; (800c9d4 <__libc_init_array+0x40>)
 800c9a6:	4c0c      	ldr	r4, [pc, #48]	; (800c9d8 <__libc_init_array+0x44>)
 800c9a8:	f002 fc8e 	bl	800f2c8 <_init>
 800c9ac:	1b64      	subs	r4, r4, r5
 800c9ae:	10a4      	asrs	r4, r4, #2
 800c9b0:	2600      	movs	r6, #0
 800c9b2:	42a6      	cmp	r6, r4
 800c9b4:	d105      	bne.n	800c9c2 <__libc_init_array+0x2e>
 800c9b6:	bd70      	pop	{r4, r5, r6, pc}
 800c9b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9bc:	4798      	blx	r3
 800c9be:	3601      	adds	r6, #1
 800c9c0:	e7ee      	b.n	800c9a0 <__libc_init_array+0xc>
 800c9c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9c6:	4798      	blx	r3
 800c9c8:	3601      	adds	r6, #1
 800c9ca:	e7f2      	b.n	800c9b2 <__libc_init_array+0x1e>
 800c9cc:	0800f990 	.word	0x0800f990
 800c9d0:	0800f990 	.word	0x0800f990
 800c9d4:	0800f990 	.word	0x0800f990
 800c9d8:	0800f994 	.word	0x0800f994

0800c9dc <__retarget_lock_acquire_recursive>:
 800c9dc:	4770      	bx	lr

0800c9de <__retarget_lock_release_recursive>:
 800c9de:	4770      	bx	lr

0800c9e0 <memcpy>:
 800c9e0:	440a      	add	r2, r1
 800c9e2:	4291      	cmp	r1, r2
 800c9e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9e8:	d100      	bne.n	800c9ec <memcpy+0xc>
 800c9ea:	4770      	bx	lr
 800c9ec:	b510      	push	{r4, lr}
 800c9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9f6:	4291      	cmp	r1, r2
 800c9f8:	d1f9      	bne.n	800c9ee <memcpy+0xe>
 800c9fa:	bd10      	pop	{r4, pc}

0800c9fc <quorem>:
 800c9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	6903      	ldr	r3, [r0, #16]
 800ca02:	690c      	ldr	r4, [r1, #16]
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	4607      	mov	r7, r0
 800ca08:	db7e      	blt.n	800cb08 <quorem+0x10c>
 800ca0a:	3c01      	subs	r4, #1
 800ca0c:	f101 0814 	add.w	r8, r1, #20
 800ca10:	f100 0514 	add.w	r5, r0, #20
 800ca14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca18:	9301      	str	r3, [sp, #4]
 800ca1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca22:	3301      	adds	r3, #1
 800ca24:	429a      	cmp	r2, r3
 800ca26:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca2e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca32:	d331      	bcc.n	800ca98 <quorem+0x9c>
 800ca34:	f04f 0e00 	mov.w	lr, #0
 800ca38:	4640      	mov	r0, r8
 800ca3a:	46ac      	mov	ip, r5
 800ca3c:	46f2      	mov	sl, lr
 800ca3e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca42:	b293      	uxth	r3, r2
 800ca44:	fb06 e303 	mla	r3, r6, r3, lr
 800ca48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca4c:	0c1a      	lsrs	r2, r3, #16
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	ebaa 0303 	sub.w	r3, sl, r3
 800ca54:	f8dc a000 	ldr.w	sl, [ip]
 800ca58:	fa13 f38a 	uxtah	r3, r3, sl
 800ca5c:	fb06 220e 	mla	r2, r6, lr, r2
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	9b00      	ldr	r3, [sp, #0]
 800ca64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ca6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca72:	f8bd 3000 	ldrh.w	r3, [sp]
 800ca76:	4581      	cmp	r9, r0
 800ca78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca7c:	f84c 3b04 	str.w	r3, [ip], #4
 800ca80:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca84:	d2db      	bcs.n	800ca3e <quorem+0x42>
 800ca86:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca8a:	b92b      	cbnz	r3, 800ca98 <quorem+0x9c>
 800ca8c:	9b01      	ldr	r3, [sp, #4]
 800ca8e:	3b04      	subs	r3, #4
 800ca90:	429d      	cmp	r5, r3
 800ca92:	461a      	mov	r2, r3
 800ca94:	d32c      	bcc.n	800caf0 <quorem+0xf4>
 800ca96:	613c      	str	r4, [r7, #16]
 800ca98:	4638      	mov	r0, r7
 800ca9a:	f001 f9a7 	bl	800ddec <__mcmp>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	db22      	blt.n	800cae8 <quorem+0xec>
 800caa2:	3601      	adds	r6, #1
 800caa4:	4629      	mov	r1, r5
 800caa6:	2000      	movs	r0, #0
 800caa8:	f858 2b04 	ldr.w	r2, [r8], #4
 800caac:	f8d1 c000 	ldr.w	ip, [r1]
 800cab0:	b293      	uxth	r3, r2
 800cab2:	1ac3      	subs	r3, r0, r3
 800cab4:	0c12      	lsrs	r2, r2, #16
 800cab6:	fa13 f38c 	uxtah	r3, r3, ip
 800caba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cabe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cac8:	45c1      	cmp	r9, r8
 800caca:	f841 3b04 	str.w	r3, [r1], #4
 800cace:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cad2:	d2e9      	bcs.n	800caa8 <quorem+0xac>
 800cad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cadc:	b922      	cbnz	r2, 800cae8 <quorem+0xec>
 800cade:	3b04      	subs	r3, #4
 800cae0:	429d      	cmp	r5, r3
 800cae2:	461a      	mov	r2, r3
 800cae4:	d30a      	bcc.n	800cafc <quorem+0x100>
 800cae6:	613c      	str	r4, [r7, #16]
 800cae8:	4630      	mov	r0, r6
 800caea:	b003      	add	sp, #12
 800caec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf0:	6812      	ldr	r2, [r2, #0]
 800caf2:	3b04      	subs	r3, #4
 800caf4:	2a00      	cmp	r2, #0
 800caf6:	d1ce      	bne.n	800ca96 <quorem+0x9a>
 800caf8:	3c01      	subs	r4, #1
 800cafa:	e7c9      	b.n	800ca90 <quorem+0x94>
 800cafc:	6812      	ldr	r2, [r2, #0]
 800cafe:	3b04      	subs	r3, #4
 800cb00:	2a00      	cmp	r2, #0
 800cb02:	d1f0      	bne.n	800cae6 <quorem+0xea>
 800cb04:	3c01      	subs	r4, #1
 800cb06:	e7eb      	b.n	800cae0 <quorem+0xe4>
 800cb08:	2000      	movs	r0, #0
 800cb0a:	e7ee      	b.n	800caea <quorem+0xee>
 800cb0c:	0000      	movs	r0, r0
	...

0800cb10 <_dtoa_r>:
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	ed2d 8b04 	vpush	{d8-d9}
 800cb18:	69c5      	ldr	r5, [r0, #28]
 800cb1a:	b093      	sub	sp, #76	; 0x4c
 800cb1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cb20:	ec57 6b10 	vmov	r6, r7, d0
 800cb24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb28:	9107      	str	r1, [sp, #28]
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	920a      	str	r2, [sp, #40]	; 0x28
 800cb2e:	930d      	str	r3, [sp, #52]	; 0x34
 800cb30:	b975      	cbnz	r5, 800cb50 <_dtoa_r+0x40>
 800cb32:	2010      	movs	r0, #16
 800cb34:	f000 fe2a 	bl	800d78c <malloc>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	61e0      	str	r0, [r4, #28]
 800cb3c:	b920      	cbnz	r0, 800cb48 <_dtoa_r+0x38>
 800cb3e:	4bae      	ldr	r3, [pc, #696]	; (800cdf8 <_dtoa_r+0x2e8>)
 800cb40:	21ef      	movs	r1, #239	; 0xef
 800cb42:	48ae      	ldr	r0, [pc, #696]	; (800cdfc <_dtoa_r+0x2ec>)
 800cb44:	f002 f9de 	bl	800ef04 <__assert_func>
 800cb48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb4c:	6005      	str	r5, [r0, #0]
 800cb4e:	60c5      	str	r5, [r0, #12]
 800cb50:	69e3      	ldr	r3, [r4, #28]
 800cb52:	6819      	ldr	r1, [r3, #0]
 800cb54:	b151      	cbz	r1, 800cb6c <_dtoa_r+0x5c>
 800cb56:	685a      	ldr	r2, [r3, #4]
 800cb58:	604a      	str	r2, [r1, #4]
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4093      	lsls	r3, r2
 800cb5e:	608b      	str	r3, [r1, #8]
 800cb60:	4620      	mov	r0, r4
 800cb62:	f000 ff07 	bl	800d974 <_Bfree>
 800cb66:	69e3      	ldr	r3, [r4, #28]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]
 800cb6c:	1e3b      	subs	r3, r7, #0
 800cb6e:	bfbb      	ittet	lt
 800cb70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cb74:	9303      	strlt	r3, [sp, #12]
 800cb76:	2300      	movge	r3, #0
 800cb78:	2201      	movlt	r2, #1
 800cb7a:	bfac      	ite	ge
 800cb7c:	f8c8 3000 	strge.w	r3, [r8]
 800cb80:	f8c8 2000 	strlt.w	r2, [r8]
 800cb84:	4b9e      	ldr	r3, [pc, #632]	; (800ce00 <_dtoa_r+0x2f0>)
 800cb86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cb8a:	ea33 0308 	bics.w	r3, r3, r8
 800cb8e:	d11b      	bne.n	800cbc8 <_dtoa_r+0xb8>
 800cb90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb92:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cb9c:	4333      	orrs	r3, r6
 800cb9e:	f000 8593 	beq.w	800d6c8 <_dtoa_r+0xbb8>
 800cba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cba4:	b963      	cbnz	r3, 800cbc0 <_dtoa_r+0xb0>
 800cba6:	4b97      	ldr	r3, [pc, #604]	; (800ce04 <_dtoa_r+0x2f4>)
 800cba8:	e027      	b.n	800cbfa <_dtoa_r+0xea>
 800cbaa:	4b97      	ldr	r3, [pc, #604]	; (800ce08 <_dtoa_r+0x2f8>)
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	3308      	adds	r3, #8
 800cbb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	9800      	ldr	r0, [sp, #0]
 800cbb6:	b013      	add	sp, #76	; 0x4c
 800cbb8:	ecbd 8b04 	vpop	{d8-d9}
 800cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc0:	4b90      	ldr	r3, [pc, #576]	; (800ce04 <_dtoa_r+0x2f4>)
 800cbc2:	9300      	str	r3, [sp, #0]
 800cbc4:	3303      	adds	r3, #3
 800cbc6:	e7f3      	b.n	800cbb0 <_dtoa_r+0xa0>
 800cbc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	ec51 0b17 	vmov	r0, r1, d7
 800cbd2:	eeb0 8a47 	vmov.f32	s16, s14
 800cbd6:	eef0 8a67 	vmov.f32	s17, s15
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f7f3 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbe0:	4681      	mov	r9, r0
 800cbe2:	b160      	cbz	r0, 800cbfe <_dtoa_r+0xee>
 800cbe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 8568 	beq.w	800d6c2 <_dtoa_r+0xbb2>
 800cbf2:	4b86      	ldr	r3, [pc, #536]	; (800ce0c <_dtoa_r+0x2fc>)
 800cbf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cbf6:	6013      	str	r3, [r2, #0]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	9300      	str	r3, [sp, #0]
 800cbfc:	e7da      	b.n	800cbb4 <_dtoa_r+0xa4>
 800cbfe:	aa10      	add	r2, sp, #64	; 0x40
 800cc00:	a911      	add	r1, sp, #68	; 0x44
 800cc02:	4620      	mov	r0, r4
 800cc04:	eeb0 0a48 	vmov.f32	s0, s16
 800cc08:	eef0 0a68 	vmov.f32	s1, s17
 800cc0c:	f001 f994 	bl	800df38 <__d2b>
 800cc10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cc14:	4682      	mov	sl, r0
 800cc16:	2d00      	cmp	r5, #0
 800cc18:	d07f      	beq.n	800cd1a <_dtoa_r+0x20a>
 800cc1a:	ee18 3a90 	vmov	r3, s17
 800cc1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cc26:	ec51 0b18 	vmov	r0, r1, d8
 800cc2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cc36:	4619      	mov	r1, r3
 800cc38:	2200      	movs	r2, #0
 800cc3a:	4b75      	ldr	r3, [pc, #468]	; (800ce10 <_dtoa_r+0x300>)
 800cc3c:	f7f3 fb24 	bl	8000288 <__aeabi_dsub>
 800cc40:	a367      	add	r3, pc, #412	; (adr r3, 800cde0 <_dtoa_r+0x2d0>)
 800cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc46:	f7f3 fcd7 	bl	80005f8 <__aeabi_dmul>
 800cc4a:	a367      	add	r3, pc, #412	; (adr r3, 800cde8 <_dtoa_r+0x2d8>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	f7f3 fb1c 	bl	800028c <__adddf3>
 800cc54:	4606      	mov	r6, r0
 800cc56:	4628      	mov	r0, r5
 800cc58:	460f      	mov	r7, r1
 800cc5a:	f7f3 fc63 	bl	8000524 <__aeabi_i2d>
 800cc5e:	a364      	add	r3, pc, #400	; (adr r3, 800cdf0 <_dtoa_r+0x2e0>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	f7f3 fcc8 	bl	80005f8 <__aeabi_dmul>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	4639      	mov	r1, r7
 800cc70:	f7f3 fb0c 	bl	800028c <__adddf3>
 800cc74:	4606      	mov	r6, r0
 800cc76:	460f      	mov	r7, r1
 800cc78:	f7f3 ff6e 	bl	8000b58 <__aeabi_d2iz>
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	4683      	mov	fp, r0
 800cc80:	2300      	movs	r3, #0
 800cc82:	4630      	mov	r0, r6
 800cc84:	4639      	mov	r1, r7
 800cc86:	f7f3 ff29 	bl	8000adc <__aeabi_dcmplt>
 800cc8a:	b148      	cbz	r0, 800cca0 <_dtoa_r+0x190>
 800cc8c:	4658      	mov	r0, fp
 800cc8e:	f7f3 fc49 	bl	8000524 <__aeabi_i2d>
 800cc92:	4632      	mov	r2, r6
 800cc94:	463b      	mov	r3, r7
 800cc96:	f7f3 ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc9a:	b908      	cbnz	r0, 800cca0 <_dtoa_r+0x190>
 800cc9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cca0:	f1bb 0f16 	cmp.w	fp, #22
 800cca4:	d857      	bhi.n	800cd56 <_dtoa_r+0x246>
 800cca6:	4b5b      	ldr	r3, [pc, #364]	; (800ce14 <_dtoa_r+0x304>)
 800cca8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	ec51 0b18 	vmov	r0, r1, d8
 800ccb4:	f7f3 ff12 	bl	8000adc <__aeabi_dcmplt>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d04e      	beq.n	800cd5a <_dtoa_r+0x24a>
 800ccbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	930c      	str	r3, [sp, #48]	; 0x30
 800ccc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccc6:	1b5b      	subs	r3, r3, r5
 800ccc8:	1e5a      	subs	r2, r3, #1
 800ccca:	bf45      	ittet	mi
 800cccc:	f1c3 0301 	rsbmi	r3, r3, #1
 800ccd0:	9305      	strmi	r3, [sp, #20]
 800ccd2:	2300      	movpl	r3, #0
 800ccd4:	2300      	movmi	r3, #0
 800ccd6:	9206      	str	r2, [sp, #24]
 800ccd8:	bf54      	ite	pl
 800ccda:	9305      	strpl	r3, [sp, #20]
 800ccdc:	9306      	strmi	r3, [sp, #24]
 800ccde:	f1bb 0f00 	cmp.w	fp, #0
 800cce2:	db3c      	blt.n	800cd5e <_dtoa_r+0x24e>
 800cce4:	9b06      	ldr	r3, [sp, #24]
 800cce6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ccea:	445b      	add	r3, fp
 800ccec:	9306      	str	r3, [sp, #24]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	9308      	str	r3, [sp, #32]
 800ccf2:	9b07      	ldr	r3, [sp, #28]
 800ccf4:	2b09      	cmp	r3, #9
 800ccf6:	d868      	bhi.n	800cdca <_dtoa_r+0x2ba>
 800ccf8:	2b05      	cmp	r3, #5
 800ccfa:	bfc4      	itt	gt
 800ccfc:	3b04      	subgt	r3, #4
 800ccfe:	9307      	strgt	r3, [sp, #28]
 800cd00:	9b07      	ldr	r3, [sp, #28]
 800cd02:	f1a3 0302 	sub.w	r3, r3, #2
 800cd06:	bfcc      	ite	gt
 800cd08:	2500      	movgt	r5, #0
 800cd0a:	2501      	movle	r5, #1
 800cd0c:	2b03      	cmp	r3, #3
 800cd0e:	f200 8085 	bhi.w	800ce1c <_dtoa_r+0x30c>
 800cd12:	e8df f003 	tbb	[pc, r3]
 800cd16:	3b2e      	.short	0x3b2e
 800cd18:	5839      	.short	0x5839
 800cd1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cd1e:	441d      	add	r5, r3
 800cd20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cd24:	2b20      	cmp	r3, #32
 800cd26:	bfc1      	itttt	gt
 800cd28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cd2c:	fa08 f803 	lslgt.w	r8, r8, r3
 800cd30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cd34:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cd38:	bfd6      	itet	le
 800cd3a:	f1c3 0320 	rsble	r3, r3, #32
 800cd3e:	ea48 0003 	orrgt.w	r0, r8, r3
 800cd42:	fa06 f003 	lslle.w	r0, r6, r3
 800cd46:	f7f3 fbdd 	bl	8000504 <__aeabi_ui2d>
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cd50:	3d01      	subs	r5, #1
 800cd52:	920e      	str	r2, [sp, #56]	; 0x38
 800cd54:	e76f      	b.n	800cc36 <_dtoa_r+0x126>
 800cd56:	2301      	movs	r3, #1
 800cd58:	e7b3      	b.n	800ccc2 <_dtoa_r+0x1b2>
 800cd5a:	900c      	str	r0, [sp, #48]	; 0x30
 800cd5c:	e7b2      	b.n	800ccc4 <_dtoa_r+0x1b4>
 800cd5e:	9b05      	ldr	r3, [sp, #20]
 800cd60:	eba3 030b 	sub.w	r3, r3, fp
 800cd64:	9305      	str	r3, [sp, #20]
 800cd66:	f1cb 0300 	rsb	r3, fp, #0
 800cd6a:	9308      	str	r3, [sp, #32]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd70:	e7bf      	b.n	800ccf2 <_dtoa_r+0x1e2>
 800cd72:	2300      	movs	r3, #0
 800cd74:	9309      	str	r3, [sp, #36]	; 0x24
 800cd76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	dc52      	bgt.n	800ce22 <_dtoa_r+0x312>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	9304      	str	r3, [sp, #16]
 800cd82:	461a      	mov	r2, r3
 800cd84:	920a      	str	r2, [sp, #40]	; 0x28
 800cd86:	e00b      	b.n	800cda0 <_dtoa_r+0x290>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e7f3      	b.n	800cd74 <_dtoa_r+0x264>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd92:	445b      	add	r3, fp
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	3301      	adds	r3, #1
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	9304      	str	r3, [sp, #16]
 800cd9c:	bfb8      	it	lt
 800cd9e:	2301      	movlt	r3, #1
 800cda0:	69e0      	ldr	r0, [r4, #28]
 800cda2:	2100      	movs	r1, #0
 800cda4:	2204      	movs	r2, #4
 800cda6:	f102 0614 	add.w	r6, r2, #20
 800cdaa:	429e      	cmp	r6, r3
 800cdac:	d93d      	bls.n	800ce2a <_dtoa_r+0x31a>
 800cdae:	6041      	str	r1, [r0, #4]
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f000 fd9f 	bl	800d8f4 <_Balloc>
 800cdb6:	9000      	str	r0, [sp, #0]
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d139      	bne.n	800ce30 <_dtoa_r+0x320>
 800cdbc:	4b16      	ldr	r3, [pc, #88]	; (800ce18 <_dtoa_r+0x308>)
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	f240 11af 	movw	r1, #431	; 0x1af
 800cdc4:	e6bd      	b.n	800cb42 <_dtoa_r+0x32>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e7e1      	b.n	800cd8e <_dtoa_r+0x27e>
 800cdca:	2501      	movs	r5, #1
 800cdcc:	2300      	movs	r3, #0
 800cdce:	9307      	str	r3, [sp, #28]
 800cdd0:	9509      	str	r5, [sp, #36]	; 0x24
 800cdd2:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	9304      	str	r3, [sp, #16]
 800cdda:	2200      	movs	r2, #0
 800cddc:	2312      	movs	r3, #18
 800cdde:	e7d1      	b.n	800cd84 <_dtoa_r+0x274>
 800cde0:	636f4361 	.word	0x636f4361
 800cde4:	3fd287a7 	.word	0x3fd287a7
 800cde8:	8b60c8b3 	.word	0x8b60c8b3
 800cdec:	3fc68a28 	.word	0x3fc68a28
 800cdf0:	509f79fb 	.word	0x509f79fb
 800cdf4:	3fd34413 	.word	0x3fd34413
 800cdf8:	0800f647 	.word	0x0800f647
 800cdfc:	0800f65e 	.word	0x0800f65e
 800ce00:	7ff00000 	.word	0x7ff00000
 800ce04:	0800f643 	.word	0x0800f643
 800ce08:	0800f63a 	.word	0x0800f63a
 800ce0c:	0800f844 	.word	0x0800f844
 800ce10:	3ff80000 	.word	0x3ff80000
 800ce14:	0800f748 	.word	0x0800f748
 800ce18:	0800f6b6 	.word	0x0800f6b6
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce20:	e7d7      	b.n	800cdd2 <_dtoa_r+0x2c2>
 800ce22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	9304      	str	r3, [sp, #16]
 800ce28:	e7ba      	b.n	800cda0 <_dtoa_r+0x290>
 800ce2a:	3101      	adds	r1, #1
 800ce2c:	0052      	lsls	r2, r2, #1
 800ce2e:	e7ba      	b.n	800cda6 <_dtoa_r+0x296>
 800ce30:	69e3      	ldr	r3, [r4, #28]
 800ce32:	9a00      	ldr	r2, [sp, #0]
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	9b04      	ldr	r3, [sp, #16]
 800ce38:	2b0e      	cmp	r3, #14
 800ce3a:	f200 80a8 	bhi.w	800cf8e <_dtoa_r+0x47e>
 800ce3e:	2d00      	cmp	r5, #0
 800ce40:	f000 80a5 	beq.w	800cf8e <_dtoa_r+0x47e>
 800ce44:	f1bb 0f00 	cmp.w	fp, #0
 800ce48:	dd38      	ble.n	800cebc <_dtoa_r+0x3ac>
 800ce4a:	4bc0      	ldr	r3, [pc, #768]	; (800d14c <_dtoa_r+0x63c>)
 800ce4c:	f00b 020f 	and.w	r2, fp, #15
 800ce50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ce58:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ce5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ce60:	d019      	beq.n	800ce96 <_dtoa_r+0x386>
 800ce62:	4bbb      	ldr	r3, [pc, #748]	; (800d150 <_dtoa_r+0x640>)
 800ce64:	ec51 0b18 	vmov	r0, r1, d8
 800ce68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce6c:	f7f3 fcee 	bl	800084c <__aeabi_ddiv>
 800ce70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce74:	f008 080f 	and.w	r8, r8, #15
 800ce78:	2503      	movs	r5, #3
 800ce7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d150 <_dtoa_r+0x640>
 800ce7e:	f1b8 0f00 	cmp.w	r8, #0
 800ce82:	d10a      	bne.n	800ce9a <_dtoa_r+0x38a>
 800ce84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce88:	4632      	mov	r2, r6
 800ce8a:	463b      	mov	r3, r7
 800ce8c:	f7f3 fcde 	bl	800084c <__aeabi_ddiv>
 800ce90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce94:	e02b      	b.n	800ceee <_dtoa_r+0x3de>
 800ce96:	2502      	movs	r5, #2
 800ce98:	e7ef      	b.n	800ce7a <_dtoa_r+0x36a>
 800ce9a:	f018 0f01 	tst.w	r8, #1
 800ce9e:	d008      	beq.n	800ceb2 <_dtoa_r+0x3a2>
 800cea0:	4630      	mov	r0, r6
 800cea2:	4639      	mov	r1, r7
 800cea4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cea8:	f7f3 fba6 	bl	80005f8 <__aeabi_dmul>
 800ceac:	3501      	adds	r5, #1
 800ceae:	4606      	mov	r6, r0
 800ceb0:	460f      	mov	r7, r1
 800ceb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ceb6:	f109 0908 	add.w	r9, r9, #8
 800ceba:	e7e0      	b.n	800ce7e <_dtoa_r+0x36e>
 800cebc:	f000 809f 	beq.w	800cffe <_dtoa_r+0x4ee>
 800cec0:	f1cb 0600 	rsb	r6, fp, #0
 800cec4:	4ba1      	ldr	r3, [pc, #644]	; (800d14c <_dtoa_r+0x63c>)
 800cec6:	4fa2      	ldr	r7, [pc, #648]	; (800d150 <_dtoa_r+0x640>)
 800cec8:	f006 020f 	and.w	r2, r6, #15
 800cecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ced0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced4:	ec51 0b18 	vmov	r0, r1, d8
 800ced8:	f7f3 fb8e 	bl	80005f8 <__aeabi_dmul>
 800cedc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cee0:	1136      	asrs	r6, r6, #4
 800cee2:	2300      	movs	r3, #0
 800cee4:	2502      	movs	r5, #2
 800cee6:	2e00      	cmp	r6, #0
 800cee8:	d17e      	bne.n	800cfe8 <_dtoa_r+0x4d8>
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1d0      	bne.n	800ce90 <_dtoa_r+0x380>
 800ceee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cef0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 8084 	beq.w	800d002 <_dtoa_r+0x4f2>
 800cefa:	4b96      	ldr	r3, [pc, #600]	; (800d154 <_dtoa_r+0x644>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	4640      	mov	r0, r8
 800cf00:	4649      	mov	r1, r9
 800cf02:	f7f3 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d07b      	beq.n	800d002 <_dtoa_r+0x4f2>
 800cf0a:	9b04      	ldr	r3, [sp, #16]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d078      	beq.n	800d002 <_dtoa_r+0x4f2>
 800cf10:	9b01      	ldr	r3, [sp, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dd39      	ble.n	800cf8a <_dtoa_r+0x47a>
 800cf16:	4b90      	ldr	r3, [pc, #576]	; (800d158 <_dtoa_r+0x648>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	4640      	mov	r0, r8
 800cf1c:	4649      	mov	r1, r9
 800cf1e:	f7f3 fb6b 	bl	80005f8 <__aeabi_dmul>
 800cf22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf26:	9e01      	ldr	r6, [sp, #4]
 800cf28:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cf2c:	3501      	adds	r5, #1
 800cf2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cf32:	4628      	mov	r0, r5
 800cf34:	f7f3 faf6 	bl	8000524 <__aeabi_i2d>
 800cf38:	4642      	mov	r2, r8
 800cf3a:	464b      	mov	r3, r9
 800cf3c:	f7f3 fb5c 	bl	80005f8 <__aeabi_dmul>
 800cf40:	4b86      	ldr	r3, [pc, #536]	; (800d15c <_dtoa_r+0x64c>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	f7f3 f9a2 	bl	800028c <__adddf3>
 800cf48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cf4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf50:	9303      	str	r3, [sp, #12]
 800cf52:	2e00      	cmp	r6, #0
 800cf54:	d158      	bne.n	800d008 <_dtoa_r+0x4f8>
 800cf56:	4b82      	ldr	r3, [pc, #520]	; (800d160 <_dtoa_r+0x650>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	4649      	mov	r1, r9
 800cf5e:	f7f3 f993 	bl	8000288 <__aeabi_dsub>
 800cf62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf66:	4680      	mov	r8, r0
 800cf68:	4689      	mov	r9, r1
 800cf6a:	f7f3 fdd5 	bl	8000b18 <__aeabi_dcmpgt>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f040 8296 	bne.w	800d4a0 <_dtoa_r+0x990>
 800cf74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cf78:	4640      	mov	r0, r8
 800cf7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf7e:	4649      	mov	r1, r9
 800cf80:	f7f3 fdac 	bl	8000adc <__aeabi_dcmplt>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	f040 8289 	bne.w	800d49c <_dtoa_r+0x98c>
 800cf8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cf8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f2c0 814e 	blt.w	800d232 <_dtoa_r+0x722>
 800cf96:	f1bb 0f0e 	cmp.w	fp, #14
 800cf9a:	f300 814a 	bgt.w	800d232 <_dtoa_r+0x722>
 800cf9e:	4b6b      	ldr	r3, [pc, #428]	; (800d14c <_dtoa_r+0x63c>)
 800cfa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cfa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f280 80dc 	bge.w	800d168 <_dtoa_r+0x658>
 800cfb0:	9b04      	ldr	r3, [sp, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f300 80d8 	bgt.w	800d168 <_dtoa_r+0x658>
 800cfb8:	f040 826f 	bne.w	800d49a <_dtoa_r+0x98a>
 800cfbc:	4b68      	ldr	r3, [pc, #416]	; (800d160 <_dtoa_r+0x650>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	4640      	mov	r0, r8
 800cfc2:	4649      	mov	r1, r9
 800cfc4:	f7f3 fb18 	bl	80005f8 <__aeabi_dmul>
 800cfc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfcc:	f7f3 fd9a 	bl	8000b04 <__aeabi_dcmpge>
 800cfd0:	9e04      	ldr	r6, [sp, #16]
 800cfd2:	4637      	mov	r7, r6
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	f040 8245 	bne.w	800d464 <_dtoa_r+0x954>
 800cfda:	9d00      	ldr	r5, [sp, #0]
 800cfdc:	2331      	movs	r3, #49	; 0x31
 800cfde:	f805 3b01 	strb.w	r3, [r5], #1
 800cfe2:	f10b 0b01 	add.w	fp, fp, #1
 800cfe6:	e241      	b.n	800d46c <_dtoa_r+0x95c>
 800cfe8:	07f2      	lsls	r2, r6, #31
 800cfea:	d505      	bpl.n	800cff8 <_dtoa_r+0x4e8>
 800cfec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cff0:	f7f3 fb02 	bl	80005f8 <__aeabi_dmul>
 800cff4:	3501      	adds	r5, #1
 800cff6:	2301      	movs	r3, #1
 800cff8:	1076      	asrs	r6, r6, #1
 800cffa:	3708      	adds	r7, #8
 800cffc:	e773      	b.n	800cee6 <_dtoa_r+0x3d6>
 800cffe:	2502      	movs	r5, #2
 800d000:	e775      	b.n	800ceee <_dtoa_r+0x3de>
 800d002:	9e04      	ldr	r6, [sp, #16]
 800d004:	465f      	mov	r7, fp
 800d006:	e792      	b.n	800cf2e <_dtoa_r+0x41e>
 800d008:	9900      	ldr	r1, [sp, #0]
 800d00a:	4b50      	ldr	r3, [pc, #320]	; (800d14c <_dtoa_r+0x63c>)
 800d00c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d010:	4431      	add	r1, r6
 800d012:	9102      	str	r1, [sp, #8]
 800d014:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d016:	eeb0 9a47 	vmov.f32	s18, s14
 800d01a:	eef0 9a67 	vmov.f32	s19, s15
 800d01e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d026:	2900      	cmp	r1, #0
 800d028:	d044      	beq.n	800d0b4 <_dtoa_r+0x5a4>
 800d02a:	494e      	ldr	r1, [pc, #312]	; (800d164 <_dtoa_r+0x654>)
 800d02c:	2000      	movs	r0, #0
 800d02e:	f7f3 fc0d 	bl	800084c <__aeabi_ddiv>
 800d032:	ec53 2b19 	vmov	r2, r3, d9
 800d036:	f7f3 f927 	bl	8000288 <__aeabi_dsub>
 800d03a:	9d00      	ldr	r5, [sp, #0]
 800d03c:	ec41 0b19 	vmov	d9, r0, r1
 800d040:	4649      	mov	r1, r9
 800d042:	4640      	mov	r0, r8
 800d044:	f7f3 fd88 	bl	8000b58 <__aeabi_d2iz>
 800d048:	4606      	mov	r6, r0
 800d04a:	f7f3 fa6b 	bl	8000524 <__aeabi_i2d>
 800d04e:	4602      	mov	r2, r0
 800d050:	460b      	mov	r3, r1
 800d052:	4640      	mov	r0, r8
 800d054:	4649      	mov	r1, r9
 800d056:	f7f3 f917 	bl	8000288 <__aeabi_dsub>
 800d05a:	3630      	adds	r6, #48	; 0x30
 800d05c:	f805 6b01 	strb.w	r6, [r5], #1
 800d060:	ec53 2b19 	vmov	r2, r3, d9
 800d064:	4680      	mov	r8, r0
 800d066:	4689      	mov	r9, r1
 800d068:	f7f3 fd38 	bl	8000adc <__aeabi_dcmplt>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d164      	bne.n	800d13a <_dtoa_r+0x62a>
 800d070:	4642      	mov	r2, r8
 800d072:	464b      	mov	r3, r9
 800d074:	4937      	ldr	r1, [pc, #220]	; (800d154 <_dtoa_r+0x644>)
 800d076:	2000      	movs	r0, #0
 800d078:	f7f3 f906 	bl	8000288 <__aeabi_dsub>
 800d07c:	ec53 2b19 	vmov	r2, r3, d9
 800d080:	f7f3 fd2c 	bl	8000adc <__aeabi_dcmplt>
 800d084:	2800      	cmp	r0, #0
 800d086:	f040 80b6 	bne.w	800d1f6 <_dtoa_r+0x6e6>
 800d08a:	9b02      	ldr	r3, [sp, #8]
 800d08c:	429d      	cmp	r5, r3
 800d08e:	f43f af7c 	beq.w	800cf8a <_dtoa_r+0x47a>
 800d092:	4b31      	ldr	r3, [pc, #196]	; (800d158 <_dtoa_r+0x648>)
 800d094:	ec51 0b19 	vmov	r0, r1, d9
 800d098:	2200      	movs	r2, #0
 800d09a:	f7f3 faad 	bl	80005f8 <__aeabi_dmul>
 800d09e:	4b2e      	ldr	r3, [pc, #184]	; (800d158 <_dtoa_r+0x648>)
 800d0a0:	ec41 0b19 	vmov	d9, r0, r1
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	4640      	mov	r0, r8
 800d0a8:	4649      	mov	r1, r9
 800d0aa:	f7f3 faa5 	bl	80005f8 <__aeabi_dmul>
 800d0ae:	4680      	mov	r8, r0
 800d0b0:	4689      	mov	r9, r1
 800d0b2:	e7c5      	b.n	800d040 <_dtoa_r+0x530>
 800d0b4:	ec51 0b17 	vmov	r0, r1, d7
 800d0b8:	f7f3 fa9e 	bl	80005f8 <__aeabi_dmul>
 800d0bc:	9b02      	ldr	r3, [sp, #8]
 800d0be:	9d00      	ldr	r5, [sp, #0]
 800d0c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0c2:	ec41 0b19 	vmov	d9, r0, r1
 800d0c6:	4649      	mov	r1, r9
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	f7f3 fd45 	bl	8000b58 <__aeabi_d2iz>
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	f7f3 fa28 	bl	8000524 <__aeabi_i2d>
 800d0d4:	3630      	adds	r6, #48	; 0x30
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	460b      	mov	r3, r1
 800d0da:	4640      	mov	r0, r8
 800d0dc:	4649      	mov	r1, r9
 800d0de:	f7f3 f8d3 	bl	8000288 <__aeabi_dsub>
 800d0e2:	f805 6b01 	strb.w	r6, [r5], #1
 800d0e6:	9b02      	ldr	r3, [sp, #8]
 800d0e8:	429d      	cmp	r5, r3
 800d0ea:	4680      	mov	r8, r0
 800d0ec:	4689      	mov	r9, r1
 800d0ee:	f04f 0200 	mov.w	r2, #0
 800d0f2:	d124      	bne.n	800d13e <_dtoa_r+0x62e>
 800d0f4:	4b1b      	ldr	r3, [pc, #108]	; (800d164 <_dtoa_r+0x654>)
 800d0f6:	ec51 0b19 	vmov	r0, r1, d9
 800d0fa:	f7f3 f8c7 	bl	800028c <__adddf3>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	4640      	mov	r0, r8
 800d104:	4649      	mov	r1, r9
 800d106:	f7f3 fd07 	bl	8000b18 <__aeabi_dcmpgt>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d173      	bne.n	800d1f6 <_dtoa_r+0x6e6>
 800d10e:	ec53 2b19 	vmov	r2, r3, d9
 800d112:	4914      	ldr	r1, [pc, #80]	; (800d164 <_dtoa_r+0x654>)
 800d114:	2000      	movs	r0, #0
 800d116:	f7f3 f8b7 	bl	8000288 <__aeabi_dsub>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	4640      	mov	r0, r8
 800d120:	4649      	mov	r1, r9
 800d122:	f7f3 fcdb 	bl	8000adc <__aeabi_dcmplt>
 800d126:	2800      	cmp	r0, #0
 800d128:	f43f af2f 	beq.w	800cf8a <_dtoa_r+0x47a>
 800d12c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d12e:	1e6b      	subs	r3, r5, #1
 800d130:	930f      	str	r3, [sp, #60]	; 0x3c
 800d132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d136:	2b30      	cmp	r3, #48	; 0x30
 800d138:	d0f8      	beq.n	800d12c <_dtoa_r+0x61c>
 800d13a:	46bb      	mov	fp, r7
 800d13c:	e04a      	b.n	800d1d4 <_dtoa_r+0x6c4>
 800d13e:	4b06      	ldr	r3, [pc, #24]	; (800d158 <_dtoa_r+0x648>)
 800d140:	f7f3 fa5a 	bl	80005f8 <__aeabi_dmul>
 800d144:	4680      	mov	r8, r0
 800d146:	4689      	mov	r9, r1
 800d148:	e7bd      	b.n	800d0c6 <_dtoa_r+0x5b6>
 800d14a:	bf00      	nop
 800d14c:	0800f748 	.word	0x0800f748
 800d150:	0800f720 	.word	0x0800f720
 800d154:	3ff00000 	.word	0x3ff00000
 800d158:	40240000 	.word	0x40240000
 800d15c:	401c0000 	.word	0x401c0000
 800d160:	40140000 	.word	0x40140000
 800d164:	3fe00000 	.word	0x3fe00000
 800d168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d16c:	9d00      	ldr	r5, [sp, #0]
 800d16e:	4642      	mov	r2, r8
 800d170:	464b      	mov	r3, r9
 800d172:	4630      	mov	r0, r6
 800d174:	4639      	mov	r1, r7
 800d176:	f7f3 fb69 	bl	800084c <__aeabi_ddiv>
 800d17a:	f7f3 fced 	bl	8000b58 <__aeabi_d2iz>
 800d17e:	9001      	str	r0, [sp, #4]
 800d180:	f7f3 f9d0 	bl	8000524 <__aeabi_i2d>
 800d184:	4642      	mov	r2, r8
 800d186:	464b      	mov	r3, r9
 800d188:	f7f3 fa36 	bl	80005f8 <__aeabi_dmul>
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	4630      	mov	r0, r6
 800d192:	4639      	mov	r1, r7
 800d194:	f7f3 f878 	bl	8000288 <__aeabi_dsub>
 800d198:	9e01      	ldr	r6, [sp, #4]
 800d19a:	9f04      	ldr	r7, [sp, #16]
 800d19c:	3630      	adds	r6, #48	; 0x30
 800d19e:	f805 6b01 	strb.w	r6, [r5], #1
 800d1a2:	9e00      	ldr	r6, [sp, #0]
 800d1a4:	1bae      	subs	r6, r5, r6
 800d1a6:	42b7      	cmp	r7, r6
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	d134      	bne.n	800d218 <_dtoa_r+0x708>
 800d1ae:	f7f3 f86d 	bl	800028c <__adddf3>
 800d1b2:	4642      	mov	r2, r8
 800d1b4:	464b      	mov	r3, r9
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	460f      	mov	r7, r1
 800d1ba:	f7f3 fcad 	bl	8000b18 <__aeabi_dcmpgt>
 800d1be:	b9c8      	cbnz	r0, 800d1f4 <_dtoa_r+0x6e4>
 800d1c0:	4642      	mov	r2, r8
 800d1c2:	464b      	mov	r3, r9
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	f7f3 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1cc:	b110      	cbz	r0, 800d1d4 <_dtoa_r+0x6c4>
 800d1ce:	9b01      	ldr	r3, [sp, #4]
 800d1d0:	07db      	lsls	r3, r3, #31
 800d1d2:	d40f      	bmi.n	800d1f4 <_dtoa_r+0x6e4>
 800d1d4:	4651      	mov	r1, sl
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f000 fbcc 	bl	800d974 <_Bfree>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1e0:	702b      	strb	r3, [r5, #0]
 800d1e2:	f10b 0301 	add.w	r3, fp, #1
 800d1e6:	6013      	str	r3, [r2, #0]
 800d1e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f43f ace2 	beq.w	800cbb4 <_dtoa_r+0xa4>
 800d1f0:	601d      	str	r5, [r3, #0]
 800d1f2:	e4df      	b.n	800cbb4 <_dtoa_r+0xa4>
 800d1f4:	465f      	mov	r7, fp
 800d1f6:	462b      	mov	r3, r5
 800d1f8:	461d      	mov	r5, r3
 800d1fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1fe:	2a39      	cmp	r2, #57	; 0x39
 800d200:	d106      	bne.n	800d210 <_dtoa_r+0x700>
 800d202:	9a00      	ldr	r2, [sp, #0]
 800d204:	429a      	cmp	r2, r3
 800d206:	d1f7      	bne.n	800d1f8 <_dtoa_r+0x6e8>
 800d208:	9900      	ldr	r1, [sp, #0]
 800d20a:	2230      	movs	r2, #48	; 0x30
 800d20c:	3701      	adds	r7, #1
 800d20e:	700a      	strb	r2, [r1, #0]
 800d210:	781a      	ldrb	r2, [r3, #0]
 800d212:	3201      	adds	r2, #1
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	e790      	b.n	800d13a <_dtoa_r+0x62a>
 800d218:	4ba3      	ldr	r3, [pc, #652]	; (800d4a8 <_dtoa_r+0x998>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	f7f3 f9ec 	bl	80005f8 <__aeabi_dmul>
 800d220:	2200      	movs	r2, #0
 800d222:	2300      	movs	r3, #0
 800d224:	4606      	mov	r6, r0
 800d226:	460f      	mov	r7, r1
 800d228:	f7f3 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d09e      	beq.n	800d16e <_dtoa_r+0x65e>
 800d230:	e7d0      	b.n	800d1d4 <_dtoa_r+0x6c4>
 800d232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d234:	2a00      	cmp	r2, #0
 800d236:	f000 80ca 	beq.w	800d3ce <_dtoa_r+0x8be>
 800d23a:	9a07      	ldr	r2, [sp, #28]
 800d23c:	2a01      	cmp	r2, #1
 800d23e:	f300 80ad 	bgt.w	800d39c <_dtoa_r+0x88c>
 800d242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d244:	2a00      	cmp	r2, #0
 800d246:	f000 80a5 	beq.w	800d394 <_dtoa_r+0x884>
 800d24a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d24e:	9e08      	ldr	r6, [sp, #32]
 800d250:	9d05      	ldr	r5, [sp, #20]
 800d252:	9a05      	ldr	r2, [sp, #20]
 800d254:	441a      	add	r2, r3
 800d256:	9205      	str	r2, [sp, #20]
 800d258:	9a06      	ldr	r2, [sp, #24]
 800d25a:	2101      	movs	r1, #1
 800d25c:	441a      	add	r2, r3
 800d25e:	4620      	mov	r0, r4
 800d260:	9206      	str	r2, [sp, #24]
 800d262:	f000 fc3d 	bl	800dae0 <__i2b>
 800d266:	4607      	mov	r7, r0
 800d268:	b165      	cbz	r5, 800d284 <_dtoa_r+0x774>
 800d26a:	9b06      	ldr	r3, [sp, #24]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	dd09      	ble.n	800d284 <_dtoa_r+0x774>
 800d270:	42ab      	cmp	r3, r5
 800d272:	9a05      	ldr	r2, [sp, #20]
 800d274:	bfa8      	it	ge
 800d276:	462b      	movge	r3, r5
 800d278:	1ad2      	subs	r2, r2, r3
 800d27a:	9205      	str	r2, [sp, #20]
 800d27c:	9a06      	ldr	r2, [sp, #24]
 800d27e:	1aed      	subs	r5, r5, r3
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	9306      	str	r3, [sp, #24]
 800d284:	9b08      	ldr	r3, [sp, #32]
 800d286:	b1f3      	cbz	r3, 800d2c6 <_dtoa_r+0x7b6>
 800d288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f000 80a3 	beq.w	800d3d6 <_dtoa_r+0x8c6>
 800d290:	2e00      	cmp	r6, #0
 800d292:	dd10      	ble.n	800d2b6 <_dtoa_r+0x7a6>
 800d294:	4639      	mov	r1, r7
 800d296:	4632      	mov	r2, r6
 800d298:	4620      	mov	r0, r4
 800d29a:	f000 fce1 	bl	800dc60 <__pow5mult>
 800d29e:	4652      	mov	r2, sl
 800d2a0:	4601      	mov	r1, r0
 800d2a2:	4607      	mov	r7, r0
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f000 fc31 	bl	800db0c <__multiply>
 800d2aa:	4651      	mov	r1, sl
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 fb60 	bl	800d974 <_Bfree>
 800d2b4:	46c2      	mov	sl, r8
 800d2b6:	9b08      	ldr	r3, [sp, #32]
 800d2b8:	1b9a      	subs	r2, r3, r6
 800d2ba:	d004      	beq.n	800d2c6 <_dtoa_r+0x7b6>
 800d2bc:	4651      	mov	r1, sl
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 fcce 	bl	800dc60 <__pow5mult>
 800d2c4:	4682      	mov	sl, r0
 800d2c6:	2101      	movs	r1, #1
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 fc09 	bl	800dae0 <__i2b>
 800d2ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	f340 8081 	ble.w	800d3da <_dtoa_r+0x8ca>
 800d2d8:	461a      	mov	r2, r3
 800d2da:	4601      	mov	r1, r0
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f000 fcbf 	bl	800dc60 <__pow5mult>
 800d2e2:	9b07      	ldr	r3, [sp, #28]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	dd7a      	ble.n	800d3e0 <_dtoa_r+0x8d0>
 800d2ea:	f04f 0800 	mov.w	r8, #0
 800d2ee:	6933      	ldr	r3, [r6, #16]
 800d2f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d2f4:	6918      	ldr	r0, [r3, #16]
 800d2f6:	f000 fba5 	bl	800da44 <__hi0bits>
 800d2fa:	f1c0 0020 	rsb	r0, r0, #32
 800d2fe:	9b06      	ldr	r3, [sp, #24]
 800d300:	4418      	add	r0, r3
 800d302:	f010 001f 	ands.w	r0, r0, #31
 800d306:	f000 8094 	beq.w	800d432 <_dtoa_r+0x922>
 800d30a:	f1c0 0320 	rsb	r3, r0, #32
 800d30e:	2b04      	cmp	r3, #4
 800d310:	f340 8085 	ble.w	800d41e <_dtoa_r+0x90e>
 800d314:	9b05      	ldr	r3, [sp, #20]
 800d316:	f1c0 001c 	rsb	r0, r0, #28
 800d31a:	4403      	add	r3, r0
 800d31c:	9305      	str	r3, [sp, #20]
 800d31e:	9b06      	ldr	r3, [sp, #24]
 800d320:	4403      	add	r3, r0
 800d322:	4405      	add	r5, r0
 800d324:	9306      	str	r3, [sp, #24]
 800d326:	9b05      	ldr	r3, [sp, #20]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	dd05      	ble.n	800d338 <_dtoa_r+0x828>
 800d32c:	4651      	mov	r1, sl
 800d32e:	461a      	mov	r2, r3
 800d330:	4620      	mov	r0, r4
 800d332:	f000 fcef 	bl	800dd14 <__lshift>
 800d336:	4682      	mov	sl, r0
 800d338:	9b06      	ldr	r3, [sp, #24]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	dd05      	ble.n	800d34a <_dtoa_r+0x83a>
 800d33e:	4631      	mov	r1, r6
 800d340:	461a      	mov	r2, r3
 800d342:	4620      	mov	r0, r4
 800d344:	f000 fce6 	bl	800dd14 <__lshift>
 800d348:	4606      	mov	r6, r0
 800d34a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d072      	beq.n	800d436 <_dtoa_r+0x926>
 800d350:	4631      	mov	r1, r6
 800d352:	4650      	mov	r0, sl
 800d354:	f000 fd4a 	bl	800ddec <__mcmp>
 800d358:	2800      	cmp	r0, #0
 800d35a:	da6c      	bge.n	800d436 <_dtoa_r+0x926>
 800d35c:	2300      	movs	r3, #0
 800d35e:	4651      	mov	r1, sl
 800d360:	220a      	movs	r2, #10
 800d362:	4620      	mov	r0, r4
 800d364:	f000 fb28 	bl	800d9b8 <__multadd>
 800d368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d36a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d36e:	4682      	mov	sl, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 81b0 	beq.w	800d6d6 <_dtoa_r+0xbc6>
 800d376:	2300      	movs	r3, #0
 800d378:	4639      	mov	r1, r7
 800d37a:	220a      	movs	r2, #10
 800d37c:	4620      	mov	r0, r4
 800d37e:	f000 fb1b 	bl	800d9b8 <__multadd>
 800d382:	9b01      	ldr	r3, [sp, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	4607      	mov	r7, r0
 800d388:	f300 8096 	bgt.w	800d4b8 <_dtoa_r+0x9a8>
 800d38c:	9b07      	ldr	r3, [sp, #28]
 800d38e:	2b02      	cmp	r3, #2
 800d390:	dc59      	bgt.n	800d446 <_dtoa_r+0x936>
 800d392:	e091      	b.n	800d4b8 <_dtoa_r+0x9a8>
 800d394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d39a:	e758      	b.n	800d24e <_dtoa_r+0x73e>
 800d39c:	9b04      	ldr	r3, [sp, #16]
 800d39e:	1e5e      	subs	r6, r3, #1
 800d3a0:	9b08      	ldr	r3, [sp, #32]
 800d3a2:	42b3      	cmp	r3, r6
 800d3a4:	bfbf      	itttt	lt
 800d3a6:	9b08      	ldrlt	r3, [sp, #32]
 800d3a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d3aa:	9608      	strlt	r6, [sp, #32]
 800d3ac:	1af3      	sublt	r3, r6, r3
 800d3ae:	bfb4      	ite	lt
 800d3b0:	18d2      	addlt	r2, r2, r3
 800d3b2:	1b9e      	subge	r6, r3, r6
 800d3b4:	9b04      	ldr	r3, [sp, #16]
 800d3b6:	bfbc      	itt	lt
 800d3b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d3ba:	2600      	movlt	r6, #0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	bfb7      	itett	lt
 800d3c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d3c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d3c8:	1a9d      	sublt	r5, r3, r2
 800d3ca:	2300      	movlt	r3, #0
 800d3cc:	e741      	b.n	800d252 <_dtoa_r+0x742>
 800d3ce:	9e08      	ldr	r6, [sp, #32]
 800d3d0:	9d05      	ldr	r5, [sp, #20]
 800d3d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d3d4:	e748      	b.n	800d268 <_dtoa_r+0x758>
 800d3d6:	9a08      	ldr	r2, [sp, #32]
 800d3d8:	e770      	b.n	800d2bc <_dtoa_r+0x7ac>
 800d3da:	9b07      	ldr	r3, [sp, #28]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	dc19      	bgt.n	800d414 <_dtoa_r+0x904>
 800d3e0:	9b02      	ldr	r3, [sp, #8]
 800d3e2:	b9bb      	cbnz	r3, 800d414 <_dtoa_r+0x904>
 800d3e4:	9b03      	ldr	r3, [sp, #12]
 800d3e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3ea:	b99b      	cbnz	r3, 800d414 <_dtoa_r+0x904>
 800d3ec:	9b03      	ldr	r3, [sp, #12]
 800d3ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3f2:	0d1b      	lsrs	r3, r3, #20
 800d3f4:	051b      	lsls	r3, r3, #20
 800d3f6:	b183      	cbz	r3, 800d41a <_dtoa_r+0x90a>
 800d3f8:	9b05      	ldr	r3, [sp, #20]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	9305      	str	r3, [sp, #20]
 800d3fe:	9b06      	ldr	r3, [sp, #24]
 800d400:	3301      	adds	r3, #1
 800d402:	9306      	str	r3, [sp, #24]
 800d404:	f04f 0801 	mov.w	r8, #1
 800d408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f47f af6f 	bne.w	800d2ee <_dtoa_r+0x7de>
 800d410:	2001      	movs	r0, #1
 800d412:	e774      	b.n	800d2fe <_dtoa_r+0x7ee>
 800d414:	f04f 0800 	mov.w	r8, #0
 800d418:	e7f6      	b.n	800d408 <_dtoa_r+0x8f8>
 800d41a:	4698      	mov	r8, r3
 800d41c:	e7f4      	b.n	800d408 <_dtoa_r+0x8f8>
 800d41e:	d082      	beq.n	800d326 <_dtoa_r+0x816>
 800d420:	9a05      	ldr	r2, [sp, #20]
 800d422:	331c      	adds	r3, #28
 800d424:	441a      	add	r2, r3
 800d426:	9205      	str	r2, [sp, #20]
 800d428:	9a06      	ldr	r2, [sp, #24]
 800d42a:	441a      	add	r2, r3
 800d42c:	441d      	add	r5, r3
 800d42e:	9206      	str	r2, [sp, #24]
 800d430:	e779      	b.n	800d326 <_dtoa_r+0x816>
 800d432:	4603      	mov	r3, r0
 800d434:	e7f4      	b.n	800d420 <_dtoa_r+0x910>
 800d436:	9b04      	ldr	r3, [sp, #16]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	dc37      	bgt.n	800d4ac <_dtoa_r+0x99c>
 800d43c:	9b07      	ldr	r3, [sp, #28]
 800d43e:	2b02      	cmp	r3, #2
 800d440:	dd34      	ble.n	800d4ac <_dtoa_r+0x99c>
 800d442:	9b04      	ldr	r3, [sp, #16]
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	9b01      	ldr	r3, [sp, #4]
 800d448:	b963      	cbnz	r3, 800d464 <_dtoa_r+0x954>
 800d44a:	4631      	mov	r1, r6
 800d44c:	2205      	movs	r2, #5
 800d44e:	4620      	mov	r0, r4
 800d450:	f000 fab2 	bl	800d9b8 <__multadd>
 800d454:	4601      	mov	r1, r0
 800d456:	4606      	mov	r6, r0
 800d458:	4650      	mov	r0, sl
 800d45a:	f000 fcc7 	bl	800ddec <__mcmp>
 800d45e:	2800      	cmp	r0, #0
 800d460:	f73f adbb 	bgt.w	800cfda <_dtoa_r+0x4ca>
 800d464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d466:	9d00      	ldr	r5, [sp, #0]
 800d468:	ea6f 0b03 	mvn.w	fp, r3
 800d46c:	f04f 0800 	mov.w	r8, #0
 800d470:	4631      	mov	r1, r6
 800d472:	4620      	mov	r0, r4
 800d474:	f000 fa7e 	bl	800d974 <_Bfree>
 800d478:	2f00      	cmp	r7, #0
 800d47a:	f43f aeab 	beq.w	800d1d4 <_dtoa_r+0x6c4>
 800d47e:	f1b8 0f00 	cmp.w	r8, #0
 800d482:	d005      	beq.n	800d490 <_dtoa_r+0x980>
 800d484:	45b8      	cmp	r8, r7
 800d486:	d003      	beq.n	800d490 <_dtoa_r+0x980>
 800d488:	4641      	mov	r1, r8
 800d48a:	4620      	mov	r0, r4
 800d48c:	f000 fa72 	bl	800d974 <_Bfree>
 800d490:	4639      	mov	r1, r7
 800d492:	4620      	mov	r0, r4
 800d494:	f000 fa6e 	bl	800d974 <_Bfree>
 800d498:	e69c      	b.n	800d1d4 <_dtoa_r+0x6c4>
 800d49a:	2600      	movs	r6, #0
 800d49c:	4637      	mov	r7, r6
 800d49e:	e7e1      	b.n	800d464 <_dtoa_r+0x954>
 800d4a0:	46bb      	mov	fp, r7
 800d4a2:	4637      	mov	r7, r6
 800d4a4:	e599      	b.n	800cfda <_dtoa_r+0x4ca>
 800d4a6:	bf00      	nop
 800d4a8:	40240000 	.word	0x40240000
 800d4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f000 80c8 	beq.w	800d644 <_dtoa_r+0xb34>
 800d4b4:	9b04      	ldr	r3, [sp, #16]
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	2d00      	cmp	r5, #0
 800d4ba:	dd05      	ble.n	800d4c8 <_dtoa_r+0x9b8>
 800d4bc:	4639      	mov	r1, r7
 800d4be:	462a      	mov	r2, r5
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f000 fc27 	bl	800dd14 <__lshift>
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	f1b8 0f00 	cmp.w	r8, #0
 800d4cc:	d05b      	beq.n	800d586 <_dtoa_r+0xa76>
 800d4ce:	6879      	ldr	r1, [r7, #4]
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f000 fa0f 	bl	800d8f4 <_Balloc>
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	b928      	cbnz	r0, 800d4e6 <_dtoa_r+0x9d6>
 800d4da:	4b83      	ldr	r3, [pc, #524]	; (800d6e8 <_dtoa_r+0xbd8>)
 800d4dc:	4602      	mov	r2, r0
 800d4de:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d4e2:	f7ff bb2e 	b.w	800cb42 <_dtoa_r+0x32>
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	3202      	adds	r2, #2
 800d4ea:	0092      	lsls	r2, r2, #2
 800d4ec:	f107 010c 	add.w	r1, r7, #12
 800d4f0:	300c      	adds	r0, #12
 800d4f2:	f7ff fa75 	bl	800c9e0 <memcpy>
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 fc0a 	bl	800dd14 <__lshift>
 800d500:	9b00      	ldr	r3, [sp, #0]
 800d502:	3301      	adds	r3, #1
 800d504:	9304      	str	r3, [sp, #16]
 800d506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d50a:	4413      	add	r3, r2
 800d50c:	9308      	str	r3, [sp, #32]
 800d50e:	9b02      	ldr	r3, [sp, #8]
 800d510:	f003 0301 	and.w	r3, r3, #1
 800d514:	46b8      	mov	r8, r7
 800d516:	9306      	str	r3, [sp, #24]
 800d518:	4607      	mov	r7, r0
 800d51a:	9b04      	ldr	r3, [sp, #16]
 800d51c:	4631      	mov	r1, r6
 800d51e:	3b01      	subs	r3, #1
 800d520:	4650      	mov	r0, sl
 800d522:	9301      	str	r3, [sp, #4]
 800d524:	f7ff fa6a 	bl	800c9fc <quorem>
 800d528:	4641      	mov	r1, r8
 800d52a:	9002      	str	r0, [sp, #8]
 800d52c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d530:	4650      	mov	r0, sl
 800d532:	f000 fc5b 	bl	800ddec <__mcmp>
 800d536:	463a      	mov	r2, r7
 800d538:	9005      	str	r0, [sp, #20]
 800d53a:	4631      	mov	r1, r6
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 fc71 	bl	800de24 <__mdiff>
 800d542:	68c2      	ldr	r2, [r0, #12]
 800d544:	4605      	mov	r5, r0
 800d546:	bb02      	cbnz	r2, 800d58a <_dtoa_r+0xa7a>
 800d548:	4601      	mov	r1, r0
 800d54a:	4650      	mov	r0, sl
 800d54c:	f000 fc4e 	bl	800ddec <__mcmp>
 800d550:	4602      	mov	r2, r0
 800d552:	4629      	mov	r1, r5
 800d554:	4620      	mov	r0, r4
 800d556:	9209      	str	r2, [sp, #36]	; 0x24
 800d558:	f000 fa0c 	bl	800d974 <_Bfree>
 800d55c:	9b07      	ldr	r3, [sp, #28]
 800d55e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d560:	9d04      	ldr	r5, [sp, #16]
 800d562:	ea43 0102 	orr.w	r1, r3, r2
 800d566:	9b06      	ldr	r3, [sp, #24]
 800d568:	4319      	orrs	r1, r3
 800d56a:	d110      	bne.n	800d58e <_dtoa_r+0xa7e>
 800d56c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d570:	d029      	beq.n	800d5c6 <_dtoa_r+0xab6>
 800d572:	9b05      	ldr	r3, [sp, #20]
 800d574:	2b00      	cmp	r3, #0
 800d576:	dd02      	ble.n	800d57e <_dtoa_r+0xa6e>
 800d578:	9b02      	ldr	r3, [sp, #8]
 800d57a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d57e:	9b01      	ldr	r3, [sp, #4]
 800d580:	f883 9000 	strb.w	r9, [r3]
 800d584:	e774      	b.n	800d470 <_dtoa_r+0x960>
 800d586:	4638      	mov	r0, r7
 800d588:	e7ba      	b.n	800d500 <_dtoa_r+0x9f0>
 800d58a:	2201      	movs	r2, #1
 800d58c:	e7e1      	b.n	800d552 <_dtoa_r+0xa42>
 800d58e:	9b05      	ldr	r3, [sp, #20]
 800d590:	2b00      	cmp	r3, #0
 800d592:	db04      	blt.n	800d59e <_dtoa_r+0xa8e>
 800d594:	9907      	ldr	r1, [sp, #28]
 800d596:	430b      	orrs	r3, r1
 800d598:	9906      	ldr	r1, [sp, #24]
 800d59a:	430b      	orrs	r3, r1
 800d59c:	d120      	bne.n	800d5e0 <_dtoa_r+0xad0>
 800d59e:	2a00      	cmp	r2, #0
 800d5a0:	dded      	ble.n	800d57e <_dtoa_r+0xa6e>
 800d5a2:	4651      	mov	r1, sl
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f000 fbb4 	bl	800dd14 <__lshift>
 800d5ac:	4631      	mov	r1, r6
 800d5ae:	4682      	mov	sl, r0
 800d5b0:	f000 fc1c 	bl	800ddec <__mcmp>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	dc03      	bgt.n	800d5c0 <_dtoa_r+0xab0>
 800d5b8:	d1e1      	bne.n	800d57e <_dtoa_r+0xa6e>
 800d5ba:	f019 0f01 	tst.w	r9, #1
 800d5be:	d0de      	beq.n	800d57e <_dtoa_r+0xa6e>
 800d5c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d5c4:	d1d8      	bne.n	800d578 <_dtoa_r+0xa68>
 800d5c6:	9a01      	ldr	r2, [sp, #4]
 800d5c8:	2339      	movs	r3, #57	; 0x39
 800d5ca:	7013      	strb	r3, [r2, #0]
 800d5cc:	462b      	mov	r3, r5
 800d5ce:	461d      	mov	r5, r3
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d5d6:	2a39      	cmp	r2, #57	; 0x39
 800d5d8:	d06c      	beq.n	800d6b4 <_dtoa_r+0xba4>
 800d5da:	3201      	adds	r2, #1
 800d5dc:	701a      	strb	r2, [r3, #0]
 800d5de:	e747      	b.n	800d470 <_dtoa_r+0x960>
 800d5e0:	2a00      	cmp	r2, #0
 800d5e2:	dd07      	ble.n	800d5f4 <_dtoa_r+0xae4>
 800d5e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d5e8:	d0ed      	beq.n	800d5c6 <_dtoa_r+0xab6>
 800d5ea:	9a01      	ldr	r2, [sp, #4]
 800d5ec:	f109 0301 	add.w	r3, r9, #1
 800d5f0:	7013      	strb	r3, [r2, #0]
 800d5f2:	e73d      	b.n	800d470 <_dtoa_r+0x960>
 800d5f4:	9b04      	ldr	r3, [sp, #16]
 800d5f6:	9a08      	ldr	r2, [sp, #32]
 800d5f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d043      	beq.n	800d688 <_dtoa_r+0xb78>
 800d600:	4651      	mov	r1, sl
 800d602:	2300      	movs	r3, #0
 800d604:	220a      	movs	r2, #10
 800d606:	4620      	mov	r0, r4
 800d608:	f000 f9d6 	bl	800d9b8 <__multadd>
 800d60c:	45b8      	cmp	r8, r7
 800d60e:	4682      	mov	sl, r0
 800d610:	f04f 0300 	mov.w	r3, #0
 800d614:	f04f 020a 	mov.w	r2, #10
 800d618:	4641      	mov	r1, r8
 800d61a:	4620      	mov	r0, r4
 800d61c:	d107      	bne.n	800d62e <_dtoa_r+0xb1e>
 800d61e:	f000 f9cb 	bl	800d9b8 <__multadd>
 800d622:	4680      	mov	r8, r0
 800d624:	4607      	mov	r7, r0
 800d626:	9b04      	ldr	r3, [sp, #16]
 800d628:	3301      	adds	r3, #1
 800d62a:	9304      	str	r3, [sp, #16]
 800d62c:	e775      	b.n	800d51a <_dtoa_r+0xa0a>
 800d62e:	f000 f9c3 	bl	800d9b8 <__multadd>
 800d632:	4639      	mov	r1, r7
 800d634:	4680      	mov	r8, r0
 800d636:	2300      	movs	r3, #0
 800d638:	220a      	movs	r2, #10
 800d63a:	4620      	mov	r0, r4
 800d63c:	f000 f9bc 	bl	800d9b8 <__multadd>
 800d640:	4607      	mov	r7, r0
 800d642:	e7f0      	b.n	800d626 <_dtoa_r+0xb16>
 800d644:	9b04      	ldr	r3, [sp, #16]
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	9d00      	ldr	r5, [sp, #0]
 800d64a:	4631      	mov	r1, r6
 800d64c:	4650      	mov	r0, sl
 800d64e:	f7ff f9d5 	bl	800c9fc <quorem>
 800d652:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d656:	9b00      	ldr	r3, [sp, #0]
 800d658:	f805 9b01 	strb.w	r9, [r5], #1
 800d65c:	1aea      	subs	r2, r5, r3
 800d65e:	9b01      	ldr	r3, [sp, #4]
 800d660:	4293      	cmp	r3, r2
 800d662:	dd07      	ble.n	800d674 <_dtoa_r+0xb64>
 800d664:	4651      	mov	r1, sl
 800d666:	2300      	movs	r3, #0
 800d668:	220a      	movs	r2, #10
 800d66a:	4620      	mov	r0, r4
 800d66c:	f000 f9a4 	bl	800d9b8 <__multadd>
 800d670:	4682      	mov	sl, r0
 800d672:	e7ea      	b.n	800d64a <_dtoa_r+0xb3a>
 800d674:	9b01      	ldr	r3, [sp, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	bfc8      	it	gt
 800d67a:	461d      	movgt	r5, r3
 800d67c:	9b00      	ldr	r3, [sp, #0]
 800d67e:	bfd8      	it	le
 800d680:	2501      	movle	r5, #1
 800d682:	441d      	add	r5, r3
 800d684:	f04f 0800 	mov.w	r8, #0
 800d688:	4651      	mov	r1, sl
 800d68a:	2201      	movs	r2, #1
 800d68c:	4620      	mov	r0, r4
 800d68e:	f000 fb41 	bl	800dd14 <__lshift>
 800d692:	4631      	mov	r1, r6
 800d694:	4682      	mov	sl, r0
 800d696:	f000 fba9 	bl	800ddec <__mcmp>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	dc96      	bgt.n	800d5cc <_dtoa_r+0xabc>
 800d69e:	d102      	bne.n	800d6a6 <_dtoa_r+0xb96>
 800d6a0:	f019 0f01 	tst.w	r9, #1
 800d6a4:	d192      	bne.n	800d5cc <_dtoa_r+0xabc>
 800d6a6:	462b      	mov	r3, r5
 800d6a8:	461d      	mov	r5, r3
 800d6aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6ae:	2a30      	cmp	r2, #48	; 0x30
 800d6b0:	d0fa      	beq.n	800d6a8 <_dtoa_r+0xb98>
 800d6b2:	e6dd      	b.n	800d470 <_dtoa_r+0x960>
 800d6b4:	9a00      	ldr	r2, [sp, #0]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d189      	bne.n	800d5ce <_dtoa_r+0xabe>
 800d6ba:	f10b 0b01 	add.w	fp, fp, #1
 800d6be:	2331      	movs	r3, #49	; 0x31
 800d6c0:	e796      	b.n	800d5f0 <_dtoa_r+0xae0>
 800d6c2:	4b0a      	ldr	r3, [pc, #40]	; (800d6ec <_dtoa_r+0xbdc>)
 800d6c4:	f7ff ba99 	b.w	800cbfa <_dtoa_r+0xea>
 800d6c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f47f aa6d 	bne.w	800cbaa <_dtoa_r+0x9a>
 800d6d0:	4b07      	ldr	r3, [pc, #28]	; (800d6f0 <_dtoa_r+0xbe0>)
 800d6d2:	f7ff ba92 	b.w	800cbfa <_dtoa_r+0xea>
 800d6d6:	9b01      	ldr	r3, [sp, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	dcb5      	bgt.n	800d648 <_dtoa_r+0xb38>
 800d6dc:	9b07      	ldr	r3, [sp, #28]
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	f73f aeb1 	bgt.w	800d446 <_dtoa_r+0x936>
 800d6e4:	e7b0      	b.n	800d648 <_dtoa_r+0xb38>
 800d6e6:	bf00      	nop
 800d6e8:	0800f6b6 	.word	0x0800f6b6
 800d6ec:	0800f843 	.word	0x0800f843
 800d6f0:	0800f63a 	.word	0x0800f63a

0800d6f4 <_free_r>:
 800d6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6f6:	2900      	cmp	r1, #0
 800d6f8:	d044      	beq.n	800d784 <_free_r+0x90>
 800d6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6fe:	9001      	str	r0, [sp, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	f1a1 0404 	sub.w	r4, r1, #4
 800d706:	bfb8      	it	lt
 800d708:	18e4      	addlt	r4, r4, r3
 800d70a:	f000 f8e7 	bl	800d8dc <__malloc_lock>
 800d70e:	4a1e      	ldr	r2, [pc, #120]	; (800d788 <_free_r+0x94>)
 800d710:	9801      	ldr	r0, [sp, #4]
 800d712:	6813      	ldr	r3, [r2, #0]
 800d714:	b933      	cbnz	r3, 800d724 <_free_r+0x30>
 800d716:	6063      	str	r3, [r4, #4]
 800d718:	6014      	str	r4, [r2, #0]
 800d71a:	b003      	add	sp, #12
 800d71c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d720:	f000 b8e2 	b.w	800d8e8 <__malloc_unlock>
 800d724:	42a3      	cmp	r3, r4
 800d726:	d908      	bls.n	800d73a <_free_r+0x46>
 800d728:	6825      	ldr	r5, [r4, #0]
 800d72a:	1961      	adds	r1, r4, r5
 800d72c:	428b      	cmp	r3, r1
 800d72e:	bf01      	itttt	eq
 800d730:	6819      	ldreq	r1, [r3, #0]
 800d732:	685b      	ldreq	r3, [r3, #4]
 800d734:	1949      	addeq	r1, r1, r5
 800d736:	6021      	streq	r1, [r4, #0]
 800d738:	e7ed      	b.n	800d716 <_free_r+0x22>
 800d73a:	461a      	mov	r2, r3
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	b10b      	cbz	r3, 800d744 <_free_r+0x50>
 800d740:	42a3      	cmp	r3, r4
 800d742:	d9fa      	bls.n	800d73a <_free_r+0x46>
 800d744:	6811      	ldr	r1, [r2, #0]
 800d746:	1855      	adds	r5, r2, r1
 800d748:	42a5      	cmp	r5, r4
 800d74a:	d10b      	bne.n	800d764 <_free_r+0x70>
 800d74c:	6824      	ldr	r4, [r4, #0]
 800d74e:	4421      	add	r1, r4
 800d750:	1854      	adds	r4, r2, r1
 800d752:	42a3      	cmp	r3, r4
 800d754:	6011      	str	r1, [r2, #0]
 800d756:	d1e0      	bne.n	800d71a <_free_r+0x26>
 800d758:	681c      	ldr	r4, [r3, #0]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	6053      	str	r3, [r2, #4]
 800d75e:	440c      	add	r4, r1
 800d760:	6014      	str	r4, [r2, #0]
 800d762:	e7da      	b.n	800d71a <_free_r+0x26>
 800d764:	d902      	bls.n	800d76c <_free_r+0x78>
 800d766:	230c      	movs	r3, #12
 800d768:	6003      	str	r3, [r0, #0]
 800d76a:	e7d6      	b.n	800d71a <_free_r+0x26>
 800d76c:	6825      	ldr	r5, [r4, #0]
 800d76e:	1961      	adds	r1, r4, r5
 800d770:	428b      	cmp	r3, r1
 800d772:	bf04      	itt	eq
 800d774:	6819      	ldreq	r1, [r3, #0]
 800d776:	685b      	ldreq	r3, [r3, #4]
 800d778:	6063      	str	r3, [r4, #4]
 800d77a:	bf04      	itt	eq
 800d77c:	1949      	addeq	r1, r1, r5
 800d77e:	6021      	streq	r1, [r4, #0]
 800d780:	6054      	str	r4, [r2, #4]
 800d782:	e7ca      	b.n	800d71a <_free_r+0x26>
 800d784:	b003      	add	sp, #12
 800d786:	bd30      	pop	{r4, r5, pc}
 800d788:	20001b68 	.word	0x20001b68

0800d78c <malloc>:
 800d78c:	4b02      	ldr	r3, [pc, #8]	; (800d798 <malloc+0xc>)
 800d78e:	4601      	mov	r1, r0
 800d790:	6818      	ldr	r0, [r3, #0]
 800d792:	f000 b823 	b.w	800d7dc <_malloc_r>
 800d796:	bf00      	nop
 800d798:	20000164 	.word	0x20000164

0800d79c <sbrk_aligned>:
 800d79c:	b570      	push	{r4, r5, r6, lr}
 800d79e:	4e0e      	ldr	r6, [pc, #56]	; (800d7d8 <sbrk_aligned+0x3c>)
 800d7a0:	460c      	mov	r4, r1
 800d7a2:	6831      	ldr	r1, [r6, #0]
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	b911      	cbnz	r1, 800d7ae <sbrk_aligned+0x12>
 800d7a8:	f001 fb9c 	bl	800eee4 <_sbrk_r>
 800d7ac:	6030      	str	r0, [r6, #0]
 800d7ae:	4621      	mov	r1, r4
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	f001 fb97 	bl	800eee4 <_sbrk_r>
 800d7b6:	1c43      	adds	r3, r0, #1
 800d7b8:	d00a      	beq.n	800d7d0 <sbrk_aligned+0x34>
 800d7ba:	1cc4      	adds	r4, r0, #3
 800d7bc:	f024 0403 	bic.w	r4, r4, #3
 800d7c0:	42a0      	cmp	r0, r4
 800d7c2:	d007      	beq.n	800d7d4 <sbrk_aligned+0x38>
 800d7c4:	1a21      	subs	r1, r4, r0
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f001 fb8c 	bl	800eee4 <_sbrk_r>
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d101      	bne.n	800d7d4 <sbrk_aligned+0x38>
 800d7d0:	f04f 34ff 	mov.w	r4, #4294967295
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	bd70      	pop	{r4, r5, r6, pc}
 800d7d8:	20001b6c 	.word	0x20001b6c

0800d7dc <_malloc_r>:
 800d7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e0:	1ccd      	adds	r5, r1, #3
 800d7e2:	f025 0503 	bic.w	r5, r5, #3
 800d7e6:	3508      	adds	r5, #8
 800d7e8:	2d0c      	cmp	r5, #12
 800d7ea:	bf38      	it	cc
 800d7ec:	250c      	movcc	r5, #12
 800d7ee:	2d00      	cmp	r5, #0
 800d7f0:	4607      	mov	r7, r0
 800d7f2:	db01      	blt.n	800d7f8 <_malloc_r+0x1c>
 800d7f4:	42a9      	cmp	r1, r5
 800d7f6:	d905      	bls.n	800d804 <_malloc_r+0x28>
 800d7f8:	230c      	movs	r3, #12
 800d7fa:	603b      	str	r3, [r7, #0]
 800d7fc:	2600      	movs	r6, #0
 800d7fe:	4630      	mov	r0, r6
 800d800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d804:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d8d8 <_malloc_r+0xfc>
 800d808:	f000 f868 	bl	800d8dc <__malloc_lock>
 800d80c:	f8d8 3000 	ldr.w	r3, [r8]
 800d810:	461c      	mov	r4, r3
 800d812:	bb5c      	cbnz	r4, 800d86c <_malloc_r+0x90>
 800d814:	4629      	mov	r1, r5
 800d816:	4638      	mov	r0, r7
 800d818:	f7ff ffc0 	bl	800d79c <sbrk_aligned>
 800d81c:	1c43      	adds	r3, r0, #1
 800d81e:	4604      	mov	r4, r0
 800d820:	d155      	bne.n	800d8ce <_malloc_r+0xf2>
 800d822:	f8d8 4000 	ldr.w	r4, [r8]
 800d826:	4626      	mov	r6, r4
 800d828:	2e00      	cmp	r6, #0
 800d82a:	d145      	bne.n	800d8b8 <_malloc_r+0xdc>
 800d82c:	2c00      	cmp	r4, #0
 800d82e:	d048      	beq.n	800d8c2 <_malloc_r+0xe6>
 800d830:	6823      	ldr	r3, [r4, #0]
 800d832:	4631      	mov	r1, r6
 800d834:	4638      	mov	r0, r7
 800d836:	eb04 0903 	add.w	r9, r4, r3
 800d83a:	f001 fb53 	bl	800eee4 <_sbrk_r>
 800d83e:	4581      	cmp	r9, r0
 800d840:	d13f      	bne.n	800d8c2 <_malloc_r+0xe6>
 800d842:	6821      	ldr	r1, [r4, #0]
 800d844:	1a6d      	subs	r5, r5, r1
 800d846:	4629      	mov	r1, r5
 800d848:	4638      	mov	r0, r7
 800d84a:	f7ff ffa7 	bl	800d79c <sbrk_aligned>
 800d84e:	3001      	adds	r0, #1
 800d850:	d037      	beq.n	800d8c2 <_malloc_r+0xe6>
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	442b      	add	r3, r5
 800d856:	6023      	str	r3, [r4, #0]
 800d858:	f8d8 3000 	ldr.w	r3, [r8]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d038      	beq.n	800d8d2 <_malloc_r+0xf6>
 800d860:	685a      	ldr	r2, [r3, #4]
 800d862:	42a2      	cmp	r2, r4
 800d864:	d12b      	bne.n	800d8be <_malloc_r+0xe2>
 800d866:	2200      	movs	r2, #0
 800d868:	605a      	str	r2, [r3, #4]
 800d86a:	e00f      	b.n	800d88c <_malloc_r+0xb0>
 800d86c:	6822      	ldr	r2, [r4, #0]
 800d86e:	1b52      	subs	r2, r2, r5
 800d870:	d41f      	bmi.n	800d8b2 <_malloc_r+0xd6>
 800d872:	2a0b      	cmp	r2, #11
 800d874:	d917      	bls.n	800d8a6 <_malloc_r+0xca>
 800d876:	1961      	adds	r1, r4, r5
 800d878:	42a3      	cmp	r3, r4
 800d87a:	6025      	str	r5, [r4, #0]
 800d87c:	bf18      	it	ne
 800d87e:	6059      	strne	r1, [r3, #4]
 800d880:	6863      	ldr	r3, [r4, #4]
 800d882:	bf08      	it	eq
 800d884:	f8c8 1000 	streq.w	r1, [r8]
 800d888:	5162      	str	r2, [r4, r5]
 800d88a:	604b      	str	r3, [r1, #4]
 800d88c:	4638      	mov	r0, r7
 800d88e:	f104 060b 	add.w	r6, r4, #11
 800d892:	f000 f829 	bl	800d8e8 <__malloc_unlock>
 800d896:	f026 0607 	bic.w	r6, r6, #7
 800d89a:	1d23      	adds	r3, r4, #4
 800d89c:	1af2      	subs	r2, r6, r3
 800d89e:	d0ae      	beq.n	800d7fe <_malloc_r+0x22>
 800d8a0:	1b9b      	subs	r3, r3, r6
 800d8a2:	50a3      	str	r3, [r4, r2]
 800d8a4:	e7ab      	b.n	800d7fe <_malloc_r+0x22>
 800d8a6:	42a3      	cmp	r3, r4
 800d8a8:	6862      	ldr	r2, [r4, #4]
 800d8aa:	d1dd      	bne.n	800d868 <_malloc_r+0x8c>
 800d8ac:	f8c8 2000 	str.w	r2, [r8]
 800d8b0:	e7ec      	b.n	800d88c <_malloc_r+0xb0>
 800d8b2:	4623      	mov	r3, r4
 800d8b4:	6864      	ldr	r4, [r4, #4]
 800d8b6:	e7ac      	b.n	800d812 <_malloc_r+0x36>
 800d8b8:	4634      	mov	r4, r6
 800d8ba:	6876      	ldr	r6, [r6, #4]
 800d8bc:	e7b4      	b.n	800d828 <_malloc_r+0x4c>
 800d8be:	4613      	mov	r3, r2
 800d8c0:	e7cc      	b.n	800d85c <_malloc_r+0x80>
 800d8c2:	230c      	movs	r3, #12
 800d8c4:	603b      	str	r3, [r7, #0]
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	f000 f80e 	bl	800d8e8 <__malloc_unlock>
 800d8cc:	e797      	b.n	800d7fe <_malloc_r+0x22>
 800d8ce:	6025      	str	r5, [r4, #0]
 800d8d0:	e7dc      	b.n	800d88c <_malloc_r+0xb0>
 800d8d2:	605b      	str	r3, [r3, #4]
 800d8d4:	deff      	udf	#255	; 0xff
 800d8d6:	bf00      	nop
 800d8d8:	20001b68 	.word	0x20001b68

0800d8dc <__malloc_lock>:
 800d8dc:	4801      	ldr	r0, [pc, #4]	; (800d8e4 <__malloc_lock+0x8>)
 800d8de:	f7ff b87d 	b.w	800c9dc <__retarget_lock_acquire_recursive>
 800d8e2:	bf00      	nop
 800d8e4:	20001b64 	.word	0x20001b64

0800d8e8 <__malloc_unlock>:
 800d8e8:	4801      	ldr	r0, [pc, #4]	; (800d8f0 <__malloc_unlock+0x8>)
 800d8ea:	f7ff b878 	b.w	800c9de <__retarget_lock_release_recursive>
 800d8ee:	bf00      	nop
 800d8f0:	20001b64 	.word	0x20001b64

0800d8f4 <_Balloc>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	69c6      	ldr	r6, [r0, #28]
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	460d      	mov	r5, r1
 800d8fc:	b976      	cbnz	r6, 800d91c <_Balloc+0x28>
 800d8fe:	2010      	movs	r0, #16
 800d900:	f7ff ff44 	bl	800d78c <malloc>
 800d904:	4602      	mov	r2, r0
 800d906:	61e0      	str	r0, [r4, #28]
 800d908:	b920      	cbnz	r0, 800d914 <_Balloc+0x20>
 800d90a:	4b18      	ldr	r3, [pc, #96]	; (800d96c <_Balloc+0x78>)
 800d90c:	4818      	ldr	r0, [pc, #96]	; (800d970 <_Balloc+0x7c>)
 800d90e:	216b      	movs	r1, #107	; 0x6b
 800d910:	f001 faf8 	bl	800ef04 <__assert_func>
 800d914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d918:	6006      	str	r6, [r0, #0]
 800d91a:	60c6      	str	r6, [r0, #12]
 800d91c:	69e6      	ldr	r6, [r4, #28]
 800d91e:	68f3      	ldr	r3, [r6, #12]
 800d920:	b183      	cbz	r3, 800d944 <_Balloc+0x50>
 800d922:	69e3      	ldr	r3, [r4, #28]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d92a:	b9b8      	cbnz	r0, 800d95c <_Balloc+0x68>
 800d92c:	2101      	movs	r1, #1
 800d92e:	fa01 f605 	lsl.w	r6, r1, r5
 800d932:	1d72      	adds	r2, r6, #5
 800d934:	0092      	lsls	r2, r2, #2
 800d936:	4620      	mov	r0, r4
 800d938:	f001 fb02 	bl	800ef40 <_calloc_r>
 800d93c:	b160      	cbz	r0, 800d958 <_Balloc+0x64>
 800d93e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d942:	e00e      	b.n	800d962 <_Balloc+0x6e>
 800d944:	2221      	movs	r2, #33	; 0x21
 800d946:	2104      	movs	r1, #4
 800d948:	4620      	mov	r0, r4
 800d94a:	f001 faf9 	bl	800ef40 <_calloc_r>
 800d94e:	69e3      	ldr	r3, [r4, #28]
 800d950:	60f0      	str	r0, [r6, #12]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d1e4      	bne.n	800d922 <_Balloc+0x2e>
 800d958:	2000      	movs	r0, #0
 800d95a:	bd70      	pop	{r4, r5, r6, pc}
 800d95c:	6802      	ldr	r2, [r0, #0]
 800d95e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d962:	2300      	movs	r3, #0
 800d964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d968:	e7f7      	b.n	800d95a <_Balloc+0x66>
 800d96a:	bf00      	nop
 800d96c:	0800f647 	.word	0x0800f647
 800d970:	0800f6c7 	.word	0x0800f6c7

0800d974 <_Bfree>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	69c6      	ldr	r6, [r0, #28]
 800d978:	4605      	mov	r5, r0
 800d97a:	460c      	mov	r4, r1
 800d97c:	b976      	cbnz	r6, 800d99c <_Bfree+0x28>
 800d97e:	2010      	movs	r0, #16
 800d980:	f7ff ff04 	bl	800d78c <malloc>
 800d984:	4602      	mov	r2, r0
 800d986:	61e8      	str	r0, [r5, #28]
 800d988:	b920      	cbnz	r0, 800d994 <_Bfree+0x20>
 800d98a:	4b09      	ldr	r3, [pc, #36]	; (800d9b0 <_Bfree+0x3c>)
 800d98c:	4809      	ldr	r0, [pc, #36]	; (800d9b4 <_Bfree+0x40>)
 800d98e:	218f      	movs	r1, #143	; 0x8f
 800d990:	f001 fab8 	bl	800ef04 <__assert_func>
 800d994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d998:	6006      	str	r6, [r0, #0]
 800d99a:	60c6      	str	r6, [r0, #12]
 800d99c:	b13c      	cbz	r4, 800d9ae <_Bfree+0x3a>
 800d99e:	69eb      	ldr	r3, [r5, #28]
 800d9a0:	6862      	ldr	r2, [r4, #4]
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d9a8:	6021      	str	r1, [r4, #0]
 800d9aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}
 800d9b0:	0800f647 	.word	0x0800f647
 800d9b4:	0800f6c7 	.word	0x0800f6c7

0800d9b8 <__multadd>:
 800d9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9bc:	690d      	ldr	r5, [r1, #16]
 800d9be:	4607      	mov	r7, r0
 800d9c0:	460c      	mov	r4, r1
 800d9c2:	461e      	mov	r6, r3
 800d9c4:	f101 0c14 	add.w	ip, r1, #20
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	f8dc 3000 	ldr.w	r3, [ip]
 800d9ce:	b299      	uxth	r1, r3
 800d9d0:	fb02 6101 	mla	r1, r2, r1, r6
 800d9d4:	0c1e      	lsrs	r6, r3, #16
 800d9d6:	0c0b      	lsrs	r3, r1, #16
 800d9d8:	fb02 3306 	mla	r3, r2, r6, r3
 800d9dc:	b289      	uxth	r1, r1
 800d9de:	3001      	adds	r0, #1
 800d9e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9e4:	4285      	cmp	r5, r0
 800d9e6:	f84c 1b04 	str.w	r1, [ip], #4
 800d9ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9ee:	dcec      	bgt.n	800d9ca <__multadd+0x12>
 800d9f0:	b30e      	cbz	r6, 800da36 <__multadd+0x7e>
 800d9f2:	68a3      	ldr	r3, [r4, #8]
 800d9f4:	42ab      	cmp	r3, r5
 800d9f6:	dc19      	bgt.n	800da2c <__multadd+0x74>
 800d9f8:	6861      	ldr	r1, [r4, #4]
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	3101      	adds	r1, #1
 800d9fe:	f7ff ff79 	bl	800d8f4 <_Balloc>
 800da02:	4680      	mov	r8, r0
 800da04:	b928      	cbnz	r0, 800da12 <__multadd+0x5a>
 800da06:	4602      	mov	r2, r0
 800da08:	4b0c      	ldr	r3, [pc, #48]	; (800da3c <__multadd+0x84>)
 800da0a:	480d      	ldr	r0, [pc, #52]	; (800da40 <__multadd+0x88>)
 800da0c:	21ba      	movs	r1, #186	; 0xba
 800da0e:	f001 fa79 	bl	800ef04 <__assert_func>
 800da12:	6922      	ldr	r2, [r4, #16]
 800da14:	3202      	adds	r2, #2
 800da16:	f104 010c 	add.w	r1, r4, #12
 800da1a:	0092      	lsls	r2, r2, #2
 800da1c:	300c      	adds	r0, #12
 800da1e:	f7fe ffdf 	bl	800c9e0 <memcpy>
 800da22:	4621      	mov	r1, r4
 800da24:	4638      	mov	r0, r7
 800da26:	f7ff ffa5 	bl	800d974 <_Bfree>
 800da2a:	4644      	mov	r4, r8
 800da2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da30:	3501      	adds	r5, #1
 800da32:	615e      	str	r6, [r3, #20]
 800da34:	6125      	str	r5, [r4, #16]
 800da36:	4620      	mov	r0, r4
 800da38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da3c:	0800f6b6 	.word	0x0800f6b6
 800da40:	0800f6c7 	.word	0x0800f6c7

0800da44 <__hi0bits>:
 800da44:	0c03      	lsrs	r3, r0, #16
 800da46:	041b      	lsls	r3, r3, #16
 800da48:	b9d3      	cbnz	r3, 800da80 <__hi0bits+0x3c>
 800da4a:	0400      	lsls	r0, r0, #16
 800da4c:	2310      	movs	r3, #16
 800da4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da52:	bf04      	itt	eq
 800da54:	0200      	lsleq	r0, r0, #8
 800da56:	3308      	addeq	r3, #8
 800da58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da5c:	bf04      	itt	eq
 800da5e:	0100      	lsleq	r0, r0, #4
 800da60:	3304      	addeq	r3, #4
 800da62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da66:	bf04      	itt	eq
 800da68:	0080      	lsleq	r0, r0, #2
 800da6a:	3302      	addeq	r3, #2
 800da6c:	2800      	cmp	r0, #0
 800da6e:	db05      	blt.n	800da7c <__hi0bits+0x38>
 800da70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da74:	f103 0301 	add.w	r3, r3, #1
 800da78:	bf08      	it	eq
 800da7a:	2320      	moveq	r3, #32
 800da7c:	4618      	mov	r0, r3
 800da7e:	4770      	bx	lr
 800da80:	2300      	movs	r3, #0
 800da82:	e7e4      	b.n	800da4e <__hi0bits+0xa>

0800da84 <__lo0bits>:
 800da84:	6803      	ldr	r3, [r0, #0]
 800da86:	f013 0207 	ands.w	r2, r3, #7
 800da8a:	d00c      	beq.n	800daa6 <__lo0bits+0x22>
 800da8c:	07d9      	lsls	r1, r3, #31
 800da8e:	d422      	bmi.n	800dad6 <__lo0bits+0x52>
 800da90:	079a      	lsls	r2, r3, #30
 800da92:	bf49      	itett	mi
 800da94:	085b      	lsrmi	r3, r3, #1
 800da96:	089b      	lsrpl	r3, r3, #2
 800da98:	6003      	strmi	r3, [r0, #0]
 800da9a:	2201      	movmi	r2, #1
 800da9c:	bf5c      	itt	pl
 800da9e:	6003      	strpl	r3, [r0, #0]
 800daa0:	2202      	movpl	r2, #2
 800daa2:	4610      	mov	r0, r2
 800daa4:	4770      	bx	lr
 800daa6:	b299      	uxth	r1, r3
 800daa8:	b909      	cbnz	r1, 800daae <__lo0bits+0x2a>
 800daaa:	0c1b      	lsrs	r3, r3, #16
 800daac:	2210      	movs	r2, #16
 800daae:	b2d9      	uxtb	r1, r3
 800dab0:	b909      	cbnz	r1, 800dab6 <__lo0bits+0x32>
 800dab2:	3208      	adds	r2, #8
 800dab4:	0a1b      	lsrs	r3, r3, #8
 800dab6:	0719      	lsls	r1, r3, #28
 800dab8:	bf04      	itt	eq
 800daba:	091b      	lsreq	r3, r3, #4
 800dabc:	3204      	addeq	r2, #4
 800dabe:	0799      	lsls	r1, r3, #30
 800dac0:	bf04      	itt	eq
 800dac2:	089b      	lsreq	r3, r3, #2
 800dac4:	3202      	addeq	r2, #2
 800dac6:	07d9      	lsls	r1, r3, #31
 800dac8:	d403      	bmi.n	800dad2 <__lo0bits+0x4e>
 800daca:	085b      	lsrs	r3, r3, #1
 800dacc:	f102 0201 	add.w	r2, r2, #1
 800dad0:	d003      	beq.n	800dada <__lo0bits+0x56>
 800dad2:	6003      	str	r3, [r0, #0]
 800dad4:	e7e5      	b.n	800daa2 <__lo0bits+0x1e>
 800dad6:	2200      	movs	r2, #0
 800dad8:	e7e3      	b.n	800daa2 <__lo0bits+0x1e>
 800dada:	2220      	movs	r2, #32
 800dadc:	e7e1      	b.n	800daa2 <__lo0bits+0x1e>
	...

0800dae0 <__i2b>:
 800dae0:	b510      	push	{r4, lr}
 800dae2:	460c      	mov	r4, r1
 800dae4:	2101      	movs	r1, #1
 800dae6:	f7ff ff05 	bl	800d8f4 <_Balloc>
 800daea:	4602      	mov	r2, r0
 800daec:	b928      	cbnz	r0, 800dafa <__i2b+0x1a>
 800daee:	4b05      	ldr	r3, [pc, #20]	; (800db04 <__i2b+0x24>)
 800daf0:	4805      	ldr	r0, [pc, #20]	; (800db08 <__i2b+0x28>)
 800daf2:	f240 1145 	movw	r1, #325	; 0x145
 800daf6:	f001 fa05 	bl	800ef04 <__assert_func>
 800dafa:	2301      	movs	r3, #1
 800dafc:	6144      	str	r4, [r0, #20]
 800dafe:	6103      	str	r3, [r0, #16]
 800db00:	bd10      	pop	{r4, pc}
 800db02:	bf00      	nop
 800db04:	0800f6b6 	.word	0x0800f6b6
 800db08:	0800f6c7 	.word	0x0800f6c7

0800db0c <__multiply>:
 800db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db10:	4691      	mov	r9, r2
 800db12:	690a      	ldr	r2, [r1, #16]
 800db14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db18:	429a      	cmp	r2, r3
 800db1a:	bfb8      	it	lt
 800db1c:	460b      	movlt	r3, r1
 800db1e:	460c      	mov	r4, r1
 800db20:	bfbc      	itt	lt
 800db22:	464c      	movlt	r4, r9
 800db24:	4699      	movlt	r9, r3
 800db26:	6927      	ldr	r7, [r4, #16]
 800db28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db2c:	68a3      	ldr	r3, [r4, #8]
 800db2e:	6861      	ldr	r1, [r4, #4]
 800db30:	eb07 060a 	add.w	r6, r7, sl
 800db34:	42b3      	cmp	r3, r6
 800db36:	b085      	sub	sp, #20
 800db38:	bfb8      	it	lt
 800db3a:	3101      	addlt	r1, #1
 800db3c:	f7ff feda 	bl	800d8f4 <_Balloc>
 800db40:	b930      	cbnz	r0, 800db50 <__multiply+0x44>
 800db42:	4602      	mov	r2, r0
 800db44:	4b44      	ldr	r3, [pc, #272]	; (800dc58 <__multiply+0x14c>)
 800db46:	4845      	ldr	r0, [pc, #276]	; (800dc5c <__multiply+0x150>)
 800db48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800db4c:	f001 f9da 	bl	800ef04 <__assert_func>
 800db50:	f100 0514 	add.w	r5, r0, #20
 800db54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db58:	462b      	mov	r3, r5
 800db5a:	2200      	movs	r2, #0
 800db5c:	4543      	cmp	r3, r8
 800db5e:	d321      	bcc.n	800dba4 <__multiply+0x98>
 800db60:	f104 0314 	add.w	r3, r4, #20
 800db64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db68:	f109 0314 	add.w	r3, r9, #20
 800db6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800db70:	9202      	str	r2, [sp, #8]
 800db72:	1b3a      	subs	r2, r7, r4
 800db74:	3a15      	subs	r2, #21
 800db76:	f022 0203 	bic.w	r2, r2, #3
 800db7a:	3204      	adds	r2, #4
 800db7c:	f104 0115 	add.w	r1, r4, #21
 800db80:	428f      	cmp	r7, r1
 800db82:	bf38      	it	cc
 800db84:	2204      	movcc	r2, #4
 800db86:	9201      	str	r2, [sp, #4]
 800db88:	9a02      	ldr	r2, [sp, #8]
 800db8a:	9303      	str	r3, [sp, #12]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d80c      	bhi.n	800dbaa <__multiply+0x9e>
 800db90:	2e00      	cmp	r6, #0
 800db92:	dd03      	ble.n	800db9c <__multiply+0x90>
 800db94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d05b      	beq.n	800dc54 <__multiply+0x148>
 800db9c:	6106      	str	r6, [r0, #16]
 800db9e:	b005      	add	sp, #20
 800dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba4:	f843 2b04 	str.w	r2, [r3], #4
 800dba8:	e7d8      	b.n	800db5c <__multiply+0x50>
 800dbaa:	f8b3 a000 	ldrh.w	sl, [r3]
 800dbae:	f1ba 0f00 	cmp.w	sl, #0
 800dbb2:	d024      	beq.n	800dbfe <__multiply+0xf2>
 800dbb4:	f104 0e14 	add.w	lr, r4, #20
 800dbb8:	46a9      	mov	r9, r5
 800dbba:	f04f 0c00 	mov.w	ip, #0
 800dbbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dbc2:	f8d9 1000 	ldr.w	r1, [r9]
 800dbc6:	fa1f fb82 	uxth.w	fp, r2
 800dbca:	b289      	uxth	r1, r1
 800dbcc:	fb0a 110b 	mla	r1, sl, fp, r1
 800dbd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dbd4:	f8d9 2000 	ldr.w	r2, [r9]
 800dbd8:	4461      	add	r1, ip
 800dbda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbde:	fb0a c20b 	mla	r2, sl, fp, ip
 800dbe2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbe6:	b289      	uxth	r1, r1
 800dbe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dbec:	4577      	cmp	r7, lr
 800dbee:	f849 1b04 	str.w	r1, [r9], #4
 800dbf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbf6:	d8e2      	bhi.n	800dbbe <__multiply+0xb2>
 800dbf8:	9a01      	ldr	r2, [sp, #4]
 800dbfa:	f845 c002 	str.w	ip, [r5, r2]
 800dbfe:	9a03      	ldr	r2, [sp, #12]
 800dc00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc04:	3304      	adds	r3, #4
 800dc06:	f1b9 0f00 	cmp.w	r9, #0
 800dc0a:	d021      	beq.n	800dc50 <__multiply+0x144>
 800dc0c:	6829      	ldr	r1, [r5, #0]
 800dc0e:	f104 0c14 	add.w	ip, r4, #20
 800dc12:	46ae      	mov	lr, r5
 800dc14:	f04f 0a00 	mov.w	sl, #0
 800dc18:	f8bc b000 	ldrh.w	fp, [ip]
 800dc1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc20:	fb09 220b 	mla	r2, r9, fp, r2
 800dc24:	4452      	add	r2, sl
 800dc26:	b289      	uxth	r1, r1
 800dc28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc2c:	f84e 1b04 	str.w	r1, [lr], #4
 800dc30:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dc34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc38:	f8be 1000 	ldrh.w	r1, [lr]
 800dc3c:	fb09 110a 	mla	r1, r9, sl, r1
 800dc40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dc44:	4567      	cmp	r7, ip
 800dc46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc4a:	d8e5      	bhi.n	800dc18 <__multiply+0x10c>
 800dc4c:	9a01      	ldr	r2, [sp, #4]
 800dc4e:	50a9      	str	r1, [r5, r2]
 800dc50:	3504      	adds	r5, #4
 800dc52:	e799      	b.n	800db88 <__multiply+0x7c>
 800dc54:	3e01      	subs	r6, #1
 800dc56:	e79b      	b.n	800db90 <__multiply+0x84>
 800dc58:	0800f6b6 	.word	0x0800f6b6
 800dc5c:	0800f6c7 	.word	0x0800f6c7

0800dc60 <__pow5mult>:
 800dc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc64:	4615      	mov	r5, r2
 800dc66:	f012 0203 	ands.w	r2, r2, #3
 800dc6a:	4606      	mov	r6, r0
 800dc6c:	460f      	mov	r7, r1
 800dc6e:	d007      	beq.n	800dc80 <__pow5mult+0x20>
 800dc70:	4c25      	ldr	r4, [pc, #148]	; (800dd08 <__pow5mult+0xa8>)
 800dc72:	3a01      	subs	r2, #1
 800dc74:	2300      	movs	r3, #0
 800dc76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc7a:	f7ff fe9d 	bl	800d9b8 <__multadd>
 800dc7e:	4607      	mov	r7, r0
 800dc80:	10ad      	asrs	r5, r5, #2
 800dc82:	d03d      	beq.n	800dd00 <__pow5mult+0xa0>
 800dc84:	69f4      	ldr	r4, [r6, #28]
 800dc86:	b97c      	cbnz	r4, 800dca8 <__pow5mult+0x48>
 800dc88:	2010      	movs	r0, #16
 800dc8a:	f7ff fd7f 	bl	800d78c <malloc>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	61f0      	str	r0, [r6, #28]
 800dc92:	b928      	cbnz	r0, 800dca0 <__pow5mult+0x40>
 800dc94:	4b1d      	ldr	r3, [pc, #116]	; (800dd0c <__pow5mult+0xac>)
 800dc96:	481e      	ldr	r0, [pc, #120]	; (800dd10 <__pow5mult+0xb0>)
 800dc98:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dc9c:	f001 f932 	bl	800ef04 <__assert_func>
 800dca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dca4:	6004      	str	r4, [r0, #0]
 800dca6:	60c4      	str	r4, [r0, #12]
 800dca8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dcac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dcb0:	b94c      	cbnz	r4, 800dcc6 <__pow5mult+0x66>
 800dcb2:	f240 2171 	movw	r1, #625	; 0x271
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f7ff ff12 	bl	800dae0 <__i2b>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	6003      	str	r3, [r0, #0]
 800dcc6:	f04f 0900 	mov.w	r9, #0
 800dcca:	07eb      	lsls	r3, r5, #31
 800dccc:	d50a      	bpl.n	800dce4 <__pow5mult+0x84>
 800dcce:	4639      	mov	r1, r7
 800dcd0:	4622      	mov	r2, r4
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f7ff ff1a 	bl	800db0c <__multiply>
 800dcd8:	4639      	mov	r1, r7
 800dcda:	4680      	mov	r8, r0
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f7ff fe49 	bl	800d974 <_Bfree>
 800dce2:	4647      	mov	r7, r8
 800dce4:	106d      	asrs	r5, r5, #1
 800dce6:	d00b      	beq.n	800dd00 <__pow5mult+0xa0>
 800dce8:	6820      	ldr	r0, [r4, #0]
 800dcea:	b938      	cbnz	r0, 800dcfc <__pow5mult+0x9c>
 800dcec:	4622      	mov	r2, r4
 800dcee:	4621      	mov	r1, r4
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7ff ff0b 	bl	800db0c <__multiply>
 800dcf6:	6020      	str	r0, [r4, #0]
 800dcf8:	f8c0 9000 	str.w	r9, [r0]
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	e7e4      	b.n	800dcca <__pow5mult+0x6a>
 800dd00:	4638      	mov	r0, r7
 800dd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd06:	bf00      	nop
 800dd08:	0800f810 	.word	0x0800f810
 800dd0c:	0800f647 	.word	0x0800f647
 800dd10:	0800f6c7 	.word	0x0800f6c7

0800dd14 <__lshift>:
 800dd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd18:	460c      	mov	r4, r1
 800dd1a:	6849      	ldr	r1, [r1, #4]
 800dd1c:	6923      	ldr	r3, [r4, #16]
 800dd1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd22:	68a3      	ldr	r3, [r4, #8]
 800dd24:	4607      	mov	r7, r0
 800dd26:	4691      	mov	r9, r2
 800dd28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd2c:	f108 0601 	add.w	r6, r8, #1
 800dd30:	42b3      	cmp	r3, r6
 800dd32:	db0b      	blt.n	800dd4c <__lshift+0x38>
 800dd34:	4638      	mov	r0, r7
 800dd36:	f7ff fddd 	bl	800d8f4 <_Balloc>
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	b948      	cbnz	r0, 800dd52 <__lshift+0x3e>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	4b28      	ldr	r3, [pc, #160]	; (800dde4 <__lshift+0xd0>)
 800dd42:	4829      	ldr	r0, [pc, #164]	; (800dde8 <__lshift+0xd4>)
 800dd44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dd48:	f001 f8dc 	bl	800ef04 <__assert_func>
 800dd4c:	3101      	adds	r1, #1
 800dd4e:	005b      	lsls	r3, r3, #1
 800dd50:	e7ee      	b.n	800dd30 <__lshift+0x1c>
 800dd52:	2300      	movs	r3, #0
 800dd54:	f100 0114 	add.w	r1, r0, #20
 800dd58:	f100 0210 	add.w	r2, r0, #16
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	4553      	cmp	r3, sl
 800dd60:	db33      	blt.n	800ddca <__lshift+0xb6>
 800dd62:	6920      	ldr	r0, [r4, #16]
 800dd64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd68:	f104 0314 	add.w	r3, r4, #20
 800dd6c:	f019 091f 	ands.w	r9, r9, #31
 800dd70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd78:	d02b      	beq.n	800ddd2 <__lshift+0xbe>
 800dd7a:	f1c9 0e20 	rsb	lr, r9, #32
 800dd7e:	468a      	mov	sl, r1
 800dd80:	2200      	movs	r2, #0
 800dd82:	6818      	ldr	r0, [r3, #0]
 800dd84:	fa00 f009 	lsl.w	r0, r0, r9
 800dd88:	4310      	orrs	r0, r2
 800dd8a:	f84a 0b04 	str.w	r0, [sl], #4
 800dd8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd92:	459c      	cmp	ip, r3
 800dd94:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd98:	d8f3      	bhi.n	800dd82 <__lshift+0x6e>
 800dd9a:	ebac 0304 	sub.w	r3, ip, r4
 800dd9e:	3b15      	subs	r3, #21
 800dda0:	f023 0303 	bic.w	r3, r3, #3
 800dda4:	3304      	adds	r3, #4
 800dda6:	f104 0015 	add.w	r0, r4, #21
 800ddaa:	4584      	cmp	ip, r0
 800ddac:	bf38      	it	cc
 800ddae:	2304      	movcc	r3, #4
 800ddb0:	50ca      	str	r2, [r1, r3]
 800ddb2:	b10a      	cbz	r2, 800ddb8 <__lshift+0xa4>
 800ddb4:	f108 0602 	add.w	r6, r8, #2
 800ddb8:	3e01      	subs	r6, #1
 800ddba:	4638      	mov	r0, r7
 800ddbc:	612e      	str	r6, [r5, #16]
 800ddbe:	4621      	mov	r1, r4
 800ddc0:	f7ff fdd8 	bl	800d974 <_Bfree>
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddca:	f842 0f04 	str.w	r0, [r2, #4]!
 800ddce:	3301      	adds	r3, #1
 800ddd0:	e7c5      	b.n	800dd5e <__lshift+0x4a>
 800ddd2:	3904      	subs	r1, #4
 800ddd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dddc:	459c      	cmp	ip, r3
 800ddde:	d8f9      	bhi.n	800ddd4 <__lshift+0xc0>
 800dde0:	e7ea      	b.n	800ddb8 <__lshift+0xa4>
 800dde2:	bf00      	nop
 800dde4:	0800f6b6 	.word	0x0800f6b6
 800dde8:	0800f6c7 	.word	0x0800f6c7

0800ddec <__mcmp>:
 800ddec:	b530      	push	{r4, r5, lr}
 800ddee:	6902      	ldr	r2, [r0, #16]
 800ddf0:	690c      	ldr	r4, [r1, #16]
 800ddf2:	1b12      	subs	r2, r2, r4
 800ddf4:	d10e      	bne.n	800de14 <__mcmp+0x28>
 800ddf6:	f100 0314 	add.w	r3, r0, #20
 800ddfa:	3114      	adds	r1, #20
 800ddfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de0c:	42a5      	cmp	r5, r4
 800de0e:	d003      	beq.n	800de18 <__mcmp+0x2c>
 800de10:	d305      	bcc.n	800de1e <__mcmp+0x32>
 800de12:	2201      	movs	r2, #1
 800de14:	4610      	mov	r0, r2
 800de16:	bd30      	pop	{r4, r5, pc}
 800de18:	4283      	cmp	r3, r0
 800de1a:	d3f3      	bcc.n	800de04 <__mcmp+0x18>
 800de1c:	e7fa      	b.n	800de14 <__mcmp+0x28>
 800de1e:	f04f 32ff 	mov.w	r2, #4294967295
 800de22:	e7f7      	b.n	800de14 <__mcmp+0x28>

0800de24 <__mdiff>:
 800de24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de28:	460c      	mov	r4, r1
 800de2a:	4606      	mov	r6, r0
 800de2c:	4611      	mov	r1, r2
 800de2e:	4620      	mov	r0, r4
 800de30:	4690      	mov	r8, r2
 800de32:	f7ff ffdb 	bl	800ddec <__mcmp>
 800de36:	1e05      	subs	r5, r0, #0
 800de38:	d110      	bne.n	800de5c <__mdiff+0x38>
 800de3a:	4629      	mov	r1, r5
 800de3c:	4630      	mov	r0, r6
 800de3e:	f7ff fd59 	bl	800d8f4 <_Balloc>
 800de42:	b930      	cbnz	r0, 800de52 <__mdiff+0x2e>
 800de44:	4b3a      	ldr	r3, [pc, #232]	; (800df30 <__mdiff+0x10c>)
 800de46:	4602      	mov	r2, r0
 800de48:	f240 2137 	movw	r1, #567	; 0x237
 800de4c:	4839      	ldr	r0, [pc, #228]	; (800df34 <__mdiff+0x110>)
 800de4e:	f001 f859 	bl	800ef04 <__assert_func>
 800de52:	2301      	movs	r3, #1
 800de54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5c:	bfa4      	itt	ge
 800de5e:	4643      	movge	r3, r8
 800de60:	46a0      	movge	r8, r4
 800de62:	4630      	mov	r0, r6
 800de64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de68:	bfa6      	itte	ge
 800de6a:	461c      	movge	r4, r3
 800de6c:	2500      	movge	r5, #0
 800de6e:	2501      	movlt	r5, #1
 800de70:	f7ff fd40 	bl	800d8f4 <_Balloc>
 800de74:	b920      	cbnz	r0, 800de80 <__mdiff+0x5c>
 800de76:	4b2e      	ldr	r3, [pc, #184]	; (800df30 <__mdiff+0x10c>)
 800de78:	4602      	mov	r2, r0
 800de7a:	f240 2145 	movw	r1, #581	; 0x245
 800de7e:	e7e5      	b.n	800de4c <__mdiff+0x28>
 800de80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de84:	6926      	ldr	r6, [r4, #16]
 800de86:	60c5      	str	r5, [r0, #12]
 800de88:	f104 0914 	add.w	r9, r4, #20
 800de8c:	f108 0514 	add.w	r5, r8, #20
 800de90:	f100 0e14 	add.w	lr, r0, #20
 800de94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800de98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800de9c:	f108 0210 	add.w	r2, r8, #16
 800dea0:	46f2      	mov	sl, lr
 800dea2:	2100      	movs	r1, #0
 800dea4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dea8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800deac:	fa11 f88b 	uxtah	r8, r1, fp
 800deb0:	b299      	uxth	r1, r3
 800deb2:	0c1b      	lsrs	r3, r3, #16
 800deb4:	eba8 0801 	sub.w	r8, r8, r1
 800deb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800debc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dec0:	fa1f f888 	uxth.w	r8, r8
 800dec4:	1419      	asrs	r1, r3, #16
 800dec6:	454e      	cmp	r6, r9
 800dec8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800decc:	f84a 3b04 	str.w	r3, [sl], #4
 800ded0:	d8e8      	bhi.n	800dea4 <__mdiff+0x80>
 800ded2:	1b33      	subs	r3, r6, r4
 800ded4:	3b15      	subs	r3, #21
 800ded6:	f023 0303 	bic.w	r3, r3, #3
 800deda:	3304      	adds	r3, #4
 800dedc:	3415      	adds	r4, #21
 800dede:	42a6      	cmp	r6, r4
 800dee0:	bf38      	it	cc
 800dee2:	2304      	movcc	r3, #4
 800dee4:	441d      	add	r5, r3
 800dee6:	4473      	add	r3, lr
 800dee8:	469e      	mov	lr, r3
 800deea:	462e      	mov	r6, r5
 800deec:	4566      	cmp	r6, ip
 800deee:	d30e      	bcc.n	800df0e <__mdiff+0xea>
 800def0:	f10c 0203 	add.w	r2, ip, #3
 800def4:	1b52      	subs	r2, r2, r5
 800def6:	f022 0203 	bic.w	r2, r2, #3
 800defa:	3d03      	subs	r5, #3
 800defc:	45ac      	cmp	ip, r5
 800defe:	bf38      	it	cc
 800df00:	2200      	movcc	r2, #0
 800df02:	4413      	add	r3, r2
 800df04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800df08:	b17a      	cbz	r2, 800df2a <__mdiff+0x106>
 800df0a:	6107      	str	r7, [r0, #16]
 800df0c:	e7a4      	b.n	800de58 <__mdiff+0x34>
 800df0e:	f856 8b04 	ldr.w	r8, [r6], #4
 800df12:	fa11 f288 	uxtah	r2, r1, r8
 800df16:	1414      	asrs	r4, r2, #16
 800df18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df1c:	b292      	uxth	r2, r2
 800df1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df22:	f84e 2b04 	str.w	r2, [lr], #4
 800df26:	1421      	asrs	r1, r4, #16
 800df28:	e7e0      	b.n	800deec <__mdiff+0xc8>
 800df2a:	3f01      	subs	r7, #1
 800df2c:	e7ea      	b.n	800df04 <__mdiff+0xe0>
 800df2e:	bf00      	nop
 800df30:	0800f6b6 	.word	0x0800f6b6
 800df34:	0800f6c7 	.word	0x0800f6c7

0800df38 <__d2b>:
 800df38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df3c:	460f      	mov	r7, r1
 800df3e:	2101      	movs	r1, #1
 800df40:	ec59 8b10 	vmov	r8, r9, d0
 800df44:	4616      	mov	r6, r2
 800df46:	f7ff fcd5 	bl	800d8f4 <_Balloc>
 800df4a:	4604      	mov	r4, r0
 800df4c:	b930      	cbnz	r0, 800df5c <__d2b+0x24>
 800df4e:	4602      	mov	r2, r0
 800df50:	4b24      	ldr	r3, [pc, #144]	; (800dfe4 <__d2b+0xac>)
 800df52:	4825      	ldr	r0, [pc, #148]	; (800dfe8 <__d2b+0xb0>)
 800df54:	f240 310f 	movw	r1, #783	; 0x30f
 800df58:	f000 ffd4 	bl	800ef04 <__assert_func>
 800df5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800df60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df64:	bb2d      	cbnz	r5, 800dfb2 <__d2b+0x7a>
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	f1b8 0300 	subs.w	r3, r8, #0
 800df6c:	d026      	beq.n	800dfbc <__d2b+0x84>
 800df6e:	4668      	mov	r0, sp
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	f7ff fd87 	bl	800da84 <__lo0bits>
 800df76:	e9dd 1200 	ldrd	r1, r2, [sp]
 800df7a:	b1e8      	cbz	r0, 800dfb8 <__d2b+0x80>
 800df7c:	f1c0 0320 	rsb	r3, r0, #32
 800df80:	fa02 f303 	lsl.w	r3, r2, r3
 800df84:	430b      	orrs	r3, r1
 800df86:	40c2      	lsrs	r2, r0
 800df88:	6163      	str	r3, [r4, #20]
 800df8a:	9201      	str	r2, [sp, #4]
 800df8c:	9b01      	ldr	r3, [sp, #4]
 800df8e:	61a3      	str	r3, [r4, #24]
 800df90:	2b00      	cmp	r3, #0
 800df92:	bf14      	ite	ne
 800df94:	2202      	movne	r2, #2
 800df96:	2201      	moveq	r2, #1
 800df98:	6122      	str	r2, [r4, #16]
 800df9a:	b1bd      	cbz	r5, 800dfcc <__d2b+0x94>
 800df9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dfa0:	4405      	add	r5, r0
 800dfa2:	603d      	str	r5, [r7, #0]
 800dfa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dfa8:	6030      	str	r0, [r6, #0]
 800dfaa:	4620      	mov	r0, r4
 800dfac:	b003      	add	sp, #12
 800dfae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dfb6:	e7d6      	b.n	800df66 <__d2b+0x2e>
 800dfb8:	6161      	str	r1, [r4, #20]
 800dfba:	e7e7      	b.n	800df8c <__d2b+0x54>
 800dfbc:	a801      	add	r0, sp, #4
 800dfbe:	f7ff fd61 	bl	800da84 <__lo0bits>
 800dfc2:	9b01      	ldr	r3, [sp, #4]
 800dfc4:	6163      	str	r3, [r4, #20]
 800dfc6:	3020      	adds	r0, #32
 800dfc8:	2201      	movs	r2, #1
 800dfca:	e7e5      	b.n	800df98 <__d2b+0x60>
 800dfcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dfd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dfd4:	6038      	str	r0, [r7, #0]
 800dfd6:	6918      	ldr	r0, [r3, #16]
 800dfd8:	f7ff fd34 	bl	800da44 <__hi0bits>
 800dfdc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dfe0:	e7e2      	b.n	800dfa8 <__d2b+0x70>
 800dfe2:	bf00      	nop
 800dfe4:	0800f6b6 	.word	0x0800f6b6
 800dfe8:	0800f6c7 	.word	0x0800f6c7

0800dfec <__ssputs_r>:
 800dfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff0:	688e      	ldr	r6, [r1, #8]
 800dff2:	461f      	mov	r7, r3
 800dff4:	42be      	cmp	r6, r7
 800dff6:	680b      	ldr	r3, [r1, #0]
 800dff8:	4682      	mov	sl, r0
 800dffa:	460c      	mov	r4, r1
 800dffc:	4690      	mov	r8, r2
 800dffe:	d82c      	bhi.n	800e05a <__ssputs_r+0x6e>
 800e000:	898a      	ldrh	r2, [r1, #12]
 800e002:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e006:	d026      	beq.n	800e056 <__ssputs_r+0x6a>
 800e008:	6965      	ldr	r5, [r4, #20]
 800e00a:	6909      	ldr	r1, [r1, #16]
 800e00c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e010:	eba3 0901 	sub.w	r9, r3, r1
 800e014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e018:	1c7b      	adds	r3, r7, #1
 800e01a:	444b      	add	r3, r9
 800e01c:	106d      	asrs	r5, r5, #1
 800e01e:	429d      	cmp	r5, r3
 800e020:	bf38      	it	cc
 800e022:	461d      	movcc	r5, r3
 800e024:	0553      	lsls	r3, r2, #21
 800e026:	d527      	bpl.n	800e078 <__ssputs_r+0x8c>
 800e028:	4629      	mov	r1, r5
 800e02a:	f7ff fbd7 	bl	800d7dc <_malloc_r>
 800e02e:	4606      	mov	r6, r0
 800e030:	b360      	cbz	r0, 800e08c <__ssputs_r+0xa0>
 800e032:	6921      	ldr	r1, [r4, #16]
 800e034:	464a      	mov	r2, r9
 800e036:	f7fe fcd3 	bl	800c9e0 <memcpy>
 800e03a:	89a3      	ldrh	r3, [r4, #12]
 800e03c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e044:	81a3      	strh	r3, [r4, #12]
 800e046:	6126      	str	r6, [r4, #16]
 800e048:	6165      	str	r5, [r4, #20]
 800e04a:	444e      	add	r6, r9
 800e04c:	eba5 0509 	sub.w	r5, r5, r9
 800e050:	6026      	str	r6, [r4, #0]
 800e052:	60a5      	str	r5, [r4, #8]
 800e054:	463e      	mov	r6, r7
 800e056:	42be      	cmp	r6, r7
 800e058:	d900      	bls.n	800e05c <__ssputs_r+0x70>
 800e05a:	463e      	mov	r6, r7
 800e05c:	6820      	ldr	r0, [r4, #0]
 800e05e:	4632      	mov	r2, r6
 800e060:	4641      	mov	r1, r8
 800e062:	f000 ff02 	bl	800ee6a <memmove>
 800e066:	68a3      	ldr	r3, [r4, #8]
 800e068:	1b9b      	subs	r3, r3, r6
 800e06a:	60a3      	str	r3, [r4, #8]
 800e06c:	6823      	ldr	r3, [r4, #0]
 800e06e:	4433      	add	r3, r6
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	2000      	movs	r0, #0
 800e074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e078:	462a      	mov	r2, r5
 800e07a:	f000 ff89 	bl	800ef90 <_realloc_r>
 800e07e:	4606      	mov	r6, r0
 800e080:	2800      	cmp	r0, #0
 800e082:	d1e0      	bne.n	800e046 <__ssputs_r+0x5a>
 800e084:	6921      	ldr	r1, [r4, #16]
 800e086:	4650      	mov	r0, sl
 800e088:	f7ff fb34 	bl	800d6f4 <_free_r>
 800e08c:	230c      	movs	r3, #12
 800e08e:	f8ca 3000 	str.w	r3, [sl]
 800e092:	89a3      	ldrh	r3, [r4, #12]
 800e094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e098:	81a3      	strh	r3, [r4, #12]
 800e09a:	f04f 30ff 	mov.w	r0, #4294967295
 800e09e:	e7e9      	b.n	800e074 <__ssputs_r+0x88>

0800e0a0 <_svfiprintf_r>:
 800e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	4698      	mov	r8, r3
 800e0a6:	898b      	ldrh	r3, [r1, #12]
 800e0a8:	061b      	lsls	r3, r3, #24
 800e0aa:	b09d      	sub	sp, #116	; 0x74
 800e0ac:	4607      	mov	r7, r0
 800e0ae:	460d      	mov	r5, r1
 800e0b0:	4614      	mov	r4, r2
 800e0b2:	d50e      	bpl.n	800e0d2 <_svfiprintf_r+0x32>
 800e0b4:	690b      	ldr	r3, [r1, #16]
 800e0b6:	b963      	cbnz	r3, 800e0d2 <_svfiprintf_r+0x32>
 800e0b8:	2140      	movs	r1, #64	; 0x40
 800e0ba:	f7ff fb8f 	bl	800d7dc <_malloc_r>
 800e0be:	6028      	str	r0, [r5, #0]
 800e0c0:	6128      	str	r0, [r5, #16]
 800e0c2:	b920      	cbnz	r0, 800e0ce <_svfiprintf_r+0x2e>
 800e0c4:	230c      	movs	r3, #12
 800e0c6:	603b      	str	r3, [r7, #0]
 800e0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0cc:	e0d0      	b.n	800e270 <_svfiprintf_r+0x1d0>
 800e0ce:	2340      	movs	r3, #64	; 0x40
 800e0d0:	616b      	str	r3, [r5, #20]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d6:	2320      	movs	r3, #32
 800e0d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0e0:	2330      	movs	r3, #48	; 0x30
 800e0e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e288 <_svfiprintf_r+0x1e8>
 800e0e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0ea:	f04f 0901 	mov.w	r9, #1
 800e0ee:	4623      	mov	r3, r4
 800e0f0:	469a      	mov	sl, r3
 800e0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0f6:	b10a      	cbz	r2, 800e0fc <_svfiprintf_r+0x5c>
 800e0f8:	2a25      	cmp	r2, #37	; 0x25
 800e0fa:	d1f9      	bne.n	800e0f0 <_svfiprintf_r+0x50>
 800e0fc:	ebba 0b04 	subs.w	fp, sl, r4
 800e100:	d00b      	beq.n	800e11a <_svfiprintf_r+0x7a>
 800e102:	465b      	mov	r3, fp
 800e104:	4622      	mov	r2, r4
 800e106:	4629      	mov	r1, r5
 800e108:	4638      	mov	r0, r7
 800e10a:	f7ff ff6f 	bl	800dfec <__ssputs_r>
 800e10e:	3001      	adds	r0, #1
 800e110:	f000 80a9 	beq.w	800e266 <_svfiprintf_r+0x1c6>
 800e114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e116:	445a      	add	r2, fp
 800e118:	9209      	str	r2, [sp, #36]	; 0x24
 800e11a:	f89a 3000 	ldrb.w	r3, [sl]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f000 80a1 	beq.w	800e266 <_svfiprintf_r+0x1c6>
 800e124:	2300      	movs	r3, #0
 800e126:	f04f 32ff 	mov.w	r2, #4294967295
 800e12a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e12e:	f10a 0a01 	add.w	sl, sl, #1
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	9307      	str	r3, [sp, #28]
 800e136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e13a:	931a      	str	r3, [sp, #104]	; 0x68
 800e13c:	4654      	mov	r4, sl
 800e13e:	2205      	movs	r2, #5
 800e140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e144:	4850      	ldr	r0, [pc, #320]	; (800e288 <_svfiprintf_r+0x1e8>)
 800e146:	f7f2 f843 	bl	80001d0 <memchr>
 800e14a:	9a04      	ldr	r2, [sp, #16]
 800e14c:	b9d8      	cbnz	r0, 800e186 <_svfiprintf_r+0xe6>
 800e14e:	06d0      	lsls	r0, r2, #27
 800e150:	bf44      	itt	mi
 800e152:	2320      	movmi	r3, #32
 800e154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e158:	0711      	lsls	r1, r2, #28
 800e15a:	bf44      	itt	mi
 800e15c:	232b      	movmi	r3, #43	; 0x2b
 800e15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e162:	f89a 3000 	ldrb.w	r3, [sl]
 800e166:	2b2a      	cmp	r3, #42	; 0x2a
 800e168:	d015      	beq.n	800e196 <_svfiprintf_r+0xf6>
 800e16a:	9a07      	ldr	r2, [sp, #28]
 800e16c:	4654      	mov	r4, sl
 800e16e:	2000      	movs	r0, #0
 800e170:	f04f 0c0a 	mov.w	ip, #10
 800e174:	4621      	mov	r1, r4
 800e176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e17a:	3b30      	subs	r3, #48	; 0x30
 800e17c:	2b09      	cmp	r3, #9
 800e17e:	d94d      	bls.n	800e21c <_svfiprintf_r+0x17c>
 800e180:	b1b0      	cbz	r0, 800e1b0 <_svfiprintf_r+0x110>
 800e182:	9207      	str	r2, [sp, #28]
 800e184:	e014      	b.n	800e1b0 <_svfiprintf_r+0x110>
 800e186:	eba0 0308 	sub.w	r3, r0, r8
 800e18a:	fa09 f303 	lsl.w	r3, r9, r3
 800e18e:	4313      	orrs	r3, r2
 800e190:	9304      	str	r3, [sp, #16]
 800e192:	46a2      	mov	sl, r4
 800e194:	e7d2      	b.n	800e13c <_svfiprintf_r+0x9c>
 800e196:	9b03      	ldr	r3, [sp, #12]
 800e198:	1d19      	adds	r1, r3, #4
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	9103      	str	r1, [sp, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	bfbb      	ittet	lt
 800e1a2:	425b      	neglt	r3, r3
 800e1a4:	f042 0202 	orrlt.w	r2, r2, #2
 800e1a8:	9307      	strge	r3, [sp, #28]
 800e1aa:	9307      	strlt	r3, [sp, #28]
 800e1ac:	bfb8      	it	lt
 800e1ae:	9204      	strlt	r2, [sp, #16]
 800e1b0:	7823      	ldrb	r3, [r4, #0]
 800e1b2:	2b2e      	cmp	r3, #46	; 0x2e
 800e1b4:	d10c      	bne.n	800e1d0 <_svfiprintf_r+0x130>
 800e1b6:	7863      	ldrb	r3, [r4, #1]
 800e1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1ba:	d134      	bne.n	800e226 <_svfiprintf_r+0x186>
 800e1bc:	9b03      	ldr	r3, [sp, #12]
 800e1be:	1d1a      	adds	r2, r3, #4
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	9203      	str	r2, [sp, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	bfb8      	it	lt
 800e1c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1cc:	3402      	adds	r4, #2
 800e1ce:	9305      	str	r3, [sp, #20]
 800e1d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e298 <_svfiprintf_r+0x1f8>
 800e1d4:	7821      	ldrb	r1, [r4, #0]
 800e1d6:	2203      	movs	r2, #3
 800e1d8:	4650      	mov	r0, sl
 800e1da:	f7f1 fff9 	bl	80001d0 <memchr>
 800e1de:	b138      	cbz	r0, 800e1f0 <_svfiprintf_r+0x150>
 800e1e0:	9b04      	ldr	r3, [sp, #16]
 800e1e2:	eba0 000a 	sub.w	r0, r0, sl
 800e1e6:	2240      	movs	r2, #64	; 0x40
 800e1e8:	4082      	lsls	r2, r0
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	3401      	adds	r4, #1
 800e1ee:	9304      	str	r3, [sp, #16]
 800e1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1f4:	4825      	ldr	r0, [pc, #148]	; (800e28c <_svfiprintf_r+0x1ec>)
 800e1f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1fa:	2206      	movs	r2, #6
 800e1fc:	f7f1 ffe8 	bl	80001d0 <memchr>
 800e200:	2800      	cmp	r0, #0
 800e202:	d038      	beq.n	800e276 <_svfiprintf_r+0x1d6>
 800e204:	4b22      	ldr	r3, [pc, #136]	; (800e290 <_svfiprintf_r+0x1f0>)
 800e206:	bb1b      	cbnz	r3, 800e250 <_svfiprintf_r+0x1b0>
 800e208:	9b03      	ldr	r3, [sp, #12]
 800e20a:	3307      	adds	r3, #7
 800e20c:	f023 0307 	bic.w	r3, r3, #7
 800e210:	3308      	adds	r3, #8
 800e212:	9303      	str	r3, [sp, #12]
 800e214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e216:	4433      	add	r3, r6
 800e218:	9309      	str	r3, [sp, #36]	; 0x24
 800e21a:	e768      	b.n	800e0ee <_svfiprintf_r+0x4e>
 800e21c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e220:	460c      	mov	r4, r1
 800e222:	2001      	movs	r0, #1
 800e224:	e7a6      	b.n	800e174 <_svfiprintf_r+0xd4>
 800e226:	2300      	movs	r3, #0
 800e228:	3401      	adds	r4, #1
 800e22a:	9305      	str	r3, [sp, #20]
 800e22c:	4619      	mov	r1, r3
 800e22e:	f04f 0c0a 	mov.w	ip, #10
 800e232:	4620      	mov	r0, r4
 800e234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e238:	3a30      	subs	r2, #48	; 0x30
 800e23a:	2a09      	cmp	r2, #9
 800e23c:	d903      	bls.n	800e246 <_svfiprintf_r+0x1a6>
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d0c6      	beq.n	800e1d0 <_svfiprintf_r+0x130>
 800e242:	9105      	str	r1, [sp, #20]
 800e244:	e7c4      	b.n	800e1d0 <_svfiprintf_r+0x130>
 800e246:	fb0c 2101 	mla	r1, ip, r1, r2
 800e24a:	4604      	mov	r4, r0
 800e24c:	2301      	movs	r3, #1
 800e24e:	e7f0      	b.n	800e232 <_svfiprintf_r+0x192>
 800e250:	ab03      	add	r3, sp, #12
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	462a      	mov	r2, r5
 800e256:	4b0f      	ldr	r3, [pc, #60]	; (800e294 <_svfiprintf_r+0x1f4>)
 800e258:	a904      	add	r1, sp, #16
 800e25a:	4638      	mov	r0, r7
 800e25c:	f7fd fd24 	bl	800bca8 <_printf_float>
 800e260:	1c42      	adds	r2, r0, #1
 800e262:	4606      	mov	r6, r0
 800e264:	d1d6      	bne.n	800e214 <_svfiprintf_r+0x174>
 800e266:	89ab      	ldrh	r3, [r5, #12]
 800e268:	065b      	lsls	r3, r3, #25
 800e26a:	f53f af2d 	bmi.w	800e0c8 <_svfiprintf_r+0x28>
 800e26e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e270:	b01d      	add	sp, #116	; 0x74
 800e272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e276:	ab03      	add	r3, sp, #12
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	462a      	mov	r2, r5
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <_svfiprintf_r+0x1f4>)
 800e27e:	a904      	add	r1, sp, #16
 800e280:	4638      	mov	r0, r7
 800e282:	f7fd ffb5 	bl	800c1f0 <_printf_i>
 800e286:	e7eb      	b.n	800e260 <_svfiprintf_r+0x1c0>
 800e288:	0800f81c 	.word	0x0800f81c
 800e28c:	0800f826 	.word	0x0800f826
 800e290:	0800bca9 	.word	0x0800bca9
 800e294:	0800dfed 	.word	0x0800dfed
 800e298:	0800f822 	.word	0x0800f822

0800e29c <_sungetc_r>:
 800e29c:	b538      	push	{r3, r4, r5, lr}
 800e29e:	1c4b      	adds	r3, r1, #1
 800e2a0:	4614      	mov	r4, r2
 800e2a2:	d103      	bne.n	800e2ac <_sungetc_r+0x10>
 800e2a4:	f04f 35ff 	mov.w	r5, #4294967295
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	bd38      	pop	{r3, r4, r5, pc}
 800e2ac:	8993      	ldrh	r3, [r2, #12]
 800e2ae:	f023 0320 	bic.w	r3, r3, #32
 800e2b2:	8193      	strh	r3, [r2, #12]
 800e2b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2b6:	6852      	ldr	r2, [r2, #4]
 800e2b8:	b2cd      	uxtb	r5, r1
 800e2ba:	b18b      	cbz	r3, 800e2e0 <_sungetc_r+0x44>
 800e2bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	dd08      	ble.n	800e2d4 <_sungetc_r+0x38>
 800e2c2:	6823      	ldr	r3, [r4, #0]
 800e2c4:	1e5a      	subs	r2, r3, #1
 800e2c6:	6022      	str	r2, [r4, #0]
 800e2c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e2cc:	6863      	ldr	r3, [r4, #4]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	6063      	str	r3, [r4, #4]
 800e2d2:	e7e9      	b.n	800e2a8 <_sungetc_r+0xc>
 800e2d4:	4621      	mov	r1, r4
 800e2d6:	f000 fd8e 	bl	800edf6 <__submore>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d0f1      	beq.n	800e2c2 <_sungetc_r+0x26>
 800e2de:	e7e1      	b.n	800e2a4 <_sungetc_r+0x8>
 800e2e0:	6921      	ldr	r1, [r4, #16]
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	b151      	cbz	r1, 800e2fc <_sungetc_r+0x60>
 800e2e6:	4299      	cmp	r1, r3
 800e2e8:	d208      	bcs.n	800e2fc <_sungetc_r+0x60>
 800e2ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e2ee:	42a9      	cmp	r1, r5
 800e2f0:	d104      	bne.n	800e2fc <_sungetc_r+0x60>
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	3201      	adds	r2, #1
 800e2f6:	6023      	str	r3, [r4, #0]
 800e2f8:	6062      	str	r2, [r4, #4]
 800e2fa:	e7d5      	b.n	800e2a8 <_sungetc_r+0xc>
 800e2fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e304:	6363      	str	r3, [r4, #52]	; 0x34
 800e306:	2303      	movs	r3, #3
 800e308:	63a3      	str	r3, [r4, #56]	; 0x38
 800e30a:	4623      	mov	r3, r4
 800e30c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e310:	6023      	str	r3, [r4, #0]
 800e312:	2301      	movs	r3, #1
 800e314:	e7dc      	b.n	800e2d0 <_sungetc_r+0x34>

0800e316 <__ssrefill_r>:
 800e316:	b510      	push	{r4, lr}
 800e318:	460c      	mov	r4, r1
 800e31a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e31c:	b169      	cbz	r1, 800e33a <__ssrefill_r+0x24>
 800e31e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e322:	4299      	cmp	r1, r3
 800e324:	d001      	beq.n	800e32a <__ssrefill_r+0x14>
 800e326:	f7ff f9e5 	bl	800d6f4 <_free_r>
 800e32a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e32c:	6063      	str	r3, [r4, #4]
 800e32e:	2000      	movs	r0, #0
 800e330:	6360      	str	r0, [r4, #52]	; 0x34
 800e332:	b113      	cbz	r3, 800e33a <__ssrefill_r+0x24>
 800e334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e336:	6023      	str	r3, [r4, #0]
 800e338:	bd10      	pop	{r4, pc}
 800e33a:	6923      	ldr	r3, [r4, #16]
 800e33c:	6023      	str	r3, [r4, #0]
 800e33e:	2300      	movs	r3, #0
 800e340:	6063      	str	r3, [r4, #4]
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	f043 0320 	orr.w	r3, r3, #32
 800e348:	81a3      	strh	r3, [r4, #12]
 800e34a:	f04f 30ff 	mov.w	r0, #4294967295
 800e34e:	e7f3      	b.n	800e338 <__ssrefill_r+0x22>

0800e350 <__ssvfiscanf_r>:
 800e350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e354:	460c      	mov	r4, r1
 800e356:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e35a:	2100      	movs	r1, #0
 800e35c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e360:	49a6      	ldr	r1, [pc, #664]	; (800e5fc <__ssvfiscanf_r+0x2ac>)
 800e362:	91a0      	str	r1, [sp, #640]	; 0x280
 800e364:	f10d 0804 	add.w	r8, sp, #4
 800e368:	49a5      	ldr	r1, [pc, #660]	; (800e600 <__ssvfiscanf_r+0x2b0>)
 800e36a:	4fa6      	ldr	r7, [pc, #664]	; (800e604 <__ssvfiscanf_r+0x2b4>)
 800e36c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e608 <__ssvfiscanf_r+0x2b8>
 800e370:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e374:	4606      	mov	r6, r0
 800e376:	91a1      	str	r1, [sp, #644]	; 0x284
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	7813      	ldrb	r3, [r2, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 815a 	beq.w	800e636 <__ssvfiscanf_r+0x2e6>
 800e382:	5cf9      	ldrb	r1, [r7, r3]
 800e384:	f011 0108 	ands.w	r1, r1, #8
 800e388:	f102 0501 	add.w	r5, r2, #1
 800e38c:	d019      	beq.n	800e3c2 <__ssvfiscanf_r+0x72>
 800e38e:	6863      	ldr	r3, [r4, #4]
 800e390:	2b00      	cmp	r3, #0
 800e392:	dd0f      	ble.n	800e3b4 <__ssvfiscanf_r+0x64>
 800e394:	6823      	ldr	r3, [r4, #0]
 800e396:	781a      	ldrb	r2, [r3, #0]
 800e398:	5cba      	ldrb	r2, [r7, r2]
 800e39a:	0712      	lsls	r2, r2, #28
 800e39c:	d401      	bmi.n	800e3a2 <__ssvfiscanf_r+0x52>
 800e39e:	462a      	mov	r2, r5
 800e3a0:	e7eb      	b.n	800e37a <__ssvfiscanf_r+0x2a>
 800e3a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e3a4:	3201      	adds	r2, #1
 800e3a6:	9245      	str	r2, [sp, #276]	; 0x114
 800e3a8:	6862      	ldr	r2, [r4, #4]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	3a01      	subs	r2, #1
 800e3ae:	6062      	str	r2, [r4, #4]
 800e3b0:	6023      	str	r3, [r4, #0]
 800e3b2:	e7ec      	b.n	800e38e <__ssvfiscanf_r+0x3e>
 800e3b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	4798      	blx	r3
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	d0e9      	beq.n	800e394 <__ssvfiscanf_r+0x44>
 800e3c0:	e7ed      	b.n	800e39e <__ssvfiscanf_r+0x4e>
 800e3c2:	2b25      	cmp	r3, #37	; 0x25
 800e3c4:	d012      	beq.n	800e3ec <__ssvfiscanf_r+0x9c>
 800e3c6:	469a      	mov	sl, r3
 800e3c8:	6863      	ldr	r3, [r4, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f340 8091 	ble.w	800e4f2 <__ssvfiscanf_r+0x1a2>
 800e3d0:	6822      	ldr	r2, [r4, #0]
 800e3d2:	7813      	ldrb	r3, [r2, #0]
 800e3d4:	4553      	cmp	r3, sl
 800e3d6:	f040 812e 	bne.w	800e636 <__ssvfiscanf_r+0x2e6>
 800e3da:	6863      	ldr	r3, [r4, #4]
 800e3dc:	3b01      	subs	r3, #1
 800e3de:	6063      	str	r3, [r4, #4]
 800e3e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e3e2:	3201      	adds	r2, #1
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	6022      	str	r2, [r4, #0]
 800e3e8:	9345      	str	r3, [sp, #276]	; 0x114
 800e3ea:	e7d8      	b.n	800e39e <__ssvfiscanf_r+0x4e>
 800e3ec:	9141      	str	r1, [sp, #260]	; 0x104
 800e3ee:	9143      	str	r1, [sp, #268]	; 0x10c
 800e3f0:	7853      	ldrb	r3, [r2, #1]
 800e3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800e3f4:	bf02      	ittt	eq
 800e3f6:	2310      	moveq	r3, #16
 800e3f8:	1c95      	addeq	r5, r2, #2
 800e3fa:	9341      	streq	r3, [sp, #260]	; 0x104
 800e3fc:	220a      	movs	r2, #10
 800e3fe:	46aa      	mov	sl, r5
 800e400:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e404:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e408:	2b09      	cmp	r3, #9
 800e40a:	d91c      	bls.n	800e446 <__ssvfiscanf_r+0xf6>
 800e40c:	487e      	ldr	r0, [pc, #504]	; (800e608 <__ssvfiscanf_r+0x2b8>)
 800e40e:	2203      	movs	r2, #3
 800e410:	f7f1 fede 	bl	80001d0 <memchr>
 800e414:	b138      	cbz	r0, 800e426 <__ssvfiscanf_r+0xd6>
 800e416:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e418:	eba0 0009 	sub.w	r0, r0, r9
 800e41c:	2301      	movs	r3, #1
 800e41e:	4083      	lsls	r3, r0
 800e420:	4313      	orrs	r3, r2
 800e422:	9341      	str	r3, [sp, #260]	; 0x104
 800e424:	4655      	mov	r5, sl
 800e426:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e42a:	2b78      	cmp	r3, #120	; 0x78
 800e42c:	d806      	bhi.n	800e43c <__ssvfiscanf_r+0xec>
 800e42e:	2b57      	cmp	r3, #87	; 0x57
 800e430:	d810      	bhi.n	800e454 <__ssvfiscanf_r+0x104>
 800e432:	2b25      	cmp	r3, #37	; 0x25
 800e434:	d0c7      	beq.n	800e3c6 <__ssvfiscanf_r+0x76>
 800e436:	d857      	bhi.n	800e4e8 <__ssvfiscanf_r+0x198>
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d065      	beq.n	800e508 <__ssvfiscanf_r+0x1b8>
 800e43c:	2303      	movs	r3, #3
 800e43e:	9347      	str	r3, [sp, #284]	; 0x11c
 800e440:	230a      	movs	r3, #10
 800e442:	9342      	str	r3, [sp, #264]	; 0x108
 800e444:	e076      	b.n	800e534 <__ssvfiscanf_r+0x1e4>
 800e446:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e448:	fb02 1103 	mla	r1, r2, r3, r1
 800e44c:	3930      	subs	r1, #48	; 0x30
 800e44e:	9143      	str	r1, [sp, #268]	; 0x10c
 800e450:	4655      	mov	r5, sl
 800e452:	e7d4      	b.n	800e3fe <__ssvfiscanf_r+0xae>
 800e454:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e458:	2a20      	cmp	r2, #32
 800e45a:	d8ef      	bhi.n	800e43c <__ssvfiscanf_r+0xec>
 800e45c:	a101      	add	r1, pc, #4	; (adr r1, 800e464 <__ssvfiscanf_r+0x114>)
 800e45e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e462:	bf00      	nop
 800e464:	0800e517 	.word	0x0800e517
 800e468:	0800e43d 	.word	0x0800e43d
 800e46c:	0800e43d 	.word	0x0800e43d
 800e470:	0800e575 	.word	0x0800e575
 800e474:	0800e43d 	.word	0x0800e43d
 800e478:	0800e43d 	.word	0x0800e43d
 800e47c:	0800e43d 	.word	0x0800e43d
 800e480:	0800e43d 	.word	0x0800e43d
 800e484:	0800e43d 	.word	0x0800e43d
 800e488:	0800e43d 	.word	0x0800e43d
 800e48c:	0800e43d 	.word	0x0800e43d
 800e490:	0800e58b 	.word	0x0800e58b
 800e494:	0800e571 	.word	0x0800e571
 800e498:	0800e4ef 	.word	0x0800e4ef
 800e49c:	0800e4ef 	.word	0x0800e4ef
 800e4a0:	0800e4ef 	.word	0x0800e4ef
 800e4a4:	0800e43d 	.word	0x0800e43d
 800e4a8:	0800e52d 	.word	0x0800e52d
 800e4ac:	0800e43d 	.word	0x0800e43d
 800e4b0:	0800e43d 	.word	0x0800e43d
 800e4b4:	0800e43d 	.word	0x0800e43d
 800e4b8:	0800e43d 	.word	0x0800e43d
 800e4bc:	0800e59b 	.word	0x0800e59b
 800e4c0:	0800e569 	.word	0x0800e569
 800e4c4:	0800e50f 	.word	0x0800e50f
 800e4c8:	0800e43d 	.word	0x0800e43d
 800e4cc:	0800e43d 	.word	0x0800e43d
 800e4d0:	0800e597 	.word	0x0800e597
 800e4d4:	0800e43d 	.word	0x0800e43d
 800e4d8:	0800e571 	.word	0x0800e571
 800e4dc:	0800e43d 	.word	0x0800e43d
 800e4e0:	0800e43d 	.word	0x0800e43d
 800e4e4:	0800e517 	.word	0x0800e517
 800e4e8:	3b45      	subs	r3, #69	; 0x45
 800e4ea:	2b02      	cmp	r3, #2
 800e4ec:	d8a6      	bhi.n	800e43c <__ssvfiscanf_r+0xec>
 800e4ee:	2305      	movs	r3, #5
 800e4f0:	e01f      	b.n	800e532 <__ssvfiscanf_r+0x1e2>
 800e4f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e4f4:	4621      	mov	r1, r4
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	4798      	blx	r3
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	f43f af68 	beq.w	800e3d0 <__ssvfiscanf_r+0x80>
 800e500:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e502:	2800      	cmp	r0, #0
 800e504:	f040 808d 	bne.w	800e622 <__ssvfiscanf_r+0x2d2>
 800e508:	f04f 30ff 	mov.w	r0, #4294967295
 800e50c:	e08f      	b.n	800e62e <__ssvfiscanf_r+0x2de>
 800e50e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e510:	f042 0220 	orr.w	r2, r2, #32
 800e514:	9241      	str	r2, [sp, #260]	; 0x104
 800e516:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e51c:	9241      	str	r2, [sp, #260]	; 0x104
 800e51e:	2210      	movs	r2, #16
 800e520:	2b6f      	cmp	r3, #111	; 0x6f
 800e522:	9242      	str	r2, [sp, #264]	; 0x108
 800e524:	bf34      	ite	cc
 800e526:	2303      	movcc	r3, #3
 800e528:	2304      	movcs	r3, #4
 800e52a:	e002      	b.n	800e532 <__ssvfiscanf_r+0x1e2>
 800e52c:	2300      	movs	r3, #0
 800e52e:	9342      	str	r3, [sp, #264]	; 0x108
 800e530:	2303      	movs	r3, #3
 800e532:	9347      	str	r3, [sp, #284]	; 0x11c
 800e534:	6863      	ldr	r3, [r4, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	dd3d      	ble.n	800e5b6 <__ssvfiscanf_r+0x266>
 800e53a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e53c:	0659      	lsls	r1, r3, #25
 800e53e:	d404      	bmi.n	800e54a <__ssvfiscanf_r+0x1fa>
 800e540:	6823      	ldr	r3, [r4, #0]
 800e542:	781a      	ldrb	r2, [r3, #0]
 800e544:	5cba      	ldrb	r2, [r7, r2]
 800e546:	0712      	lsls	r2, r2, #28
 800e548:	d43c      	bmi.n	800e5c4 <__ssvfiscanf_r+0x274>
 800e54a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	dc4b      	bgt.n	800e5e8 <__ssvfiscanf_r+0x298>
 800e550:	466b      	mov	r3, sp
 800e552:	4622      	mov	r2, r4
 800e554:	a941      	add	r1, sp, #260	; 0x104
 800e556:	4630      	mov	r0, r6
 800e558:	f000 f9b6 	bl	800e8c8 <_scanf_chars>
 800e55c:	2801      	cmp	r0, #1
 800e55e:	d06a      	beq.n	800e636 <__ssvfiscanf_r+0x2e6>
 800e560:	2802      	cmp	r0, #2
 800e562:	f47f af1c 	bne.w	800e39e <__ssvfiscanf_r+0x4e>
 800e566:	e7cb      	b.n	800e500 <__ssvfiscanf_r+0x1b0>
 800e568:	2308      	movs	r3, #8
 800e56a:	9342      	str	r3, [sp, #264]	; 0x108
 800e56c:	2304      	movs	r3, #4
 800e56e:	e7e0      	b.n	800e532 <__ssvfiscanf_r+0x1e2>
 800e570:	220a      	movs	r2, #10
 800e572:	e7d5      	b.n	800e520 <__ssvfiscanf_r+0x1d0>
 800e574:	4629      	mov	r1, r5
 800e576:	4640      	mov	r0, r8
 800e578:	f000 fc04 	bl	800ed84 <__sccl>
 800e57c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e582:	9341      	str	r3, [sp, #260]	; 0x104
 800e584:	4605      	mov	r5, r0
 800e586:	2301      	movs	r3, #1
 800e588:	e7d3      	b.n	800e532 <__ssvfiscanf_r+0x1e2>
 800e58a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e590:	9341      	str	r3, [sp, #260]	; 0x104
 800e592:	2300      	movs	r3, #0
 800e594:	e7cd      	b.n	800e532 <__ssvfiscanf_r+0x1e2>
 800e596:	2302      	movs	r3, #2
 800e598:	e7cb      	b.n	800e532 <__ssvfiscanf_r+0x1e2>
 800e59a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e59c:	06c3      	lsls	r3, r0, #27
 800e59e:	f53f aefe 	bmi.w	800e39e <__ssvfiscanf_r+0x4e>
 800e5a2:	9b00      	ldr	r3, [sp, #0]
 800e5a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5a6:	1d19      	adds	r1, r3, #4
 800e5a8:	9100      	str	r1, [sp, #0]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	07c0      	lsls	r0, r0, #31
 800e5ae:	bf4c      	ite	mi
 800e5b0:	801a      	strhmi	r2, [r3, #0]
 800e5b2:	601a      	strpl	r2, [r3, #0]
 800e5b4:	e6f3      	b.n	800e39e <__ssvfiscanf_r+0x4e>
 800e5b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5b8:	4621      	mov	r1, r4
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	4798      	blx	r3
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d0bb      	beq.n	800e53a <__ssvfiscanf_r+0x1ea>
 800e5c2:	e79d      	b.n	800e500 <__ssvfiscanf_r+0x1b0>
 800e5c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5c6:	3201      	adds	r2, #1
 800e5c8:	9245      	str	r2, [sp, #276]	; 0x114
 800e5ca:	6862      	ldr	r2, [r4, #4]
 800e5cc:	3a01      	subs	r2, #1
 800e5ce:	2a00      	cmp	r2, #0
 800e5d0:	6062      	str	r2, [r4, #4]
 800e5d2:	dd02      	ble.n	800e5da <__ssvfiscanf_r+0x28a>
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	6023      	str	r3, [r4, #0]
 800e5d8:	e7b2      	b.n	800e540 <__ssvfiscanf_r+0x1f0>
 800e5da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5dc:	4621      	mov	r1, r4
 800e5de:	4630      	mov	r0, r6
 800e5e0:	4798      	blx	r3
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	d0ac      	beq.n	800e540 <__ssvfiscanf_r+0x1f0>
 800e5e6:	e78b      	b.n	800e500 <__ssvfiscanf_r+0x1b0>
 800e5e8:	2b04      	cmp	r3, #4
 800e5ea:	dc0f      	bgt.n	800e60c <__ssvfiscanf_r+0x2bc>
 800e5ec:	466b      	mov	r3, sp
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	a941      	add	r1, sp, #260	; 0x104
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f000 f9c2 	bl	800e97c <_scanf_i>
 800e5f8:	e7b0      	b.n	800e55c <__ssvfiscanf_r+0x20c>
 800e5fa:	bf00      	nop
 800e5fc:	0800e29d 	.word	0x0800e29d
 800e600:	0800e317 	.word	0x0800e317
 800e604:	0800f88f 	.word	0x0800f88f
 800e608:	0800f822 	.word	0x0800f822
 800e60c:	4b0b      	ldr	r3, [pc, #44]	; (800e63c <__ssvfiscanf_r+0x2ec>)
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f43f aec5 	beq.w	800e39e <__ssvfiscanf_r+0x4e>
 800e614:	466b      	mov	r3, sp
 800e616:	4622      	mov	r2, r4
 800e618:	a941      	add	r1, sp, #260	; 0x104
 800e61a:	4630      	mov	r0, r6
 800e61c:	f3af 8000 	nop.w
 800e620:	e79c      	b.n	800e55c <__ssvfiscanf_r+0x20c>
 800e622:	89a3      	ldrh	r3, [r4, #12]
 800e624:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e628:	bf18      	it	ne
 800e62a:	f04f 30ff 	movne.w	r0, #4294967295
 800e62e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e636:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e638:	e7f9      	b.n	800e62e <__ssvfiscanf_r+0x2de>
 800e63a:	bf00      	nop
 800e63c:	00000000 	.word	0x00000000

0800e640 <__sfputc_r>:
 800e640:	6893      	ldr	r3, [r2, #8]
 800e642:	3b01      	subs	r3, #1
 800e644:	2b00      	cmp	r3, #0
 800e646:	b410      	push	{r4}
 800e648:	6093      	str	r3, [r2, #8]
 800e64a:	da08      	bge.n	800e65e <__sfputc_r+0x1e>
 800e64c:	6994      	ldr	r4, [r2, #24]
 800e64e:	42a3      	cmp	r3, r4
 800e650:	db01      	blt.n	800e656 <__sfputc_r+0x16>
 800e652:	290a      	cmp	r1, #10
 800e654:	d103      	bne.n	800e65e <__sfputc_r+0x1e>
 800e656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e65a:	f7fe b89a 	b.w	800c792 <__swbuf_r>
 800e65e:	6813      	ldr	r3, [r2, #0]
 800e660:	1c58      	adds	r0, r3, #1
 800e662:	6010      	str	r0, [r2, #0]
 800e664:	7019      	strb	r1, [r3, #0]
 800e666:	4608      	mov	r0, r1
 800e668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e66c:	4770      	bx	lr

0800e66e <__sfputs_r>:
 800e66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e670:	4606      	mov	r6, r0
 800e672:	460f      	mov	r7, r1
 800e674:	4614      	mov	r4, r2
 800e676:	18d5      	adds	r5, r2, r3
 800e678:	42ac      	cmp	r4, r5
 800e67a:	d101      	bne.n	800e680 <__sfputs_r+0x12>
 800e67c:	2000      	movs	r0, #0
 800e67e:	e007      	b.n	800e690 <__sfputs_r+0x22>
 800e680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e684:	463a      	mov	r2, r7
 800e686:	4630      	mov	r0, r6
 800e688:	f7ff ffda 	bl	800e640 <__sfputc_r>
 800e68c:	1c43      	adds	r3, r0, #1
 800e68e:	d1f3      	bne.n	800e678 <__sfputs_r+0xa>
 800e690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e694 <_vfiprintf_r>:
 800e694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e698:	460d      	mov	r5, r1
 800e69a:	b09d      	sub	sp, #116	; 0x74
 800e69c:	4614      	mov	r4, r2
 800e69e:	4698      	mov	r8, r3
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	b118      	cbz	r0, 800e6ac <_vfiprintf_r+0x18>
 800e6a4:	6a03      	ldr	r3, [r0, #32]
 800e6a6:	b90b      	cbnz	r3, 800e6ac <_vfiprintf_r+0x18>
 800e6a8:	f7fd ff3e 	bl	800c528 <__sinit>
 800e6ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6ae:	07d9      	lsls	r1, r3, #31
 800e6b0:	d405      	bmi.n	800e6be <_vfiprintf_r+0x2a>
 800e6b2:	89ab      	ldrh	r3, [r5, #12]
 800e6b4:	059a      	lsls	r2, r3, #22
 800e6b6:	d402      	bmi.n	800e6be <_vfiprintf_r+0x2a>
 800e6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6ba:	f7fe f98f 	bl	800c9dc <__retarget_lock_acquire_recursive>
 800e6be:	89ab      	ldrh	r3, [r5, #12]
 800e6c0:	071b      	lsls	r3, r3, #28
 800e6c2:	d501      	bpl.n	800e6c8 <_vfiprintf_r+0x34>
 800e6c4:	692b      	ldr	r3, [r5, #16]
 800e6c6:	b99b      	cbnz	r3, 800e6f0 <_vfiprintf_r+0x5c>
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f7fe f89e 	bl	800c80c <__swsetup_r>
 800e6d0:	b170      	cbz	r0, 800e6f0 <_vfiprintf_r+0x5c>
 800e6d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6d4:	07dc      	lsls	r4, r3, #31
 800e6d6:	d504      	bpl.n	800e6e2 <_vfiprintf_r+0x4e>
 800e6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6dc:	b01d      	add	sp, #116	; 0x74
 800e6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e2:	89ab      	ldrh	r3, [r5, #12]
 800e6e4:	0598      	lsls	r0, r3, #22
 800e6e6:	d4f7      	bmi.n	800e6d8 <_vfiprintf_r+0x44>
 800e6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6ea:	f7fe f978 	bl	800c9de <__retarget_lock_release_recursive>
 800e6ee:	e7f3      	b.n	800e6d8 <_vfiprintf_r+0x44>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6f4:	2320      	movs	r3, #32
 800e6f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6fe:	2330      	movs	r3, #48	; 0x30
 800e700:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e8b4 <_vfiprintf_r+0x220>
 800e704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e708:	f04f 0901 	mov.w	r9, #1
 800e70c:	4623      	mov	r3, r4
 800e70e:	469a      	mov	sl, r3
 800e710:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e714:	b10a      	cbz	r2, 800e71a <_vfiprintf_r+0x86>
 800e716:	2a25      	cmp	r2, #37	; 0x25
 800e718:	d1f9      	bne.n	800e70e <_vfiprintf_r+0x7a>
 800e71a:	ebba 0b04 	subs.w	fp, sl, r4
 800e71e:	d00b      	beq.n	800e738 <_vfiprintf_r+0xa4>
 800e720:	465b      	mov	r3, fp
 800e722:	4622      	mov	r2, r4
 800e724:	4629      	mov	r1, r5
 800e726:	4630      	mov	r0, r6
 800e728:	f7ff ffa1 	bl	800e66e <__sfputs_r>
 800e72c:	3001      	adds	r0, #1
 800e72e:	f000 80a9 	beq.w	800e884 <_vfiprintf_r+0x1f0>
 800e732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e734:	445a      	add	r2, fp
 800e736:	9209      	str	r2, [sp, #36]	; 0x24
 800e738:	f89a 3000 	ldrb.w	r3, [sl]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f000 80a1 	beq.w	800e884 <_vfiprintf_r+0x1f0>
 800e742:	2300      	movs	r3, #0
 800e744:	f04f 32ff 	mov.w	r2, #4294967295
 800e748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e74c:	f10a 0a01 	add.w	sl, sl, #1
 800e750:	9304      	str	r3, [sp, #16]
 800e752:	9307      	str	r3, [sp, #28]
 800e754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e758:	931a      	str	r3, [sp, #104]	; 0x68
 800e75a:	4654      	mov	r4, sl
 800e75c:	2205      	movs	r2, #5
 800e75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e762:	4854      	ldr	r0, [pc, #336]	; (800e8b4 <_vfiprintf_r+0x220>)
 800e764:	f7f1 fd34 	bl	80001d0 <memchr>
 800e768:	9a04      	ldr	r2, [sp, #16]
 800e76a:	b9d8      	cbnz	r0, 800e7a4 <_vfiprintf_r+0x110>
 800e76c:	06d1      	lsls	r1, r2, #27
 800e76e:	bf44      	itt	mi
 800e770:	2320      	movmi	r3, #32
 800e772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e776:	0713      	lsls	r3, r2, #28
 800e778:	bf44      	itt	mi
 800e77a:	232b      	movmi	r3, #43	; 0x2b
 800e77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e780:	f89a 3000 	ldrb.w	r3, [sl]
 800e784:	2b2a      	cmp	r3, #42	; 0x2a
 800e786:	d015      	beq.n	800e7b4 <_vfiprintf_r+0x120>
 800e788:	9a07      	ldr	r2, [sp, #28]
 800e78a:	4654      	mov	r4, sl
 800e78c:	2000      	movs	r0, #0
 800e78e:	f04f 0c0a 	mov.w	ip, #10
 800e792:	4621      	mov	r1, r4
 800e794:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e798:	3b30      	subs	r3, #48	; 0x30
 800e79a:	2b09      	cmp	r3, #9
 800e79c:	d94d      	bls.n	800e83a <_vfiprintf_r+0x1a6>
 800e79e:	b1b0      	cbz	r0, 800e7ce <_vfiprintf_r+0x13a>
 800e7a0:	9207      	str	r2, [sp, #28]
 800e7a2:	e014      	b.n	800e7ce <_vfiprintf_r+0x13a>
 800e7a4:	eba0 0308 	sub.w	r3, r0, r8
 800e7a8:	fa09 f303 	lsl.w	r3, r9, r3
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	9304      	str	r3, [sp, #16]
 800e7b0:	46a2      	mov	sl, r4
 800e7b2:	e7d2      	b.n	800e75a <_vfiprintf_r+0xc6>
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	1d19      	adds	r1, r3, #4
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	9103      	str	r1, [sp, #12]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	bfbb      	ittet	lt
 800e7c0:	425b      	neglt	r3, r3
 800e7c2:	f042 0202 	orrlt.w	r2, r2, #2
 800e7c6:	9307      	strge	r3, [sp, #28]
 800e7c8:	9307      	strlt	r3, [sp, #28]
 800e7ca:	bfb8      	it	lt
 800e7cc:	9204      	strlt	r2, [sp, #16]
 800e7ce:	7823      	ldrb	r3, [r4, #0]
 800e7d0:	2b2e      	cmp	r3, #46	; 0x2e
 800e7d2:	d10c      	bne.n	800e7ee <_vfiprintf_r+0x15a>
 800e7d4:	7863      	ldrb	r3, [r4, #1]
 800e7d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e7d8:	d134      	bne.n	800e844 <_vfiprintf_r+0x1b0>
 800e7da:	9b03      	ldr	r3, [sp, #12]
 800e7dc:	1d1a      	adds	r2, r3, #4
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	9203      	str	r2, [sp, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	bfb8      	it	lt
 800e7e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7ea:	3402      	adds	r4, #2
 800e7ec:	9305      	str	r3, [sp, #20]
 800e7ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e8c4 <_vfiprintf_r+0x230>
 800e7f2:	7821      	ldrb	r1, [r4, #0]
 800e7f4:	2203      	movs	r2, #3
 800e7f6:	4650      	mov	r0, sl
 800e7f8:	f7f1 fcea 	bl	80001d0 <memchr>
 800e7fc:	b138      	cbz	r0, 800e80e <_vfiprintf_r+0x17a>
 800e7fe:	9b04      	ldr	r3, [sp, #16]
 800e800:	eba0 000a 	sub.w	r0, r0, sl
 800e804:	2240      	movs	r2, #64	; 0x40
 800e806:	4082      	lsls	r2, r0
 800e808:	4313      	orrs	r3, r2
 800e80a:	3401      	adds	r4, #1
 800e80c:	9304      	str	r3, [sp, #16]
 800e80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e812:	4829      	ldr	r0, [pc, #164]	; (800e8b8 <_vfiprintf_r+0x224>)
 800e814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e818:	2206      	movs	r2, #6
 800e81a:	f7f1 fcd9 	bl	80001d0 <memchr>
 800e81e:	2800      	cmp	r0, #0
 800e820:	d03f      	beq.n	800e8a2 <_vfiprintf_r+0x20e>
 800e822:	4b26      	ldr	r3, [pc, #152]	; (800e8bc <_vfiprintf_r+0x228>)
 800e824:	bb1b      	cbnz	r3, 800e86e <_vfiprintf_r+0x1da>
 800e826:	9b03      	ldr	r3, [sp, #12]
 800e828:	3307      	adds	r3, #7
 800e82a:	f023 0307 	bic.w	r3, r3, #7
 800e82e:	3308      	adds	r3, #8
 800e830:	9303      	str	r3, [sp, #12]
 800e832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e834:	443b      	add	r3, r7
 800e836:	9309      	str	r3, [sp, #36]	; 0x24
 800e838:	e768      	b.n	800e70c <_vfiprintf_r+0x78>
 800e83a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e83e:	460c      	mov	r4, r1
 800e840:	2001      	movs	r0, #1
 800e842:	e7a6      	b.n	800e792 <_vfiprintf_r+0xfe>
 800e844:	2300      	movs	r3, #0
 800e846:	3401      	adds	r4, #1
 800e848:	9305      	str	r3, [sp, #20]
 800e84a:	4619      	mov	r1, r3
 800e84c:	f04f 0c0a 	mov.w	ip, #10
 800e850:	4620      	mov	r0, r4
 800e852:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e856:	3a30      	subs	r2, #48	; 0x30
 800e858:	2a09      	cmp	r2, #9
 800e85a:	d903      	bls.n	800e864 <_vfiprintf_r+0x1d0>
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d0c6      	beq.n	800e7ee <_vfiprintf_r+0x15a>
 800e860:	9105      	str	r1, [sp, #20]
 800e862:	e7c4      	b.n	800e7ee <_vfiprintf_r+0x15a>
 800e864:	fb0c 2101 	mla	r1, ip, r1, r2
 800e868:	4604      	mov	r4, r0
 800e86a:	2301      	movs	r3, #1
 800e86c:	e7f0      	b.n	800e850 <_vfiprintf_r+0x1bc>
 800e86e:	ab03      	add	r3, sp, #12
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	462a      	mov	r2, r5
 800e874:	4b12      	ldr	r3, [pc, #72]	; (800e8c0 <_vfiprintf_r+0x22c>)
 800e876:	a904      	add	r1, sp, #16
 800e878:	4630      	mov	r0, r6
 800e87a:	f7fd fa15 	bl	800bca8 <_printf_float>
 800e87e:	4607      	mov	r7, r0
 800e880:	1c78      	adds	r0, r7, #1
 800e882:	d1d6      	bne.n	800e832 <_vfiprintf_r+0x19e>
 800e884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e886:	07d9      	lsls	r1, r3, #31
 800e888:	d405      	bmi.n	800e896 <_vfiprintf_r+0x202>
 800e88a:	89ab      	ldrh	r3, [r5, #12]
 800e88c:	059a      	lsls	r2, r3, #22
 800e88e:	d402      	bmi.n	800e896 <_vfiprintf_r+0x202>
 800e890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e892:	f7fe f8a4 	bl	800c9de <__retarget_lock_release_recursive>
 800e896:	89ab      	ldrh	r3, [r5, #12]
 800e898:	065b      	lsls	r3, r3, #25
 800e89a:	f53f af1d 	bmi.w	800e6d8 <_vfiprintf_r+0x44>
 800e89e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8a0:	e71c      	b.n	800e6dc <_vfiprintf_r+0x48>
 800e8a2:	ab03      	add	r3, sp, #12
 800e8a4:	9300      	str	r3, [sp, #0]
 800e8a6:	462a      	mov	r2, r5
 800e8a8:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <_vfiprintf_r+0x22c>)
 800e8aa:	a904      	add	r1, sp, #16
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f7fd fc9f 	bl	800c1f0 <_printf_i>
 800e8b2:	e7e4      	b.n	800e87e <_vfiprintf_r+0x1ea>
 800e8b4:	0800f81c 	.word	0x0800f81c
 800e8b8:	0800f826 	.word	0x0800f826
 800e8bc:	0800bca9 	.word	0x0800bca9
 800e8c0:	0800e66f 	.word	0x0800e66f
 800e8c4:	0800f822 	.word	0x0800f822

0800e8c8 <_scanf_chars>:
 800e8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8cc:	4615      	mov	r5, r2
 800e8ce:	688a      	ldr	r2, [r1, #8]
 800e8d0:	4680      	mov	r8, r0
 800e8d2:	460c      	mov	r4, r1
 800e8d4:	b932      	cbnz	r2, 800e8e4 <_scanf_chars+0x1c>
 800e8d6:	698a      	ldr	r2, [r1, #24]
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	bf0c      	ite	eq
 800e8dc:	2201      	moveq	r2, #1
 800e8de:	f04f 32ff 	movne.w	r2, #4294967295
 800e8e2:	608a      	str	r2, [r1, #8]
 800e8e4:	6822      	ldr	r2, [r4, #0]
 800e8e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e978 <_scanf_chars+0xb0>
 800e8ea:	06d1      	lsls	r1, r2, #27
 800e8ec:	bf5f      	itttt	pl
 800e8ee:	681a      	ldrpl	r2, [r3, #0]
 800e8f0:	1d11      	addpl	r1, r2, #4
 800e8f2:	6019      	strpl	r1, [r3, #0]
 800e8f4:	6816      	ldrpl	r6, [r2, #0]
 800e8f6:	2700      	movs	r7, #0
 800e8f8:	69a0      	ldr	r0, [r4, #24]
 800e8fa:	b188      	cbz	r0, 800e920 <_scanf_chars+0x58>
 800e8fc:	2801      	cmp	r0, #1
 800e8fe:	d107      	bne.n	800e910 <_scanf_chars+0x48>
 800e900:	682a      	ldr	r2, [r5, #0]
 800e902:	7811      	ldrb	r1, [r2, #0]
 800e904:	6962      	ldr	r2, [r4, #20]
 800e906:	5c52      	ldrb	r2, [r2, r1]
 800e908:	b952      	cbnz	r2, 800e920 <_scanf_chars+0x58>
 800e90a:	2f00      	cmp	r7, #0
 800e90c:	d031      	beq.n	800e972 <_scanf_chars+0xaa>
 800e90e:	e022      	b.n	800e956 <_scanf_chars+0x8e>
 800e910:	2802      	cmp	r0, #2
 800e912:	d120      	bne.n	800e956 <_scanf_chars+0x8e>
 800e914:	682b      	ldr	r3, [r5, #0]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e91c:	071b      	lsls	r3, r3, #28
 800e91e:	d41a      	bmi.n	800e956 <_scanf_chars+0x8e>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	06da      	lsls	r2, r3, #27
 800e924:	bf5e      	ittt	pl
 800e926:	682b      	ldrpl	r3, [r5, #0]
 800e928:	781b      	ldrbpl	r3, [r3, #0]
 800e92a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e92e:	682a      	ldr	r2, [r5, #0]
 800e930:	686b      	ldr	r3, [r5, #4]
 800e932:	3201      	adds	r2, #1
 800e934:	602a      	str	r2, [r5, #0]
 800e936:	68a2      	ldr	r2, [r4, #8]
 800e938:	3b01      	subs	r3, #1
 800e93a:	3a01      	subs	r2, #1
 800e93c:	606b      	str	r3, [r5, #4]
 800e93e:	3701      	adds	r7, #1
 800e940:	60a2      	str	r2, [r4, #8]
 800e942:	b142      	cbz	r2, 800e956 <_scanf_chars+0x8e>
 800e944:	2b00      	cmp	r3, #0
 800e946:	dcd7      	bgt.n	800e8f8 <_scanf_chars+0x30>
 800e948:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e94c:	4629      	mov	r1, r5
 800e94e:	4640      	mov	r0, r8
 800e950:	4798      	blx	r3
 800e952:	2800      	cmp	r0, #0
 800e954:	d0d0      	beq.n	800e8f8 <_scanf_chars+0x30>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	f013 0310 	ands.w	r3, r3, #16
 800e95c:	d105      	bne.n	800e96a <_scanf_chars+0xa2>
 800e95e:	68e2      	ldr	r2, [r4, #12]
 800e960:	3201      	adds	r2, #1
 800e962:	60e2      	str	r2, [r4, #12]
 800e964:	69a2      	ldr	r2, [r4, #24]
 800e966:	b102      	cbz	r2, 800e96a <_scanf_chars+0xa2>
 800e968:	7033      	strb	r3, [r6, #0]
 800e96a:	6923      	ldr	r3, [r4, #16]
 800e96c:	443b      	add	r3, r7
 800e96e:	6123      	str	r3, [r4, #16]
 800e970:	2000      	movs	r0, #0
 800e972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e976:	bf00      	nop
 800e978:	0800f88f 	.word	0x0800f88f

0800e97c <_scanf_i>:
 800e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	4698      	mov	r8, r3
 800e982:	4b74      	ldr	r3, [pc, #464]	; (800eb54 <_scanf_i+0x1d8>)
 800e984:	460c      	mov	r4, r1
 800e986:	4682      	mov	sl, r0
 800e988:	4616      	mov	r6, r2
 800e98a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e98e:	b087      	sub	sp, #28
 800e990:	ab03      	add	r3, sp, #12
 800e992:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e996:	4b70      	ldr	r3, [pc, #448]	; (800eb58 <_scanf_i+0x1dc>)
 800e998:	69a1      	ldr	r1, [r4, #24]
 800e99a:	4a70      	ldr	r2, [pc, #448]	; (800eb5c <_scanf_i+0x1e0>)
 800e99c:	2903      	cmp	r1, #3
 800e99e:	bf18      	it	ne
 800e9a0:	461a      	movne	r2, r3
 800e9a2:	68a3      	ldr	r3, [r4, #8]
 800e9a4:	9201      	str	r2, [sp, #4]
 800e9a6:	1e5a      	subs	r2, r3, #1
 800e9a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e9ac:	bf88      	it	hi
 800e9ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e9b2:	4627      	mov	r7, r4
 800e9b4:	bf82      	ittt	hi
 800e9b6:	eb03 0905 	addhi.w	r9, r3, r5
 800e9ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e9be:	60a3      	strhi	r3, [r4, #8]
 800e9c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e9c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e9c8:	bf98      	it	ls
 800e9ca:	f04f 0900 	movls.w	r9, #0
 800e9ce:	6023      	str	r3, [r4, #0]
 800e9d0:	463d      	mov	r5, r7
 800e9d2:	f04f 0b00 	mov.w	fp, #0
 800e9d6:	6831      	ldr	r1, [r6, #0]
 800e9d8:	ab03      	add	r3, sp, #12
 800e9da:	7809      	ldrb	r1, [r1, #0]
 800e9dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e9e0:	2202      	movs	r2, #2
 800e9e2:	f7f1 fbf5 	bl	80001d0 <memchr>
 800e9e6:	b328      	cbz	r0, 800ea34 <_scanf_i+0xb8>
 800e9e8:	f1bb 0f01 	cmp.w	fp, #1
 800e9ec:	d159      	bne.n	800eaa2 <_scanf_i+0x126>
 800e9ee:	6862      	ldr	r2, [r4, #4]
 800e9f0:	b92a      	cbnz	r2, 800e9fe <_scanf_i+0x82>
 800e9f2:	6822      	ldr	r2, [r4, #0]
 800e9f4:	2308      	movs	r3, #8
 800e9f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9fa:	6063      	str	r3, [r4, #4]
 800e9fc:	6022      	str	r2, [r4, #0]
 800e9fe:	6822      	ldr	r2, [r4, #0]
 800ea00:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ea04:	6022      	str	r2, [r4, #0]
 800ea06:	68a2      	ldr	r2, [r4, #8]
 800ea08:	1e51      	subs	r1, r2, #1
 800ea0a:	60a1      	str	r1, [r4, #8]
 800ea0c:	b192      	cbz	r2, 800ea34 <_scanf_i+0xb8>
 800ea0e:	6832      	ldr	r2, [r6, #0]
 800ea10:	1c51      	adds	r1, r2, #1
 800ea12:	6031      	str	r1, [r6, #0]
 800ea14:	7812      	ldrb	r2, [r2, #0]
 800ea16:	f805 2b01 	strb.w	r2, [r5], #1
 800ea1a:	6872      	ldr	r2, [r6, #4]
 800ea1c:	3a01      	subs	r2, #1
 800ea1e:	2a00      	cmp	r2, #0
 800ea20:	6072      	str	r2, [r6, #4]
 800ea22:	dc07      	bgt.n	800ea34 <_scanf_i+0xb8>
 800ea24:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ea28:	4631      	mov	r1, r6
 800ea2a:	4650      	mov	r0, sl
 800ea2c:	4790      	blx	r2
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	f040 8085 	bne.w	800eb3e <_scanf_i+0x1c2>
 800ea34:	f10b 0b01 	add.w	fp, fp, #1
 800ea38:	f1bb 0f03 	cmp.w	fp, #3
 800ea3c:	d1cb      	bne.n	800e9d6 <_scanf_i+0x5a>
 800ea3e:	6863      	ldr	r3, [r4, #4]
 800ea40:	b90b      	cbnz	r3, 800ea46 <_scanf_i+0xca>
 800ea42:	230a      	movs	r3, #10
 800ea44:	6063      	str	r3, [r4, #4]
 800ea46:	6863      	ldr	r3, [r4, #4]
 800ea48:	4945      	ldr	r1, [pc, #276]	; (800eb60 <_scanf_i+0x1e4>)
 800ea4a:	6960      	ldr	r0, [r4, #20]
 800ea4c:	1ac9      	subs	r1, r1, r3
 800ea4e:	f000 f999 	bl	800ed84 <__sccl>
 800ea52:	f04f 0b00 	mov.w	fp, #0
 800ea56:	68a3      	ldr	r3, [r4, #8]
 800ea58:	6822      	ldr	r2, [r4, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d03d      	beq.n	800eada <_scanf_i+0x15e>
 800ea5e:	6831      	ldr	r1, [r6, #0]
 800ea60:	6960      	ldr	r0, [r4, #20]
 800ea62:	f891 c000 	ldrb.w	ip, [r1]
 800ea66:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d035      	beq.n	800eada <_scanf_i+0x15e>
 800ea6e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ea72:	d124      	bne.n	800eabe <_scanf_i+0x142>
 800ea74:	0510      	lsls	r0, r2, #20
 800ea76:	d522      	bpl.n	800eabe <_scanf_i+0x142>
 800ea78:	f10b 0b01 	add.w	fp, fp, #1
 800ea7c:	f1b9 0f00 	cmp.w	r9, #0
 800ea80:	d003      	beq.n	800ea8a <_scanf_i+0x10e>
 800ea82:	3301      	adds	r3, #1
 800ea84:	f109 39ff 	add.w	r9, r9, #4294967295
 800ea88:	60a3      	str	r3, [r4, #8]
 800ea8a:	6873      	ldr	r3, [r6, #4]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	6073      	str	r3, [r6, #4]
 800ea92:	dd1b      	ble.n	800eacc <_scanf_i+0x150>
 800ea94:	6833      	ldr	r3, [r6, #0]
 800ea96:	3301      	adds	r3, #1
 800ea98:	6033      	str	r3, [r6, #0]
 800ea9a:	68a3      	ldr	r3, [r4, #8]
 800ea9c:	3b01      	subs	r3, #1
 800ea9e:	60a3      	str	r3, [r4, #8]
 800eaa0:	e7d9      	b.n	800ea56 <_scanf_i+0xda>
 800eaa2:	f1bb 0f02 	cmp.w	fp, #2
 800eaa6:	d1ae      	bne.n	800ea06 <_scanf_i+0x8a>
 800eaa8:	6822      	ldr	r2, [r4, #0]
 800eaaa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800eaae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800eab2:	d1bf      	bne.n	800ea34 <_scanf_i+0xb8>
 800eab4:	2310      	movs	r3, #16
 800eab6:	6063      	str	r3, [r4, #4]
 800eab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eabc:	e7a2      	b.n	800ea04 <_scanf_i+0x88>
 800eabe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800eac2:	6022      	str	r2, [r4, #0]
 800eac4:	780b      	ldrb	r3, [r1, #0]
 800eac6:	f805 3b01 	strb.w	r3, [r5], #1
 800eaca:	e7de      	b.n	800ea8a <_scanf_i+0x10e>
 800eacc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ead0:	4631      	mov	r1, r6
 800ead2:	4650      	mov	r0, sl
 800ead4:	4798      	blx	r3
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d0df      	beq.n	800ea9a <_scanf_i+0x11e>
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	05d9      	lsls	r1, r3, #23
 800eade:	d50d      	bpl.n	800eafc <_scanf_i+0x180>
 800eae0:	42bd      	cmp	r5, r7
 800eae2:	d909      	bls.n	800eaf8 <_scanf_i+0x17c>
 800eae4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eae8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eaec:	4632      	mov	r2, r6
 800eaee:	4650      	mov	r0, sl
 800eaf0:	4798      	blx	r3
 800eaf2:	f105 39ff 	add.w	r9, r5, #4294967295
 800eaf6:	464d      	mov	r5, r9
 800eaf8:	42bd      	cmp	r5, r7
 800eafa:	d028      	beq.n	800eb4e <_scanf_i+0x1d2>
 800eafc:	6822      	ldr	r2, [r4, #0]
 800eafe:	f012 0210 	ands.w	r2, r2, #16
 800eb02:	d113      	bne.n	800eb2c <_scanf_i+0x1b0>
 800eb04:	702a      	strb	r2, [r5, #0]
 800eb06:	6863      	ldr	r3, [r4, #4]
 800eb08:	9e01      	ldr	r6, [sp, #4]
 800eb0a:	4639      	mov	r1, r7
 800eb0c:	4650      	mov	r0, sl
 800eb0e:	47b0      	blx	r6
 800eb10:	f8d8 3000 	ldr.w	r3, [r8]
 800eb14:	6821      	ldr	r1, [r4, #0]
 800eb16:	1d1a      	adds	r2, r3, #4
 800eb18:	f8c8 2000 	str.w	r2, [r8]
 800eb1c:	f011 0f20 	tst.w	r1, #32
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	d00f      	beq.n	800eb44 <_scanf_i+0x1c8>
 800eb24:	6018      	str	r0, [r3, #0]
 800eb26:	68e3      	ldr	r3, [r4, #12]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	60e3      	str	r3, [r4, #12]
 800eb2c:	6923      	ldr	r3, [r4, #16]
 800eb2e:	1bed      	subs	r5, r5, r7
 800eb30:	445d      	add	r5, fp
 800eb32:	442b      	add	r3, r5
 800eb34:	6123      	str	r3, [r4, #16]
 800eb36:	2000      	movs	r0, #0
 800eb38:	b007      	add	sp, #28
 800eb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3e:	f04f 0b00 	mov.w	fp, #0
 800eb42:	e7ca      	b.n	800eada <_scanf_i+0x15e>
 800eb44:	07ca      	lsls	r2, r1, #31
 800eb46:	bf4c      	ite	mi
 800eb48:	8018      	strhmi	r0, [r3, #0]
 800eb4a:	6018      	strpl	r0, [r3, #0]
 800eb4c:	e7eb      	b.n	800eb26 <_scanf_i+0x1aa>
 800eb4e:	2001      	movs	r0, #1
 800eb50:	e7f2      	b.n	800eb38 <_scanf_i+0x1bc>
 800eb52:	bf00      	nop
 800eb54:	0800f5bc 	.word	0x0800f5bc
 800eb58:	0800f1dd 	.word	0x0800f1dd
 800eb5c:	0800f0f5 	.word	0x0800f0f5
 800eb60:	0800f83d 	.word	0x0800f83d

0800eb64 <__sflush_r>:
 800eb64:	898a      	ldrh	r2, [r1, #12]
 800eb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	0710      	lsls	r0, r2, #28
 800eb6e:	460c      	mov	r4, r1
 800eb70:	d458      	bmi.n	800ec24 <__sflush_r+0xc0>
 800eb72:	684b      	ldr	r3, [r1, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	dc05      	bgt.n	800eb84 <__sflush_r+0x20>
 800eb78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	dc02      	bgt.n	800eb84 <__sflush_r+0x20>
 800eb7e:	2000      	movs	r0, #0
 800eb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb86:	2e00      	cmp	r6, #0
 800eb88:	d0f9      	beq.n	800eb7e <__sflush_r+0x1a>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb90:	682f      	ldr	r7, [r5, #0]
 800eb92:	6a21      	ldr	r1, [r4, #32]
 800eb94:	602b      	str	r3, [r5, #0]
 800eb96:	d032      	beq.n	800ebfe <__sflush_r+0x9a>
 800eb98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb9a:	89a3      	ldrh	r3, [r4, #12]
 800eb9c:	075a      	lsls	r2, r3, #29
 800eb9e:	d505      	bpl.n	800ebac <__sflush_r+0x48>
 800eba0:	6863      	ldr	r3, [r4, #4]
 800eba2:	1ac0      	subs	r0, r0, r3
 800eba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eba6:	b10b      	cbz	r3, 800ebac <__sflush_r+0x48>
 800eba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebaa:	1ac0      	subs	r0, r0, r3
 800ebac:	2300      	movs	r3, #0
 800ebae:	4602      	mov	r2, r0
 800ebb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebb2:	6a21      	ldr	r1, [r4, #32]
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	47b0      	blx	r6
 800ebb8:	1c43      	adds	r3, r0, #1
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	d106      	bne.n	800ebcc <__sflush_r+0x68>
 800ebbe:	6829      	ldr	r1, [r5, #0]
 800ebc0:	291d      	cmp	r1, #29
 800ebc2:	d82b      	bhi.n	800ec1c <__sflush_r+0xb8>
 800ebc4:	4a29      	ldr	r2, [pc, #164]	; (800ec6c <__sflush_r+0x108>)
 800ebc6:	410a      	asrs	r2, r1
 800ebc8:	07d6      	lsls	r6, r2, #31
 800ebca:	d427      	bmi.n	800ec1c <__sflush_r+0xb8>
 800ebcc:	2200      	movs	r2, #0
 800ebce:	6062      	str	r2, [r4, #4]
 800ebd0:	04d9      	lsls	r1, r3, #19
 800ebd2:	6922      	ldr	r2, [r4, #16]
 800ebd4:	6022      	str	r2, [r4, #0]
 800ebd6:	d504      	bpl.n	800ebe2 <__sflush_r+0x7e>
 800ebd8:	1c42      	adds	r2, r0, #1
 800ebda:	d101      	bne.n	800ebe0 <__sflush_r+0x7c>
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	b903      	cbnz	r3, 800ebe2 <__sflush_r+0x7e>
 800ebe0:	6560      	str	r0, [r4, #84]	; 0x54
 800ebe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebe4:	602f      	str	r7, [r5, #0]
 800ebe6:	2900      	cmp	r1, #0
 800ebe8:	d0c9      	beq.n	800eb7e <__sflush_r+0x1a>
 800ebea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebee:	4299      	cmp	r1, r3
 800ebf0:	d002      	beq.n	800ebf8 <__sflush_r+0x94>
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	f7fe fd7e 	bl	800d6f4 <_free_r>
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	6360      	str	r0, [r4, #52]	; 0x34
 800ebfc:	e7c0      	b.n	800eb80 <__sflush_r+0x1c>
 800ebfe:	2301      	movs	r3, #1
 800ec00:	4628      	mov	r0, r5
 800ec02:	47b0      	blx	r6
 800ec04:	1c41      	adds	r1, r0, #1
 800ec06:	d1c8      	bne.n	800eb9a <__sflush_r+0x36>
 800ec08:	682b      	ldr	r3, [r5, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d0c5      	beq.n	800eb9a <__sflush_r+0x36>
 800ec0e:	2b1d      	cmp	r3, #29
 800ec10:	d001      	beq.n	800ec16 <__sflush_r+0xb2>
 800ec12:	2b16      	cmp	r3, #22
 800ec14:	d101      	bne.n	800ec1a <__sflush_r+0xb6>
 800ec16:	602f      	str	r7, [r5, #0]
 800ec18:	e7b1      	b.n	800eb7e <__sflush_r+0x1a>
 800ec1a:	89a3      	ldrh	r3, [r4, #12]
 800ec1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec20:	81a3      	strh	r3, [r4, #12]
 800ec22:	e7ad      	b.n	800eb80 <__sflush_r+0x1c>
 800ec24:	690f      	ldr	r7, [r1, #16]
 800ec26:	2f00      	cmp	r7, #0
 800ec28:	d0a9      	beq.n	800eb7e <__sflush_r+0x1a>
 800ec2a:	0793      	lsls	r3, r2, #30
 800ec2c:	680e      	ldr	r6, [r1, #0]
 800ec2e:	bf08      	it	eq
 800ec30:	694b      	ldreq	r3, [r1, #20]
 800ec32:	600f      	str	r7, [r1, #0]
 800ec34:	bf18      	it	ne
 800ec36:	2300      	movne	r3, #0
 800ec38:	eba6 0807 	sub.w	r8, r6, r7
 800ec3c:	608b      	str	r3, [r1, #8]
 800ec3e:	f1b8 0f00 	cmp.w	r8, #0
 800ec42:	dd9c      	ble.n	800eb7e <__sflush_r+0x1a>
 800ec44:	6a21      	ldr	r1, [r4, #32]
 800ec46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec48:	4643      	mov	r3, r8
 800ec4a:	463a      	mov	r2, r7
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	47b0      	blx	r6
 800ec50:	2800      	cmp	r0, #0
 800ec52:	dc06      	bgt.n	800ec62 <__sflush_r+0xfe>
 800ec54:	89a3      	ldrh	r3, [r4, #12]
 800ec56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec5a:	81a3      	strh	r3, [r4, #12]
 800ec5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec60:	e78e      	b.n	800eb80 <__sflush_r+0x1c>
 800ec62:	4407      	add	r7, r0
 800ec64:	eba8 0800 	sub.w	r8, r8, r0
 800ec68:	e7e9      	b.n	800ec3e <__sflush_r+0xda>
 800ec6a:	bf00      	nop
 800ec6c:	dfbffffe 	.word	0xdfbffffe

0800ec70 <_fflush_r>:
 800ec70:	b538      	push	{r3, r4, r5, lr}
 800ec72:	690b      	ldr	r3, [r1, #16]
 800ec74:	4605      	mov	r5, r0
 800ec76:	460c      	mov	r4, r1
 800ec78:	b913      	cbnz	r3, 800ec80 <_fflush_r+0x10>
 800ec7a:	2500      	movs	r5, #0
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	bd38      	pop	{r3, r4, r5, pc}
 800ec80:	b118      	cbz	r0, 800ec8a <_fflush_r+0x1a>
 800ec82:	6a03      	ldr	r3, [r0, #32]
 800ec84:	b90b      	cbnz	r3, 800ec8a <_fflush_r+0x1a>
 800ec86:	f7fd fc4f 	bl	800c528 <__sinit>
 800ec8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d0f3      	beq.n	800ec7a <_fflush_r+0xa>
 800ec92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec94:	07d0      	lsls	r0, r2, #31
 800ec96:	d404      	bmi.n	800eca2 <_fflush_r+0x32>
 800ec98:	0599      	lsls	r1, r3, #22
 800ec9a:	d402      	bmi.n	800eca2 <_fflush_r+0x32>
 800ec9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec9e:	f7fd fe9d 	bl	800c9dc <__retarget_lock_acquire_recursive>
 800eca2:	4628      	mov	r0, r5
 800eca4:	4621      	mov	r1, r4
 800eca6:	f7ff ff5d 	bl	800eb64 <__sflush_r>
 800ecaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecac:	07da      	lsls	r2, r3, #31
 800ecae:	4605      	mov	r5, r0
 800ecb0:	d4e4      	bmi.n	800ec7c <_fflush_r+0xc>
 800ecb2:	89a3      	ldrh	r3, [r4, #12]
 800ecb4:	059b      	lsls	r3, r3, #22
 800ecb6:	d4e1      	bmi.n	800ec7c <_fflush_r+0xc>
 800ecb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecba:	f7fd fe90 	bl	800c9de <__retarget_lock_release_recursive>
 800ecbe:	e7dd      	b.n	800ec7c <_fflush_r+0xc>

0800ecc0 <__swhatbuf_r>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	460c      	mov	r4, r1
 800ecc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecc8:	2900      	cmp	r1, #0
 800ecca:	b096      	sub	sp, #88	; 0x58
 800eccc:	4615      	mov	r5, r2
 800ecce:	461e      	mov	r6, r3
 800ecd0:	da0d      	bge.n	800ecee <__swhatbuf_r+0x2e>
 800ecd2:	89a3      	ldrh	r3, [r4, #12]
 800ecd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ecd8:	f04f 0100 	mov.w	r1, #0
 800ecdc:	bf0c      	ite	eq
 800ecde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ece2:	2340      	movne	r3, #64	; 0x40
 800ece4:	2000      	movs	r0, #0
 800ece6:	6031      	str	r1, [r6, #0]
 800ece8:	602b      	str	r3, [r5, #0]
 800ecea:	b016      	add	sp, #88	; 0x58
 800ecec:	bd70      	pop	{r4, r5, r6, pc}
 800ecee:	466a      	mov	r2, sp
 800ecf0:	f000 f8d6 	bl	800eea0 <_fstat_r>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	dbec      	blt.n	800ecd2 <__swhatbuf_r+0x12>
 800ecf8:	9901      	ldr	r1, [sp, #4]
 800ecfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ecfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ed02:	4259      	negs	r1, r3
 800ed04:	4159      	adcs	r1, r3
 800ed06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed0a:	e7eb      	b.n	800ece4 <__swhatbuf_r+0x24>

0800ed0c <__smakebuf_r>:
 800ed0c:	898b      	ldrh	r3, [r1, #12]
 800ed0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed10:	079d      	lsls	r5, r3, #30
 800ed12:	4606      	mov	r6, r0
 800ed14:	460c      	mov	r4, r1
 800ed16:	d507      	bpl.n	800ed28 <__smakebuf_r+0x1c>
 800ed18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed1c:	6023      	str	r3, [r4, #0]
 800ed1e:	6123      	str	r3, [r4, #16]
 800ed20:	2301      	movs	r3, #1
 800ed22:	6163      	str	r3, [r4, #20]
 800ed24:	b002      	add	sp, #8
 800ed26:	bd70      	pop	{r4, r5, r6, pc}
 800ed28:	ab01      	add	r3, sp, #4
 800ed2a:	466a      	mov	r2, sp
 800ed2c:	f7ff ffc8 	bl	800ecc0 <__swhatbuf_r>
 800ed30:	9900      	ldr	r1, [sp, #0]
 800ed32:	4605      	mov	r5, r0
 800ed34:	4630      	mov	r0, r6
 800ed36:	f7fe fd51 	bl	800d7dc <_malloc_r>
 800ed3a:	b948      	cbnz	r0, 800ed50 <__smakebuf_r+0x44>
 800ed3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed40:	059a      	lsls	r2, r3, #22
 800ed42:	d4ef      	bmi.n	800ed24 <__smakebuf_r+0x18>
 800ed44:	f023 0303 	bic.w	r3, r3, #3
 800ed48:	f043 0302 	orr.w	r3, r3, #2
 800ed4c:	81a3      	strh	r3, [r4, #12]
 800ed4e:	e7e3      	b.n	800ed18 <__smakebuf_r+0xc>
 800ed50:	89a3      	ldrh	r3, [r4, #12]
 800ed52:	6020      	str	r0, [r4, #0]
 800ed54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed58:	81a3      	strh	r3, [r4, #12]
 800ed5a:	9b00      	ldr	r3, [sp, #0]
 800ed5c:	6163      	str	r3, [r4, #20]
 800ed5e:	9b01      	ldr	r3, [sp, #4]
 800ed60:	6120      	str	r0, [r4, #16]
 800ed62:	b15b      	cbz	r3, 800ed7c <__smakebuf_r+0x70>
 800ed64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f000 f8ab 	bl	800eec4 <_isatty_r>
 800ed6e:	b128      	cbz	r0, 800ed7c <__smakebuf_r+0x70>
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	f023 0303 	bic.w	r3, r3, #3
 800ed76:	f043 0301 	orr.w	r3, r3, #1
 800ed7a:	81a3      	strh	r3, [r4, #12]
 800ed7c:	89a3      	ldrh	r3, [r4, #12]
 800ed7e:	431d      	orrs	r5, r3
 800ed80:	81a5      	strh	r5, [r4, #12]
 800ed82:	e7cf      	b.n	800ed24 <__smakebuf_r+0x18>

0800ed84 <__sccl>:
 800ed84:	b570      	push	{r4, r5, r6, lr}
 800ed86:	780b      	ldrb	r3, [r1, #0]
 800ed88:	4604      	mov	r4, r0
 800ed8a:	2b5e      	cmp	r3, #94	; 0x5e
 800ed8c:	bf0b      	itete	eq
 800ed8e:	784b      	ldrbeq	r3, [r1, #1]
 800ed90:	1c4a      	addne	r2, r1, #1
 800ed92:	1c8a      	addeq	r2, r1, #2
 800ed94:	2100      	movne	r1, #0
 800ed96:	bf08      	it	eq
 800ed98:	2101      	moveq	r1, #1
 800ed9a:	3801      	subs	r0, #1
 800ed9c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800eda0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800eda4:	42a8      	cmp	r0, r5
 800eda6:	d1fb      	bne.n	800eda0 <__sccl+0x1c>
 800eda8:	b90b      	cbnz	r3, 800edae <__sccl+0x2a>
 800edaa:	1e50      	subs	r0, r2, #1
 800edac:	bd70      	pop	{r4, r5, r6, pc}
 800edae:	f081 0101 	eor.w	r1, r1, #1
 800edb2:	54e1      	strb	r1, [r4, r3]
 800edb4:	4610      	mov	r0, r2
 800edb6:	4602      	mov	r2, r0
 800edb8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800edbc:	2d2d      	cmp	r5, #45	; 0x2d
 800edbe:	d005      	beq.n	800edcc <__sccl+0x48>
 800edc0:	2d5d      	cmp	r5, #93	; 0x5d
 800edc2:	d016      	beq.n	800edf2 <__sccl+0x6e>
 800edc4:	2d00      	cmp	r5, #0
 800edc6:	d0f1      	beq.n	800edac <__sccl+0x28>
 800edc8:	462b      	mov	r3, r5
 800edca:	e7f2      	b.n	800edb2 <__sccl+0x2e>
 800edcc:	7846      	ldrb	r6, [r0, #1]
 800edce:	2e5d      	cmp	r6, #93	; 0x5d
 800edd0:	d0fa      	beq.n	800edc8 <__sccl+0x44>
 800edd2:	42b3      	cmp	r3, r6
 800edd4:	dcf8      	bgt.n	800edc8 <__sccl+0x44>
 800edd6:	3002      	adds	r0, #2
 800edd8:	461a      	mov	r2, r3
 800edda:	3201      	adds	r2, #1
 800eddc:	4296      	cmp	r6, r2
 800edde:	54a1      	strb	r1, [r4, r2]
 800ede0:	dcfb      	bgt.n	800edda <__sccl+0x56>
 800ede2:	1af2      	subs	r2, r6, r3
 800ede4:	3a01      	subs	r2, #1
 800ede6:	1c5d      	adds	r5, r3, #1
 800ede8:	42b3      	cmp	r3, r6
 800edea:	bfa8      	it	ge
 800edec:	2200      	movge	r2, #0
 800edee:	18ab      	adds	r3, r5, r2
 800edf0:	e7e1      	b.n	800edb6 <__sccl+0x32>
 800edf2:	4610      	mov	r0, r2
 800edf4:	e7da      	b.n	800edac <__sccl+0x28>

0800edf6 <__submore>:
 800edf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edfa:	460c      	mov	r4, r1
 800edfc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800edfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee02:	4299      	cmp	r1, r3
 800ee04:	d11d      	bne.n	800ee42 <__submore+0x4c>
 800ee06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ee0a:	f7fe fce7 	bl	800d7dc <_malloc_r>
 800ee0e:	b918      	cbnz	r0, 800ee18 <__submore+0x22>
 800ee10:	f04f 30ff 	mov.w	r0, #4294967295
 800ee14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee1c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ee1e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ee22:	6360      	str	r0, [r4, #52]	; 0x34
 800ee24:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ee28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ee2c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ee30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ee34:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ee38:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ee3c:	6020      	str	r0, [r4, #0]
 800ee3e:	2000      	movs	r0, #0
 800ee40:	e7e8      	b.n	800ee14 <__submore+0x1e>
 800ee42:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ee44:	0077      	lsls	r7, r6, #1
 800ee46:	463a      	mov	r2, r7
 800ee48:	f000 f8a2 	bl	800ef90 <_realloc_r>
 800ee4c:	4605      	mov	r5, r0
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d0de      	beq.n	800ee10 <__submore+0x1a>
 800ee52:	eb00 0806 	add.w	r8, r0, r6
 800ee56:	4601      	mov	r1, r0
 800ee58:	4632      	mov	r2, r6
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	f7fd fdc0 	bl	800c9e0 <memcpy>
 800ee60:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ee64:	f8c4 8000 	str.w	r8, [r4]
 800ee68:	e7e9      	b.n	800ee3e <__submore+0x48>

0800ee6a <memmove>:
 800ee6a:	4288      	cmp	r0, r1
 800ee6c:	b510      	push	{r4, lr}
 800ee6e:	eb01 0402 	add.w	r4, r1, r2
 800ee72:	d902      	bls.n	800ee7a <memmove+0x10>
 800ee74:	4284      	cmp	r4, r0
 800ee76:	4623      	mov	r3, r4
 800ee78:	d807      	bhi.n	800ee8a <memmove+0x20>
 800ee7a:	1e43      	subs	r3, r0, #1
 800ee7c:	42a1      	cmp	r1, r4
 800ee7e:	d008      	beq.n	800ee92 <memmove+0x28>
 800ee80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee84:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee88:	e7f8      	b.n	800ee7c <memmove+0x12>
 800ee8a:	4402      	add	r2, r0
 800ee8c:	4601      	mov	r1, r0
 800ee8e:	428a      	cmp	r2, r1
 800ee90:	d100      	bne.n	800ee94 <memmove+0x2a>
 800ee92:	bd10      	pop	{r4, pc}
 800ee94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee9c:	e7f7      	b.n	800ee8e <memmove+0x24>
	...

0800eea0 <_fstat_r>:
 800eea0:	b538      	push	{r3, r4, r5, lr}
 800eea2:	4d07      	ldr	r5, [pc, #28]	; (800eec0 <_fstat_r+0x20>)
 800eea4:	2300      	movs	r3, #0
 800eea6:	4604      	mov	r4, r0
 800eea8:	4608      	mov	r0, r1
 800eeaa:	4611      	mov	r1, r2
 800eeac:	602b      	str	r3, [r5, #0]
 800eeae:	f7f2 ffe4 	bl	8001e7a <_fstat>
 800eeb2:	1c43      	adds	r3, r0, #1
 800eeb4:	d102      	bne.n	800eebc <_fstat_r+0x1c>
 800eeb6:	682b      	ldr	r3, [r5, #0]
 800eeb8:	b103      	cbz	r3, 800eebc <_fstat_r+0x1c>
 800eeba:	6023      	str	r3, [r4, #0]
 800eebc:	bd38      	pop	{r3, r4, r5, pc}
 800eebe:	bf00      	nop
 800eec0:	20001b60 	.word	0x20001b60

0800eec4 <_isatty_r>:
 800eec4:	b538      	push	{r3, r4, r5, lr}
 800eec6:	4d06      	ldr	r5, [pc, #24]	; (800eee0 <_isatty_r+0x1c>)
 800eec8:	2300      	movs	r3, #0
 800eeca:	4604      	mov	r4, r0
 800eecc:	4608      	mov	r0, r1
 800eece:	602b      	str	r3, [r5, #0]
 800eed0:	f7f2 ffe3 	bl	8001e9a <_isatty>
 800eed4:	1c43      	adds	r3, r0, #1
 800eed6:	d102      	bne.n	800eede <_isatty_r+0x1a>
 800eed8:	682b      	ldr	r3, [r5, #0]
 800eeda:	b103      	cbz	r3, 800eede <_isatty_r+0x1a>
 800eedc:	6023      	str	r3, [r4, #0]
 800eede:	bd38      	pop	{r3, r4, r5, pc}
 800eee0:	20001b60 	.word	0x20001b60

0800eee4 <_sbrk_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4d06      	ldr	r5, [pc, #24]	; (800ef00 <_sbrk_r+0x1c>)
 800eee8:	2300      	movs	r3, #0
 800eeea:	4604      	mov	r4, r0
 800eeec:	4608      	mov	r0, r1
 800eeee:	602b      	str	r3, [r5, #0]
 800eef0:	f7f2 ffec 	bl	8001ecc <_sbrk>
 800eef4:	1c43      	adds	r3, r0, #1
 800eef6:	d102      	bne.n	800eefe <_sbrk_r+0x1a>
 800eef8:	682b      	ldr	r3, [r5, #0]
 800eefa:	b103      	cbz	r3, 800eefe <_sbrk_r+0x1a>
 800eefc:	6023      	str	r3, [r4, #0]
 800eefe:	bd38      	pop	{r3, r4, r5, pc}
 800ef00:	20001b60 	.word	0x20001b60

0800ef04 <__assert_func>:
 800ef04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef06:	4614      	mov	r4, r2
 800ef08:	461a      	mov	r2, r3
 800ef0a:	4b09      	ldr	r3, [pc, #36]	; (800ef30 <__assert_func+0x2c>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4605      	mov	r5, r0
 800ef10:	68d8      	ldr	r0, [r3, #12]
 800ef12:	b14c      	cbz	r4, 800ef28 <__assert_func+0x24>
 800ef14:	4b07      	ldr	r3, [pc, #28]	; (800ef34 <__assert_func+0x30>)
 800ef16:	9100      	str	r1, [sp, #0]
 800ef18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef1c:	4906      	ldr	r1, [pc, #24]	; (800ef38 <__assert_func+0x34>)
 800ef1e:	462b      	mov	r3, r5
 800ef20:	f000 f96c 	bl	800f1fc <fiprintf>
 800ef24:	f000 f97c 	bl	800f220 <abort>
 800ef28:	4b04      	ldr	r3, [pc, #16]	; (800ef3c <__assert_func+0x38>)
 800ef2a:	461c      	mov	r4, r3
 800ef2c:	e7f3      	b.n	800ef16 <__assert_func+0x12>
 800ef2e:	bf00      	nop
 800ef30:	20000164 	.word	0x20000164
 800ef34:	0800f852 	.word	0x0800f852
 800ef38:	0800f85f 	.word	0x0800f85f
 800ef3c:	0800f88d 	.word	0x0800f88d

0800ef40 <_calloc_r>:
 800ef40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef42:	fba1 2402 	umull	r2, r4, r1, r2
 800ef46:	b94c      	cbnz	r4, 800ef5c <_calloc_r+0x1c>
 800ef48:	4611      	mov	r1, r2
 800ef4a:	9201      	str	r2, [sp, #4]
 800ef4c:	f7fe fc46 	bl	800d7dc <_malloc_r>
 800ef50:	9a01      	ldr	r2, [sp, #4]
 800ef52:	4605      	mov	r5, r0
 800ef54:	b930      	cbnz	r0, 800ef64 <_calloc_r+0x24>
 800ef56:	4628      	mov	r0, r5
 800ef58:	b003      	add	sp, #12
 800ef5a:	bd30      	pop	{r4, r5, pc}
 800ef5c:	220c      	movs	r2, #12
 800ef5e:	6002      	str	r2, [r0, #0]
 800ef60:	2500      	movs	r5, #0
 800ef62:	e7f8      	b.n	800ef56 <_calloc_r+0x16>
 800ef64:	4621      	mov	r1, r4
 800ef66:	f7fd fca9 	bl	800c8bc <memset>
 800ef6a:	e7f4      	b.n	800ef56 <_calloc_r+0x16>

0800ef6c <__ascii_mbtowc>:
 800ef6c:	b082      	sub	sp, #8
 800ef6e:	b901      	cbnz	r1, 800ef72 <__ascii_mbtowc+0x6>
 800ef70:	a901      	add	r1, sp, #4
 800ef72:	b142      	cbz	r2, 800ef86 <__ascii_mbtowc+0x1a>
 800ef74:	b14b      	cbz	r3, 800ef8a <__ascii_mbtowc+0x1e>
 800ef76:	7813      	ldrb	r3, [r2, #0]
 800ef78:	600b      	str	r3, [r1, #0]
 800ef7a:	7812      	ldrb	r2, [r2, #0]
 800ef7c:	1e10      	subs	r0, r2, #0
 800ef7e:	bf18      	it	ne
 800ef80:	2001      	movne	r0, #1
 800ef82:	b002      	add	sp, #8
 800ef84:	4770      	bx	lr
 800ef86:	4610      	mov	r0, r2
 800ef88:	e7fb      	b.n	800ef82 <__ascii_mbtowc+0x16>
 800ef8a:	f06f 0001 	mvn.w	r0, #1
 800ef8e:	e7f8      	b.n	800ef82 <__ascii_mbtowc+0x16>

0800ef90 <_realloc_r>:
 800ef90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef94:	4680      	mov	r8, r0
 800ef96:	4614      	mov	r4, r2
 800ef98:	460e      	mov	r6, r1
 800ef9a:	b921      	cbnz	r1, 800efa6 <_realloc_r+0x16>
 800ef9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efa0:	4611      	mov	r1, r2
 800efa2:	f7fe bc1b 	b.w	800d7dc <_malloc_r>
 800efa6:	b92a      	cbnz	r2, 800efb4 <_realloc_r+0x24>
 800efa8:	f7fe fba4 	bl	800d6f4 <_free_r>
 800efac:	4625      	mov	r5, r4
 800efae:	4628      	mov	r0, r5
 800efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb4:	f000 f93b 	bl	800f22e <_malloc_usable_size_r>
 800efb8:	4284      	cmp	r4, r0
 800efba:	4607      	mov	r7, r0
 800efbc:	d802      	bhi.n	800efc4 <_realloc_r+0x34>
 800efbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efc2:	d812      	bhi.n	800efea <_realloc_r+0x5a>
 800efc4:	4621      	mov	r1, r4
 800efc6:	4640      	mov	r0, r8
 800efc8:	f7fe fc08 	bl	800d7dc <_malloc_r>
 800efcc:	4605      	mov	r5, r0
 800efce:	2800      	cmp	r0, #0
 800efd0:	d0ed      	beq.n	800efae <_realloc_r+0x1e>
 800efd2:	42bc      	cmp	r4, r7
 800efd4:	4622      	mov	r2, r4
 800efd6:	4631      	mov	r1, r6
 800efd8:	bf28      	it	cs
 800efda:	463a      	movcs	r2, r7
 800efdc:	f7fd fd00 	bl	800c9e0 <memcpy>
 800efe0:	4631      	mov	r1, r6
 800efe2:	4640      	mov	r0, r8
 800efe4:	f7fe fb86 	bl	800d6f4 <_free_r>
 800efe8:	e7e1      	b.n	800efae <_realloc_r+0x1e>
 800efea:	4635      	mov	r5, r6
 800efec:	e7df      	b.n	800efae <_realloc_r+0x1e>
	...

0800eff0 <_strtol_l.constprop.0>:
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eff6:	d001      	beq.n	800effc <_strtol_l.constprop.0+0xc>
 800eff8:	2b24      	cmp	r3, #36	; 0x24
 800effa:	d906      	bls.n	800f00a <_strtol_l.constprop.0+0x1a>
 800effc:	f7fd fcc4 	bl	800c988 <__errno>
 800f000:	2316      	movs	r3, #22
 800f002:	6003      	str	r3, [r0, #0]
 800f004:	2000      	movs	r0, #0
 800f006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f00a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f0f0 <_strtol_l.constprop.0+0x100>
 800f00e:	460d      	mov	r5, r1
 800f010:	462e      	mov	r6, r5
 800f012:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f016:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f01a:	f017 0708 	ands.w	r7, r7, #8
 800f01e:	d1f7      	bne.n	800f010 <_strtol_l.constprop.0+0x20>
 800f020:	2c2d      	cmp	r4, #45	; 0x2d
 800f022:	d132      	bne.n	800f08a <_strtol_l.constprop.0+0x9a>
 800f024:	782c      	ldrb	r4, [r5, #0]
 800f026:	2701      	movs	r7, #1
 800f028:	1cb5      	adds	r5, r6, #2
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d05b      	beq.n	800f0e6 <_strtol_l.constprop.0+0xf6>
 800f02e:	2b10      	cmp	r3, #16
 800f030:	d109      	bne.n	800f046 <_strtol_l.constprop.0+0x56>
 800f032:	2c30      	cmp	r4, #48	; 0x30
 800f034:	d107      	bne.n	800f046 <_strtol_l.constprop.0+0x56>
 800f036:	782c      	ldrb	r4, [r5, #0]
 800f038:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f03c:	2c58      	cmp	r4, #88	; 0x58
 800f03e:	d14d      	bne.n	800f0dc <_strtol_l.constprop.0+0xec>
 800f040:	786c      	ldrb	r4, [r5, #1]
 800f042:	2310      	movs	r3, #16
 800f044:	3502      	adds	r5, #2
 800f046:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f04a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f04e:	f04f 0e00 	mov.w	lr, #0
 800f052:	fbb8 f9f3 	udiv	r9, r8, r3
 800f056:	4676      	mov	r6, lr
 800f058:	fb03 8a19 	mls	sl, r3, r9, r8
 800f05c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f060:	f1bc 0f09 	cmp.w	ip, #9
 800f064:	d816      	bhi.n	800f094 <_strtol_l.constprop.0+0xa4>
 800f066:	4664      	mov	r4, ip
 800f068:	42a3      	cmp	r3, r4
 800f06a:	dd24      	ble.n	800f0b6 <_strtol_l.constprop.0+0xc6>
 800f06c:	f1be 3fff 	cmp.w	lr, #4294967295
 800f070:	d008      	beq.n	800f084 <_strtol_l.constprop.0+0x94>
 800f072:	45b1      	cmp	r9, r6
 800f074:	d31c      	bcc.n	800f0b0 <_strtol_l.constprop.0+0xc0>
 800f076:	d101      	bne.n	800f07c <_strtol_l.constprop.0+0x8c>
 800f078:	45a2      	cmp	sl, r4
 800f07a:	db19      	blt.n	800f0b0 <_strtol_l.constprop.0+0xc0>
 800f07c:	fb06 4603 	mla	r6, r6, r3, r4
 800f080:	f04f 0e01 	mov.w	lr, #1
 800f084:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f088:	e7e8      	b.n	800f05c <_strtol_l.constprop.0+0x6c>
 800f08a:	2c2b      	cmp	r4, #43	; 0x2b
 800f08c:	bf04      	itt	eq
 800f08e:	782c      	ldrbeq	r4, [r5, #0]
 800f090:	1cb5      	addeq	r5, r6, #2
 800f092:	e7ca      	b.n	800f02a <_strtol_l.constprop.0+0x3a>
 800f094:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f098:	f1bc 0f19 	cmp.w	ip, #25
 800f09c:	d801      	bhi.n	800f0a2 <_strtol_l.constprop.0+0xb2>
 800f09e:	3c37      	subs	r4, #55	; 0x37
 800f0a0:	e7e2      	b.n	800f068 <_strtol_l.constprop.0+0x78>
 800f0a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f0a6:	f1bc 0f19 	cmp.w	ip, #25
 800f0aa:	d804      	bhi.n	800f0b6 <_strtol_l.constprop.0+0xc6>
 800f0ac:	3c57      	subs	r4, #87	; 0x57
 800f0ae:	e7db      	b.n	800f068 <_strtol_l.constprop.0+0x78>
 800f0b0:	f04f 3eff 	mov.w	lr, #4294967295
 800f0b4:	e7e6      	b.n	800f084 <_strtol_l.constprop.0+0x94>
 800f0b6:	f1be 3fff 	cmp.w	lr, #4294967295
 800f0ba:	d105      	bne.n	800f0c8 <_strtol_l.constprop.0+0xd8>
 800f0bc:	2322      	movs	r3, #34	; 0x22
 800f0be:	6003      	str	r3, [r0, #0]
 800f0c0:	4646      	mov	r6, r8
 800f0c2:	b942      	cbnz	r2, 800f0d6 <_strtol_l.constprop.0+0xe6>
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	e79e      	b.n	800f006 <_strtol_l.constprop.0+0x16>
 800f0c8:	b107      	cbz	r7, 800f0cc <_strtol_l.constprop.0+0xdc>
 800f0ca:	4276      	negs	r6, r6
 800f0cc:	2a00      	cmp	r2, #0
 800f0ce:	d0f9      	beq.n	800f0c4 <_strtol_l.constprop.0+0xd4>
 800f0d0:	f1be 0f00 	cmp.w	lr, #0
 800f0d4:	d000      	beq.n	800f0d8 <_strtol_l.constprop.0+0xe8>
 800f0d6:	1e69      	subs	r1, r5, #1
 800f0d8:	6011      	str	r1, [r2, #0]
 800f0da:	e7f3      	b.n	800f0c4 <_strtol_l.constprop.0+0xd4>
 800f0dc:	2430      	movs	r4, #48	; 0x30
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1b1      	bne.n	800f046 <_strtol_l.constprop.0+0x56>
 800f0e2:	2308      	movs	r3, #8
 800f0e4:	e7af      	b.n	800f046 <_strtol_l.constprop.0+0x56>
 800f0e6:	2c30      	cmp	r4, #48	; 0x30
 800f0e8:	d0a5      	beq.n	800f036 <_strtol_l.constprop.0+0x46>
 800f0ea:	230a      	movs	r3, #10
 800f0ec:	e7ab      	b.n	800f046 <_strtol_l.constprop.0+0x56>
 800f0ee:	bf00      	nop
 800f0f0:	0800f88f 	.word	0x0800f88f

0800f0f4 <_strtol_r>:
 800f0f4:	f7ff bf7c 	b.w	800eff0 <_strtol_l.constprop.0>

0800f0f8 <_strtoul_l.constprop.0>:
 800f0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0fc:	4f36      	ldr	r7, [pc, #216]	; (800f1d8 <_strtoul_l.constprop.0+0xe0>)
 800f0fe:	4686      	mov	lr, r0
 800f100:	460d      	mov	r5, r1
 800f102:	4628      	mov	r0, r5
 800f104:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f108:	5d3e      	ldrb	r6, [r7, r4]
 800f10a:	f016 0608 	ands.w	r6, r6, #8
 800f10e:	d1f8      	bne.n	800f102 <_strtoul_l.constprop.0+0xa>
 800f110:	2c2d      	cmp	r4, #45	; 0x2d
 800f112:	d130      	bne.n	800f176 <_strtoul_l.constprop.0+0x7e>
 800f114:	782c      	ldrb	r4, [r5, #0]
 800f116:	2601      	movs	r6, #1
 800f118:	1c85      	adds	r5, r0, #2
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d057      	beq.n	800f1ce <_strtoul_l.constprop.0+0xd6>
 800f11e:	2b10      	cmp	r3, #16
 800f120:	d109      	bne.n	800f136 <_strtoul_l.constprop.0+0x3e>
 800f122:	2c30      	cmp	r4, #48	; 0x30
 800f124:	d107      	bne.n	800f136 <_strtoul_l.constprop.0+0x3e>
 800f126:	7828      	ldrb	r0, [r5, #0]
 800f128:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f12c:	2858      	cmp	r0, #88	; 0x58
 800f12e:	d149      	bne.n	800f1c4 <_strtoul_l.constprop.0+0xcc>
 800f130:	786c      	ldrb	r4, [r5, #1]
 800f132:	2310      	movs	r3, #16
 800f134:	3502      	adds	r5, #2
 800f136:	f04f 38ff 	mov.w	r8, #4294967295
 800f13a:	2700      	movs	r7, #0
 800f13c:	fbb8 f8f3 	udiv	r8, r8, r3
 800f140:	fb03 f908 	mul.w	r9, r3, r8
 800f144:	ea6f 0909 	mvn.w	r9, r9
 800f148:	4638      	mov	r0, r7
 800f14a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f14e:	f1bc 0f09 	cmp.w	ip, #9
 800f152:	d815      	bhi.n	800f180 <_strtoul_l.constprop.0+0x88>
 800f154:	4664      	mov	r4, ip
 800f156:	42a3      	cmp	r3, r4
 800f158:	dd23      	ble.n	800f1a2 <_strtoul_l.constprop.0+0xaa>
 800f15a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f15e:	d007      	beq.n	800f170 <_strtoul_l.constprop.0+0x78>
 800f160:	4580      	cmp	r8, r0
 800f162:	d31b      	bcc.n	800f19c <_strtoul_l.constprop.0+0xa4>
 800f164:	d101      	bne.n	800f16a <_strtoul_l.constprop.0+0x72>
 800f166:	45a1      	cmp	r9, r4
 800f168:	db18      	blt.n	800f19c <_strtoul_l.constprop.0+0xa4>
 800f16a:	fb00 4003 	mla	r0, r0, r3, r4
 800f16e:	2701      	movs	r7, #1
 800f170:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f174:	e7e9      	b.n	800f14a <_strtoul_l.constprop.0+0x52>
 800f176:	2c2b      	cmp	r4, #43	; 0x2b
 800f178:	bf04      	itt	eq
 800f17a:	782c      	ldrbeq	r4, [r5, #0]
 800f17c:	1c85      	addeq	r5, r0, #2
 800f17e:	e7cc      	b.n	800f11a <_strtoul_l.constprop.0+0x22>
 800f180:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f184:	f1bc 0f19 	cmp.w	ip, #25
 800f188:	d801      	bhi.n	800f18e <_strtoul_l.constprop.0+0x96>
 800f18a:	3c37      	subs	r4, #55	; 0x37
 800f18c:	e7e3      	b.n	800f156 <_strtoul_l.constprop.0+0x5e>
 800f18e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f192:	f1bc 0f19 	cmp.w	ip, #25
 800f196:	d804      	bhi.n	800f1a2 <_strtoul_l.constprop.0+0xaa>
 800f198:	3c57      	subs	r4, #87	; 0x57
 800f19a:	e7dc      	b.n	800f156 <_strtoul_l.constprop.0+0x5e>
 800f19c:	f04f 37ff 	mov.w	r7, #4294967295
 800f1a0:	e7e6      	b.n	800f170 <_strtoul_l.constprop.0+0x78>
 800f1a2:	1c7b      	adds	r3, r7, #1
 800f1a4:	d106      	bne.n	800f1b4 <_strtoul_l.constprop.0+0xbc>
 800f1a6:	2322      	movs	r3, #34	; 0x22
 800f1a8:	f8ce 3000 	str.w	r3, [lr]
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	b932      	cbnz	r2, 800f1be <_strtoul_l.constprop.0+0xc6>
 800f1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1b4:	b106      	cbz	r6, 800f1b8 <_strtoul_l.constprop.0+0xc0>
 800f1b6:	4240      	negs	r0, r0
 800f1b8:	2a00      	cmp	r2, #0
 800f1ba:	d0f9      	beq.n	800f1b0 <_strtoul_l.constprop.0+0xb8>
 800f1bc:	b107      	cbz	r7, 800f1c0 <_strtoul_l.constprop.0+0xc8>
 800f1be:	1e69      	subs	r1, r5, #1
 800f1c0:	6011      	str	r1, [r2, #0]
 800f1c2:	e7f5      	b.n	800f1b0 <_strtoul_l.constprop.0+0xb8>
 800f1c4:	2430      	movs	r4, #48	; 0x30
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1b5      	bne.n	800f136 <_strtoul_l.constprop.0+0x3e>
 800f1ca:	2308      	movs	r3, #8
 800f1cc:	e7b3      	b.n	800f136 <_strtoul_l.constprop.0+0x3e>
 800f1ce:	2c30      	cmp	r4, #48	; 0x30
 800f1d0:	d0a9      	beq.n	800f126 <_strtoul_l.constprop.0+0x2e>
 800f1d2:	230a      	movs	r3, #10
 800f1d4:	e7af      	b.n	800f136 <_strtoul_l.constprop.0+0x3e>
 800f1d6:	bf00      	nop
 800f1d8:	0800f88f 	.word	0x0800f88f

0800f1dc <_strtoul_r>:
 800f1dc:	f7ff bf8c 	b.w	800f0f8 <_strtoul_l.constprop.0>

0800f1e0 <__ascii_wctomb>:
 800f1e0:	b149      	cbz	r1, 800f1f6 <__ascii_wctomb+0x16>
 800f1e2:	2aff      	cmp	r2, #255	; 0xff
 800f1e4:	bf85      	ittet	hi
 800f1e6:	238a      	movhi	r3, #138	; 0x8a
 800f1e8:	6003      	strhi	r3, [r0, #0]
 800f1ea:	700a      	strbls	r2, [r1, #0]
 800f1ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800f1f0:	bf98      	it	ls
 800f1f2:	2001      	movls	r0, #1
 800f1f4:	4770      	bx	lr
 800f1f6:	4608      	mov	r0, r1
 800f1f8:	4770      	bx	lr
	...

0800f1fc <fiprintf>:
 800f1fc:	b40e      	push	{r1, r2, r3}
 800f1fe:	b503      	push	{r0, r1, lr}
 800f200:	4601      	mov	r1, r0
 800f202:	ab03      	add	r3, sp, #12
 800f204:	4805      	ldr	r0, [pc, #20]	; (800f21c <fiprintf+0x20>)
 800f206:	f853 2b04 	ldr.w	r2, [r3], #4
 800f20a:	6800      	ldr	r0, [r0, #0]
 800f20c:	9301      	str	r3, [sp, #4]
 800f20e:	f7ff fa41 	bl	800e694 <_vfiprintf_r>
 800f212:	b002      	add	sp, #8
 800f214:	f85d eb04 	ldr.w	lr, [sp], #4
 800f218:	b003      	add	sp, #12
 800f21a:	4770      	bx	lr
 800f21c:	20000164 	.word	0x20000164

0800f220 <abort>:
 800f220:	b508      	push	{r3, lr}
 800f222:	2006      	movs	r0, #6
 800f224:	f000 f834 	bl	800f290 <raise>
 800f228:	2001      	movs	r0, #1
 800f22a:	f7f2 fdf3 	bl	8001e14 <_exit>

0800f22e <_malloc_usable_size_r>:
 800f22e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f232:	1f18      	subs	r0, r3, #4
 800f234:	2b00      	cmp	r3, #0
 800f236:	bfbc      	itt	lt
 800f238:	580b      	ldrlt	r3, [r1, r0]
 800f23a:	18c0      	addlt	r0, r0, r3
 800f23c:	4770      	bx	lr

0800f23e <_raise_r>:
 800f23e:	291f      	cmp	r1, #31
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	4604      	mov	r4, r0
 800f244:	460d      	mov	r5, r1
 800f246:	d904      	bls.n	800f252 <_raise_r+0x14>
 800f248:	2316      	movs	r3, #22
 800f24a:	6003      	str	r3, [r0, #0]
 800f24c:	f04f 30ff 	mov.w	r0, #4294967295
 800f250:	bd38      	pop	{r3, r4, r5, pc}
 800f252:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f254:	b112      	cbz	r2, 800f25c <_raise_r+0x1e>
 800f256:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f25a:	b94b      	cbnz	r3, 800f270 <_raise_r+0x32>
 800f25c:	4620      	mov	r0, r4
 800f25e:	f000 f831 	bl	800f2c4 <_getpid_r>
 800f262:	462a      	mov	r2, r5
 800f264:	4601      	mov	r1, r0
 800f266:	4620      	mov	r0, r4
 800f268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f26c:	f000 b818 	b.w	800f2a0 <_kill_r>
 800f270:	2b01      	cmp	r3, #1
 800f272:	d00a      	beq.n	800f28a <_raise_r+0x4c>
 800f274:	1c59      	adds	r1, r3, #1
 800f276:	d103      	bne.n	800f280 <_raise_r+0x42>
 800f278:	2316      	movs	r3, #22
 800f27a:	6003      	str	r3, [r0, #0]
 800f27c:	2001      	movs	r0, #1
 800f27e:	e7e7      	b.n	800f250 <_raise_r+0x12>
 800f280:	2400      	movs	r4, #0
 800f282:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f286:	4628      	mov	r0, r5
 800f288:	4798      	blx	r3
 800f28a:	2000      	movs	r0, #0
 800f28c:	e7e0      	b.n	800f250 <_raise_r+0x12>
	...

0800f290 <raise>:
 800f290:	4b02      	ldr	r3, [pc, #8]	; (800f29c <raise+0xc>)
 800f292:	4601      	mov	r1, r0
 800f294:	6818      	ldr	r0, [r3, #0]
 800f296:	f7ff bfd2 	b.w	800f23e <_raise_r>
 800f29a:	bf00      	nop
 800f29c:	20000164 	.word	0x20000164

0800f2a0 <_kill_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d07      	ldr	r5, [pc, #28]	; (800f2c0 <_kill_r+0x20>)
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	4608      	mov	r0, r1
 800f2aa:	4611      	mov	r1, r2
 800f2ac:	602b      	str	r3, [r5, #0]
 800f2ae:	f7f2 fda1 	bl	8001df4 <_kill>
 800f2b2:	1c43      	adds	r3, r0, #1
 800f2b4:	d102      	bne.n	800f2bc <_kill_r+0x1c>
 800f2b6:	682b      	ldr	r3, [r5, #0]
 800f2b8:	b103      	cbz	r3, 800f2bc <_kill_r+0x1c>
 800f2ba:	6023      	str	r3, [r4, #0]
 800f2bc:	bd38      	pop	{r3, r4, r5, pc}
 800f2be:	bf00      	nop
 800f2c0:	20001b60 	.word	0x20001b60

0800f2c4 <_getpid_r>:
 800f2c4:	f7f2 bd8e 	b.w	8001de4 <_getpid>

0800f2c8 <_init>:
 800f2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ca:	bf00      	nop
 800f2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ce:	bc08      	pop	{r3}
 800f2d0:	469e      	mov	lr, r3
 800f2d2:	4770      	bx	lr

0800f2d4 <_fini>:
 800f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d6:	bf00      	nop
 800f2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2da:	bc08      	pop	{r3}
 800f2dc:	469e      	mov	lr, r3
 800f2de:	4770      	bx	lr
